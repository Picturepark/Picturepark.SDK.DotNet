### YamlMime:ManagedReference
items:
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  commentId: T:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  id: IngestClientExtensions
  parent: Picturepark.SDK.V1.AzureBlob
  children:
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile},Picturepark.SDK.V1.Contract.ImportOptions,Picturepark.SDK.V1.Contract.FileImportRequest,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,Picturepark.SDK.V1.AzureBlob.IngestUploadItem,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.String,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  - Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IngestClientExtensions
  nameWithType: IngestClientExtensions
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  type: Class
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: IngestClientExtensions
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 18
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Convenience extensions for <xref href="Picturepark.SDK.V1.Contract.IIngestClient" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static class IngestClientExtensions
    content.vb: Public Module IngestClientExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  id: UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadAndImportFilesAsync(IIngestClient, IEnumerable<string>, FileImportRequest?, IngestUploadOptions?, ImportOptions?, TimeSpan?, bool, CancellationToken)
  nameWithType: IngestClientExtensions.UploadAndImportFilesAsync(IIngestClient, IEnumerable<string>, FileImportRequest?, IngestUploadOptions?, ImportOptions?, TimeSpan?, bool, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable<string>, Picturepark.SDK.V1.Contract.FileImportRequest?, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions?, Picturepark.SDK.V1.Contract.ImportOptions?, System.TimeSpan?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadAndImportFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 32
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Uploads files from local filesystem and imports them into Content Platform.
  example: []
  syntax:
    content: public static Task<ContentBatchOperationWithRequestIdResult> UploadAndImportFilesAsync(this IIngestClient client, IEnumerable<string> filePaths, FileImportRequest? requestForAllFiles = null, IngestUploadOptions? uploadOptions = null, ImportOptions? importOptions = null, TimeSpan? timeout = null, bool waitSearchDocCreation = true, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: filePaths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Path to files
    - id: requestForAllFiles
      type: Picturepark.SDK.V1.Contract.FileImportRequest
      description: Metadata, permission sets etc. to assign for all files on import
    - id: uploadOptions
      type: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
      description: Upload options
    - id: importOptions
      type: Picturepark.SDK.V1.Contract.ImportOptions
      description: Import options
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: Time to wait for business process completion
    - id: waitSearchDocCreation
      type: System.Boolean
      description: Indicates if search document creation should be awaited
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
      description: ContentBatchOperationWithRequestIdResult
    content.vb: Public Shared Function UploadAndImportFilesAsync(client As IIngestClient, filePaths As IEnumerable(Of String), requestForAllFiles As FileImportRequest = Nothing, uploadOptions As IngestUploadOptions = Nothing, importOptions As ImportOptions = Nothing, timeout As TimeSpan? = Nothing, waitSearchDocCreation As Boolean = True, ct As CancellationToken = Nothing) As Task(Of ContentBatchOperationWithRequestIdResult)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync*
  nameWithType.vb: IngestClientExtensions.UploadAndImportFilesAsync(IIngestClient, IEnumerable(Of String), FileImportRequest, IngestUploadOptions, ImportOptions, TimeSpan?, Boolean, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable(Of String), Picturepark.SDK.V1.Contract.FileImportRequest, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions, Picturepark.SDK.V1.Contract.ImportOptions, System.TimeSpan?, Boolean, System.Threading.CancellationToken)
  name.vb: UploadAndImportFilesAsync(IIngestClient, IEnumerable(Of String), FileImportRequest, IngestUploadOptions, ImportOptions, TimeSpan?, Boolean, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  id: UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.Contract.FileImportRequest,Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadAndImportFilesAsync(IIngestClient, IEnumerable<IngestUploadItem>, FileImportRequest?, IngestUploadOptions?, ImportOptions?, TimeSpan?, bool, CancellationToken)
  nameWithType: IngestClientExtensions.UploadAndImportFilesAsync(IIngestClient, IEnumerable<IngestUploadItem>, FileImportRequest?, IngestUploadOptions?, ImportOptions?, TimeSpan?, bool, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable<Picturepark.SDK.V1.AzureBlob.IngestUploadItem>, Picturepark.SDK.V1.Contract.FileImportRequest?, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions?, Picturepark.SDK.V1.Contract.ImportOptions?, System.TimeSpan?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadAndImportFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 58
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Uploads items and imports them into Content Platform.
  example: []
  syntax:
    content: public static Task<ContentBatchOperationWithRequestIdResult> UploadAndImportFilesAsync(this IIngestClient client, IEnumerable<IngestUploadItem> items, FileImportRequest? requestForAllItems = null, IngestUploadOptions? uploadOptions = null, ImportOptions? importOptions = null, TimeSpan? timeout = null, bool waitSearchDocCreation = true, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: items
      type: System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem}
      description: Items to upload
    - id: requestForAllItems
      type: Picturepark.SDK.V1.Contract.FileImportRequest
      description: Metadata, permission sets etc. to assign for all files on import
    - id: uploadOptions
      type: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
      description: Upload options
    - id: importOptions
      type: Picturepark.SDK.V1.Contract.ImportOptions
      description: Import options
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: Time to wait for business process completion
    - id: waitSearchDocCreation
      type: System.Boolean
      description: Indicates if search document creation should be awaited
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
      description: ContentBatchOperationWithRequestIdResult
    content.vb: Public Shared Function UploadAndImportFilesAsync(client As IIngestClient, items As IEnumerable(Of IngestUploadItem), requestForAllItems As FileImportRequest = Nothing, uploadOptions As IngestUploadOptions = Nothing, importOptions As ImportOptions = Nothing, timeout As TimeSpan? = Nothing, waitSearchDocCreation As Boolean = True, ct As CancellationToken = Nothing) As Task(Of ContentBatchOperationWithRequestIdResult)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync*
  nameWithType.vb: IngestClientExtensions.UploadAndImportFilesAsync(IIngestClient, IEnumerable(Of IngestUploadItem), FileImportRequest, IngestUploadOptions, ImportOptions, TimeSpan?, Boolean, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable(Of Picturepark.SDK.V1.AzureBlob.IngestUploadItem), Picturepark.SDK.V1.Contract.FileImportRequest, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions, Picturepark.SDK.V1.Contract.ImportOptions, System.TimeSpan?, Boolean, System.Threading.CancellationToken)
  name.vb: UploadAndImportFilesAsync(IIngestClient, IEnumerable(Of IngestUploadItem), FileImportRequest, IngestUploadOptions, ImportOptions, TimeSpan?, Boolean, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  id: UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadFilesAsync(IIngestClient, IEnumerable<IngestUploadItem>, IngestUploadOptions?, CancellationToken)
  nameWithType: IngestClientExtensions.UploadFilesAsync(IIngestClient, IEnumerable<IngestUploadItem>, IngestUploadOptions?, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable<Picturepark.SDK.V1.AzureBlob.IngestUploadItem>, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 83
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Upload items to ingest container
  remarks: This only uploads items, to import them, call one of the Import* methods later.
  example: []
  syntax:
    content: public static Task<IReadOnlyCollection<IngestFile>> UploadFilesAsync(this IIngestClient client, IEnumerable<IngestUploadItem> items, IngestUploadOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: items
      type: System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem}
      description: Items to upload
    - id: options
      type: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
      description: Upload options
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}}
      description: Collection of <xref href="Picturepark.SDK.V1.Contract.IngestFile" data-throw-if-not-resolved="false"></xref> instances
    content.vb: Public Shared Function UploadFilesAsync(client As IIngestClient, items As IEnumerable(Of IngestUploadItem), options As IngestUploadOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of IReadOnlyCollection(Of IngestFile))
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync*
  nameWithType.vb: IngestClientExtensions.UploadFilesAsync(IIngestClient, IEnumerable(Of IngestUploadItem), IngestUploadOptions, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable(Of Picturepark.SDK.V1.AzureBlob.IngestUploadItem), Picturepark.SDK.V1.AzureBlob.IngestUploadOptions, System.Threading.CancellationToken)
  name.vb: UploadFilesAsync(IIngestClient, IEnumerable(Of IngestUploadItem), IngestUploadOptions, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  id: UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IEnumerable{System.String},Picturepark.SDK.V1.AzureBlob.IngestUploadOptions,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadFilesAsync(IIngestClient, IEnumerable<string>, IngestUploadOptions?, CancellationToken)
  nameWithType: IngestClientExtensions.UploadFilesAsync(IIngestClient, IEnumerable<string>, IngestUploadOptions?, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable<string>, Picturepark.SDK.V1.AzureBlob.IngestUploadOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 143
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Upload files from local filesystem to ingest container
  remarks: This only uploads files, to import them, call one of the Import* methods later.
  example: []
  syntax:
    content: public static Task<IReadOnlyCollection<IngestFile>> UploadFilesAsync(this IIngestClient client, IEnumerable<string> filePaths, IngestUploadOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: filePaths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Path to files
    - id: options
      type: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
      description: Upload options
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}}
      description: Collection of <xref href="Picturepark.SDK.V1.Contract.IngestFile" data-throw-if-not-resolved="false"></xref> instances
    content.vb: Public Shared Function UploadFilesAsync(client As IIngestClient, filePaths As IEnumerable(Of String), options As IngestUploadOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of IReadOnlyCollection(Of IngestFile))
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync*
  nameWithType.vb: IngestClientExtensions.UploadFilesAsync(IIngestClient, IEnumerable(Of String), IngestUploadOptions, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IEnumerable(Of String), Picturepark.SDK.V1.AzureBlob.IngestUploadOptions, System.Threading.CancellationToken)
  name.vb: UploadFilesAsync(IIngestClient, IEnumerable(Of String), IngestUploadOptions, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.String,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.String,System.Threading.CancellationToken)
  id: UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadFileAsync(IIngestClient, string, CancellationToken)
  nameWithType: IngestClientExtensions.UploadFileAsync(IIngestClient, string, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadFileAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 170
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Uploads a file from local filesystem to ingest container
  remarks: This only uploads the file, to import it, call one of the Import* methods later.
  example: []
  syntax:
    content: public static Task<IngestFile> UploadFileAsync(this IIngestClient client, string filePath, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: filePath
      type: System.String
      description: Path to file
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.IngestFile}
      description: <xref href="Picturepark.SDK.V1.Contract.IngestFile" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Function UploadFileAsync(client As IIngestClient, filePath As String, ct As CancellationToken = Nothing) As Task(Of IngestFile)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync*
  nameWithType.vb: IngestClientExtensions.UploadFileAsync(IIngestClient, String, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient, String, System.Threading.CancellationToken)
  name.vb: UploadFileAsync(IIngestClient, String, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,Picturepark.SDK.V1.AzureBlob.IngestUploadItem,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,Picturepark.SDK.V1.AzureBlob.IngestUploadItem,System.Threading.CancellationToken)
  id: UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient,Picturepark.SDK.V1.AzureBlob.IngestUploadItem,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: UploadFileAsync(IIngestClient, IngestUploadItem, CancellationToken)
  nameWithType: IngestClientExtensions.UploadFileAsync(IIngestClient, IngestUploadItem, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync(Picturepark.SDK.V1.Contract.IIngestClient, Picturepark.SDK.V1.AzureBlob.IngestUploadItem, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: UploadFileAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 189
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Uploads a single item to ingest container
  remarks: This only uploads the item, to import it, call one of the Import* methods later.
  example: []
  syntax:
    content: public static Task<IngestFile> UploadFileAsync(this IIngestClient client, IngestUploadItem item, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: item
      type: Picturepark.SDK.V1.AzureBlob.IngestUploadItem
      description: Item to upload
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.IngestFile}
      description: <xref href="Picturepark.SDK.V1.Contract.IngestFile" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Function UploadFileAsync(client As IIngestClient, item As IngestUploadItem, ct As CancellationToken = Nothing) As Task(Of IngestFile)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync*
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile},Picturepark.SDK.V1.Contract.ImportOptions,Picturepark.SDK.V1.Contract.FileImportRequest,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile},Picturepark.SDK.V1.Contract.ImportOptions,Picturepark.SDK.V1.Contract.FileImportRequest,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  id: ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile},Picturepark.SDK.V1.Contract.ImportOptions,Picturepark.SDK.V1.Contract.FileImportRequest,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: ImportFilesAsync(IIngestClient, IReadOnlyCollection<IngestFile>, ImportOptions?, FileImportRequest?, TimeSpan?, bool, CancellationToken)
  nameWithType: IngestClientExtensions.ImportFilesAsync(IIngestClient, IReadOnlyCollection<IngestFile>, ImportOptions?, FileImportRequest?, TimeSpan?, bool, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IReadOnlyCollection<Picturepark.SDK.V1.Contract.IngestFile>, Picturepark.SDK.V1.Contract.ImportOptions?, Picturepark.SDK.V1.Contract.FileImportRequest?, System.TimeSpan?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: ImportFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 210
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Imports files from container into Content Platform.
  remarks: All files must reside in the same ingest container otherwise <xref href="System.InvalidOperationException" data-throw-if-not-resolved="false"></xref> is thrown.
  example: []
  syntax:
    content: public static Task<ContentBatchOperationWithRequestIdResult> ImportFilesAsync(this IIngestClient client, IReadOnlyCollection<IngestFile> files, ImportOptions? options = null, FileImportRequest? requestForAllFiles = null, TimeSpan? timeout = null, bool waitSearchDocCreation = true, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: files
      type: System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}
      description: Files to import
    - id: options
      type: Picturepark.SDK.V1.Contract.ImportOptions
      description: Options for import
    - id: requestForAllFiles
      type: Picturepark.SDK.V1.Contract.FileImportRequest
      description: Metadata, permission sets etc. to assign for all files on import
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: Time to wait for business process completion
    - id: waitSearchDocCreation
      type: System.Boolean
      description: Indicates if search document creation should be awaited
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
      description: ContentBatchOperationWithRequestIdResult
    content.vb: Public Shared Function ImportFilesAsync(client As IIngestClient, files As IReadOnlyCollection(Of IngestFile), options As ImportOptions = Nothing, requestForAllFiles As FileImportRequest = Nothing, timeout As TimeSpan? = Nothing, waitSearchDocCreation As Boolean = True, ct As CancellationToken = Nothing) As Task(Of ContentBatchOperationWithRequestIdResult)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync*
  nameWithType.vb: IngestClientExtensions.ImportFilesAsync(IIngestClient, IReadOnlyCollection(Of IngestFile), ImportOptions, FileImportRequest, TimeSpan?, Boolean, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IReadOnlyCollection(Of Picturepark.SDK.V1.Contract.IngestFile), Picturepark.SDK.V1.Contract.ImportOptions, Picturepark.SDK.V1.Contract.FileImportRequest, System.TimeSpan?, Boolean, System.Threading.CancellationToken)
  name.vb: ImportFilesAsync(IIngestClient, IReadOnlyCollection(Of IngestFile), ImportOptions, FileImportRequest, TimeSpan?, Boolean, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  id: ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: ImportFilesAsync(IIngestClient, IDictionary<IngestFile, FileImportWithFileNameOverrideRequest>, ImportOptions?, TimeSpan?, bool, CancellationToken)
  nameWithType: IngestClientExtensions.ImportFilesAsync(IIngestClient, IDictionary<IngestFile, FileImportWithFileNameOverrideRequest>, ImportOptions?, TimeSpan?, bool, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IDictionary<Picturepark.SDK.V1.Contract.IngestFile, Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest>, Picturepark.SDK.V1.Contract.ImportOptions?, System.TimeSpan?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: ImportFilesAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 247
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Imports files from container into Content Platform allowing assignment of different metadata for each file.
  remarks: All items must reside in the same ingest container otherwise <xref href="System.InvalidOperationException" data-throw-if-not-resolved="false"></xref> is thrown.
  example: []
  syntax:
    content: public static Task<ContentBatchOperationWithRequestIdResult> ImportFilesAsync(this IIngestClient client, IDictionary<IngestFile, FileImportWithFileNameOverrideRequest> requests, ImportOptions? options = null, TimeSpan? timeout = null, bool waitSearchDocCreation = true, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: requests
      type: System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest}
      description: Request for each file
    - id: options
      type: Picturepark.SDK.V1.Contract.ImportOptions
      description: Import options
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: Time to wait for business process completion
    - id: waitSearchDocCreation
      type: System.Boolean
      description: Indicates if search document creation should be awaited
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
      description: ContentBatchOperationWithRequestIdResult
    content.vb: Public Shared Function ImportFilesAsync(client As IIngestClient, requests As IDictionary(Of IngestFile, FileImportWithFileNameOverrideRequest), options As ImportOptions = Nothing, timeout As TimeSpan? = Nothing, waitSearchDocCreation As Boolean = True, ct As CancellationToken = Nothing) As Task(Of ContentBatchOperationWithRequestIdResult)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync*
  nameWithType.vb: IngestClientExtensions.ImportFilesAsync(IIngestClient, IDictionary(Of IngestFile, FileImportWithFileNameOverrideRequest), ImportOptions, TimeSpan?, Boolean, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IDictionary(Of Picturepark.SDK.V1.Contract.IngestFile, Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest), Picturepark.SDK.V1.Contract.ImportOptions, System.TimeSpan?, Boolean, System.Threading.CancellationToken)
  name.vb: ImportFilesAsync(IIngestClient, IDictionary(Of IngestFile, FileImportWithFileNameOverrideRequest), ImportOptions, TimeSpan?, Boolean, CancellationToken)
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  id: ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient,System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest},Picturepark.SDK.V1.Contract.ImportOptions,System.Nullable{System.TimeSpan},System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions
  langs:
  - csharp
  - vb
  name: ImportFromUrlsAsync(IIngestClient, IDictionary<string, UrlImportRequest>, ImportOptions?, TimeSpan?, bool, CancellationToken)
  nameWithType: IngestClientExtensions.ImportFromUrlsAsync(IIngestClient, IDictionary<string, UrlImportRequest>, ImportOptions?, TimeSpan?, bool, CancellationToken)
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IDictionary<string, Picturepark.SDK.V1.Contract.UrlImportRequest>, Picturepark.SDK.V1.Contract.ImportOptions?, System.TimeSpan?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
      branch: release-prep/PP9-21763-regenerate-docs
      repo: https://github.com/Picturepark/Picturepark.SDK.DotNet
    id: ImportFromUrlsAsync
    path: ../../src/Picturepark.SDK.V1.AzureBlob/IngestClientExtensions.cs
    startLine: 298
  assemblies:
  - Picturepark.SDK.V1.AzureBlob
  namespace: Picturepark.SDK.V1.AzureBlob
  summary: Imports specified URLs into Content Platform.
  example: []
  syntax:
    content: public static Task<ContentBatchOperationWithRequestIdResult> ImportFromUrlsAsync(this IIngestClient client, IDictionary<string, UrlImportRequest> requests, ImportOptions? options = null, TimeSpan? timeout = null, bool waitSearchDocCreation = true, CancellationToken ct = default)
    parameters:
    - id: client
      type: Picturepark.SDK.V1.Contract.IIngestClient
      description: Ingest client
    - id: requests
      type: System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest}
      description: Requests
    - id: options
      type: Picturepark.SDK.V1.Contract.ImportOptions
      description: Import options
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: Time to wait for business process completion
    - id: waitSearchDocCreation
      type: System.Boolean
      description: Indicates if search document creation should be awaited
    - id: ct
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
      description: ContentBatchOperationWithRequestIdResult
    content.vb: Public Shared Function ImportFromUrlsAsync(client As IIngestClient, requests As IDictionary(Of String, UrlImportRequest), options As ImportOptions = Nothing, timeout As TimeSpan? = Nothing, waitSearchDocCreation As Boolean = True, ct As CancellationToken = Nothing) As Task(Of ContentBatchOperationWithRequestIdResult)
  overload: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync*
  nameWithType.vb: IngestClientExtensions.ImportFromUrlsAsync(IIngestClient, IDictionary(Of String, UrlImportRequest), ImportOptions, TimeSpan?, Boolean, CancellationToken)
  fullName.vb: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync(Picturepark.SDK.V1.Contract.IIngestClient, System.Collections.Generic.IDictionary(Of String, Picturepark.SDK.V1.Contract.UrlImportRequest), Picturepark.SDK.V1.Contract.ImportOptions, System.TimeSpan?, Boolean, System.Threading.CancellationToken)
  name.vb: ImportFromUrlsAsync(IIngestClient, IDictionary(Of String, UrlImportRequest), ImportOptions, TimeSpan?, Boolean, CancellationToken)
references:
- uid: Picturepark.SDK.V1.Contract.IIngestClient
  commentId: T:Picturepark.SDK.V1.Contract.IIngestClient
  parent: Picturepark.SDK.V1.Contract
  href: Picturepark.SDK.V1.Contract.IIngestClient.html
  name: IIngestClient
  nameWithType: IIngestClient
  fullName: Picturepark.SDK.V1.Contract.IIngestClient
- uid: Picturepark.SDK.V1.AzureBlob
  commentId: N:Picturepark.SDK.V1.AzureBlob
  href: Picturepark.html
  name: Picturepark.SDK.V1.AzureBlob
  nameWithType: Picturepark.SDK.V1.AzureBlob
  fullName: Picturepark.SDK.V1.AzureBlob
  spec.csharp:
  - uid: Picturepark
    name: Picturepark
    href: Picturepark.html
  - name: .
  - uid: Picturepark.SDK
    name: SDK
    href: Picturepark.SDK.html
  - name: .
  - uid: Picturepark.SDK.V1
    name: V1
    href: Picturepark.SDK.V1.html
  - name: .
  - uid: Picturepark.SDK.V1.AzureBlob
    name: AzureBlob
    href: Picturepark.SDK.V1.AzureBlob.html
  spec.vb:
  - uid: Picturepark
    name: Picturepark
    href: Picturepark.html
  - name: .
  - uid: Picturepark.SDK
    name: SDK
    href: Picturepark.SDK.html
  - name: .
  - uid: Picturepark.SDK.V1
    name: V1
    href: Picturepark.SDK.V1.html
  - name: .
  - uid: Picturepark.SDK.V1.AzureBlob
    name: AzureBlob
    href: Picturepark.SDK.V1.AzureBlob.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Picturepark.SDK.V1.Contract
  commentId: N:Picturepark.SDK.V1.Contract
  href: Picturepark.html
  name: Picturepark.SDK.V1.Contract
  nameWithType: Picturepark.SDK.V1.Contract
  fullName: Picturepark.SDK.V1.Contract
  spec.csharp:
  - uid: Picturepark
    name: Picturepark
    href: Picturepark.html
  - name: .
  - uid: Picturepark.SDK
    name: SDK
    href: Picturepark.SDK.html
  - name: .
  - uid: Picturepark.SDK.V1
    name: V1
    href: Picturepark.SDK.V1.html
  - name: .
  - uid: Picturepark.SDK.V1.Contract
    name: Contract
    href: Picturepark.SDK.V1.Contract.html
  spec.vb:
  - uid: Picturepark
    name: Picturepark
    href: Picturepark.html
  - name: .
  - uid: Picturepark.SDK
    name: SDK
    href: Picturepark.SDK.html
  - name: .
  - uid: Picturepark.SDK.V1
    name: V1
    href: Picturepark.SDK.V1.html
  - name: .
  - uid: Picturepark.SDK.V1.Contract
    name: Contract
    href: Picturepark.SDK.V1.Contract.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync*
  commentId: Overload:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync
  href: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.html#Picturepark_SDK_V1_AzureBlob_IngestClientExtensions_UploadAndImportFilesAsync_Picturepark_SDK_V1_Contract_IIngestClient_System_Collections_Generic_IEnumerable_System_String__Picturepark_SDK_V1_Contract_FileImportRequest_Picturepark_SDK_V1_AzureBlob_IngestUploadOptions_Picturepark_SDK_V1_Contract_ImportOptions_System_Nullable_System_TimeSpan__System_Boolean_System_Threading_CancellationToken_
  name: UploadAndImportFilesAsync
  nameWithType: IngestClientExtensions.UploadAndImportFilesAsync
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadAndImportFilesAsync
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Picturepark.SDK.V1.Contract.FileImportRequest
  commentId: T:Picturepark.SDK.V1.Contract.FileImportRequest
  parent: Picturepark.SDK.V1.Contract
  href: Picturepark.SDK.V1.Contract.FileImportRequest.html
  name: FileImportRequest
  nameWithType: FileImportRequest
  fullName: Picturepark.SDK.V1.Contract.FileImportRequest
- uid: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
  commentId: T:Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
  parent: Picturepark.SDK.V1.AzureBlob
  href: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions.html
  name: IngestUploadOptions
  nameWithType: IngestUploadOptions
  fullName: Picturepark.SDK.V1.AzureBlob.IngestUploadOptions
- uid: Picturepark.SDK.V1.Contract.ImportOptions
  commentId: T:Picturepark.SDK.V1.Contract.ImportOptions
  parent: Picturepark.SDK.V1.Contract
  href: Picturepark.SDK.V1.Contract.ImportOptions.html
  name: ImportOptions
  nameWithType: ImportOptions
  fullName: Picturepark.SDK.V1.Contract.ImportOptions
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan?
  nameWithType: TimeSpan?
  fullName: System.TimeSpan?
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
  commentId: T:System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ContentBatchOperationWithRequestIdResult>
  nameWithType: Task<ContentBatchOperationWithRequestIdResult>
  fullName: System.Threading.Tasks.Task<Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult>
  nameWithType.vb: Task(Of ContentBatchOperationWithRequestIdResult)
  fullName.vb: System.Threading.Tasks.Task(Of Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult)
  name.vb: Task(Of ContentBatchOperationWithRequestIdResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult
    name: ContentBatchOperationWithRequestIdResult
    href: Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult
    name: ContentBatchOperationWithRequestIdResult
    href: Picturepark.SDK.V1.Contract.Results.ContentBatchOperationWithRequestIdResult.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem}
  commentId: T:System.Collections.Generic.IEnumerable{Picturepark.SDK.V1.AzureBlob.IngestUploadItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IngestUploadItem>
  nameWithType: IEnumerable<IngestUploadItem>
  fullName: System.Collections.Generic.IEnumerable<Picturepark.SDK.V1.AzureBlob.IngestUploadItem>
  nameWithType.vb: IEnumerable(Of IngestUploadItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Picturepark.SDK.V1.AzureBlob.IngestUploadItem)
  name.vb: IEnumerable(Of IngestUploadItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Picturepark.SDK.V1.AzureBlob.IngestUploadItem
    name: IngestUploadItem
    href: Picturepark.SDK.V1.AzureBlob.IngestUploadItem.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.AzureBlob.IngestUploadItem
    name: IngestUploadItem
    href: Picturepark.SDK.V1.AzureBlob.IngestUploadItem.html
  - name: )
- uid: Picturepark.SDK.V1.Contract.IngestFile
  commentId: T:Picturepark.SDK.V1.Contract.IngestFile
  parent: Picturepark.SDK.V1.Contract
  href: Picturepark.SDK.V1.Contract.IngestFile.html
  name: IngestFile
  nameWithType: IngestFile
  fullName: Picturepark.SDK.V1.Contract.IngestFile
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync*
  commentId: Overload:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync
  href: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.html#Picturepark_SDK_V1_AzureBlob_IngestClientExtensions_UploadFilesAsync_Picturepark_SDK_V1_Contract_IIngestClient_System_Collections_Generic_IEnumerable_Picturepark_SDK_V1_AzureBlob_IngestUploadItem__Picturepark_SDK_V1_AzureBlob_IngestUploadOptions_System_Threading_CancellationToken_
  name: UploadFilesAsync
  nameWithType: IngestClientExtensions.UploadFilesAsync
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFilesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<IngestFile>>
  nameWithType: Task<IReadOnlyCollection<IngestFile>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Picturepark.SDK.V1.Contract.IngestFile>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IngestFile))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Picturepark.SDK.V1.Contract.IngestFile))
  name.vb: Task(Of IReadOnlyCollection(Of IngestFile))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: )
  - name: )
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync*
  commentId: Overload:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync
  href: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.html#Picturepark_SDK_V1_AzureBlob_IngestClientExtensions_UploadFileAsync_Picturepark_SDK_V1_Contract_IIngestClient_System_String_System_Threading_CancellationToken_
  name: UploadFileAsync
  nameWithType: IngestClientExtensions.UploadFileAsync
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.UploadFileAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.IngestFile}
  commentId: T:System.Threading.Tasks.Task{Picturepark.SDK.V1.Contract.IngestFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IngestFile>
  nameWithType: Task<IngestFile>
  fullName: System.Threading.Tasks.Task<Picturepark.SDK.V1.Contract.IngestFile>
  nameWithType.vb: Task(Of IngestFile)
  fullName.vb: System.Threading.Tasks.Task(Of Picturepark.SDK.V1.Contract.IngestFile)
  name.vb: Task(Of IngestFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: )
- uid: Picturepark.SDK.V1.AzureBlob.IngestUploadItem
  commentId: T:Picturepark.SDK.V1.AzureBlob.IngestUploadItem
  parent: Picturepark.SDK.V1.AzureBlob
  href: Picturepark.SDK.V1.AzureBlob.IngestUploadItem.html
  name: IngestUploadItem
  nameWithType: IngestUploadItem
  fullName: Picturepark.SDK.V1.AzureBlob.IngestUploadItem
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync*
  commentId: Overload:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync
  href: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.html#Picturepark_SDK_V1_AzureBlob_IngestClientExtensions_ImportFilesAsync_Picturepark_SDK_V1_Contract_IIngestClient_System_Collections_Generic_IReadOnlyCollection_Picturepark_SDK_V1_Contract_IngestFile__Picturepark_SDK_V1_Contract_ImportOptions_Picturepark_SDK_V1_Contract_FileImportRequest_System_Nullable_System_TimeSpan__System_Boolean_System_Threading_CancellationToken_
  name: ImportFilesAsync
  nameWithType: IngestClientExtensions.ImportFilesAsync
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFilesAsync
- uid: System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Picturepark.SDK.V1.Contract.IngestFile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<IngestFile>
  nameWithType: IReadOnlyCollection<IngestFile>
  fullName: System.Collections.Generic.IReadOnlyCollection<Picturepark.SDK.V1.Contract.IngestFile>
  nameWithType.vb: IReadOnlyCollection(Of IngestFile)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Picturepark.SDK.V1.Contract.IngestFile)
  name.vb: IReadOnlyCollection(Of IngestFile)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest}
  commentId: T:System.Collections.Generic.IDictionary{Picturepark.SDK.V1.Contract.IngestFile,Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<IngestFile, FileImportWithFileNameOverrideRequest>
  nameWithType: IDictionary<IngestFile, FileImportWithFileNameOverrideRequest>
  fullName: System.Collections.Generic.IDictionary<Picturepark.SDK.V1.Contract.IngestFile, Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest>
  nameWithType.vb: IDictionary(Of IngestFile, FileImportWithFileNameOverrideRequest)
  fullName.vb: System.Collections.Generic.IDictionary(Of Picturepark.SDK.V1.Contract.IngestFile, Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest)
  name.vb: IDictionary(Of IngestFile, FileImportWithFileNameOverrideRequest)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: ','
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest
    name: FileImportWithFileNameOverrideRequest
    href: Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.IngestFile
    name: IngestFile
    href: Picturepark.SDK.V1.Contract.IngestFile.html
  - name: ','
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest
    name: FileImportWithFileNameOverrideRequest
    href: Picturepark.SDK.V1.Contract.FileImportWithFileNameOverrideRequest.html
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync*
  commentId: Overload:Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync
  href: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.html#Picturepark_SDK_V1_AzureBlob_IngestClientExtensions_ImportFromUrlsAsync_Picturepark_SDK_V1_Contract_IIngestClient_System_Collections_Generic_IDictionary_System_String_Picturepark_SDK_V1_Contract_UrlImportRequest__Picturepark_SDK_V1_Contract_ImportOptions_System_Nullable_System_TimeSpan__System_Boolean_System_Threading_CancellationToken_
  name: ImportFromUrlsAsync
  nameWithType: IngestClientExtensions.ImportFromUrlsAsync
  fullName: Picturepark.SDK.V1.AzureBlob.IngestClientExtensions.ImportFromUrlsAsync
- uid: System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Picturepark.SDK.V1.Contract.UrlImportRequest}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, UrlImportRequest>
  nameWithType: IDictionary<string, UrlImportRequest>
  fullName: System.Collections.Generic.IDictionary<string, Picturepark.SDK.V1.Contract.UrlImportRequest>
  nameWithType.vb: IDictionary(Of String, UrlImportRequest)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Picturepark.SDK.V1.Contract.UrlImportRequest)
  name.vb: IDictionary(Of String, UrlImportRequest)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.UrlImportRequest
    name: UrlImportRequest
    href: Picturepark.SDK.V1.Contract.UrlImportRequest.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Picturepark.SDK.V1.Contract.UrlImportRequest
    name: UrlImportRequest
    href: Picturepark.SDK.V1.Contract.UrlImportRequest.html
  - name: )
