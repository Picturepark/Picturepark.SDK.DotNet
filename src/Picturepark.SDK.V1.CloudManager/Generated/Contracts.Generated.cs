//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Picturepark.SDK.V1.CloudManager.Contract
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBusinessProcessClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcessWaitForLifeCycleResult> WaitForCompletionAsync(string alias, string id, System.TimeSpan? timeout = null, bool? waitForContinuationCompletion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> GetAsync(string alias, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcessSearchResult> SearchAsync(BusinessProcessSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICdnClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> PurgeForCustomerAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICloudBackupClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepository> CreateRepositoryAsync(SnapshotRepositoryCustomerCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotEnqueueResult> CreateSnapshotAsync(SnapshotCustomerCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotEnqueueResult> CreateSnapshotWithSecondaryIndicesAsync(SnapshotCustomerAllClustersRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotCustomerAllClustersResult> GetSnapshotAllClustersAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerExportResult> ExportAsync(CustomerExportRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRestore> RestoreAsync(SnapshotCustomerRestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<RestoreSnapshotIndices> RestoreIndicesAsync(RestoreSnapshotIndicesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotCustomerCloneRequest> CloneRequestAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<Customer> CloneAsync(SnapshotCustomerCloneRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<Customer> ImportAsync(CustomerImportRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<Customer> ImportAllClustersAsync(CustomerImportAllClustersRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepository> CreateRepository2Async(SnapshotRepositoryEnvironmentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotEnqueueResult> CreateSnapshot2Async(SnapshotEnvironmentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotEnvironmentSearchResult> SearchAsync(SnapshotEnvironmentSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotCustomerSearchResult> SearchSnapshotsAsync(SnapshotCustomerSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepositorySearchResult> SearchRepositoriesAsync(SnapshotRepositoryCustomerSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepositorySearchResult> SearchEnvironmentRepositoriesAsync(SnapshotRepositoryEnvironmentSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepositoryCleanupResult> CleanupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepository> ArchiveAsync(SnapshotRepositoryArchiveRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepository> SetExternalMetadataAsync(SnapshotRepositoryMetadataUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<SnapshotRepository> Search2Async(SnapshotRepositorySearchByNameRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<GlobalSnapshotRepositoryStateResult> GetGlobalRepositoryStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerAssetClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteLogoAsync(string customerId, LogoKind type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteWatermarkAsync(string customerId, string fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerCreateRequest> GetCreateRequestAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerConfiguration> CreateAsync(CustomerCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerConfiguration> UpdateAsync(CustomerUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerConfiguration> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteWithOptionsAsync(string id, CustomerDeleteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> SearchAsync(CustomerSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserWithRoles>> GetUsersAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task RestoreAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task InvalidateAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<Index> ReindexAsync(string alias, SearchIndexReindexShardsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetAvailableMetadataLanguagesAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcess> AddMetadataLanguageAsync(string alias, CustomerMetadataLanguageCreateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcess> UpdateBoostValuesAsync(string alias, CustomerBoostValuesUpdateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Index>> GetIndicesAsync(string alias, bool onlyForReshard, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcess> ReshardElasticIndicesAsync(string alias, CustomerReshardRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> ChangeStorageSiloAsync(string alias, ChangeStorageSiloRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ClearCacheSiloAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerHostConfiguration> GetHostConfigurationAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerHostConfigurationEditable> UpdateHostConfigurationAsync(string alias, CustomerHostConfigurationWriteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<UserWithRoles> SetAnonymousAccessAsync(string alias, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerOperationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PendingOperationItem>> GetPendingOperationsAsync(string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerQueuePriorityClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerQueuePriorityConfiguration> GetEffectiveAsync(string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerQueuePriorityConfiguration> GetCustomAsync(string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<QueuePriorityConfiguration> GetEffectiveForQueueAsync(string customerId, string queueFamily, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<QueuePriorityConfiguration> GetCustomForQueueAsync(string customerId, string queueFamily, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerQueuePriorityConfiguration> UpdateAsync(string customerId, CustomerQueuePriorityConfiguration updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ResetAllQueueConfigurationsAsync(string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerQueuePriorityConfiguration> UpdateForQueueAsync(string customerId, string queueFamily, QueuePriorityConfiguration updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerQueuePriorityConfiguration> ResetQueueAsync(string customerId, string queueFamily, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerServiceProviderClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerServiceProvider> CreateAsync(CustomerServiceProviderCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteAsync(string alias, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerSettingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerSettings> GetAsync(string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerSettings> UpdateAsync(string customerId, CustomerSettingsUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEnvironmentClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentConfiguration> CreateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEnvironmentProcessClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task CancelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task AcknowledgeAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcess> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcessWaitResult> WaitForLifeCyclesAsync(string id, System.Collections.Generic.IEnumerable<EnvironmentProcessLifeCycle> lifeCycles = null, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcessSearchResult> SearchAsync(EnvironmentProcessSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IGlobalConfigurationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentConfiguration> CreateGlobalConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<FileResponse> GetConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMaintenanceClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> TouchSchemasAsync(string id, TouchSchemasRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resets retry attempt counters.
        /// </summary>
        /// <remarks>
        /// Resets retry attempt counters on failed (optionally also completed) outputs and they will be subsequently picked up for re-rendering.
        /// <br/>The number the counters are reset to is determined by a global configuration value.
        /// </remarks>
        /// <param name="id">CustomerId</param>
        /// <param name="request">Request containing options to filter which outputs should be reset.</param>
        /// <param name="timeout">Timeout to wait for completion, operation will continue regardless.</param>
        /// <returns>Business process tracking the resetting</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> ResetRetryAttemptsAsync(string id, OutputResetRetryAttemptsRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> RecalculateFileInformationAsync(string id, RecalculateFileInformationRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateOutdatedMetadataAsync(string id, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task MarkAllDisplayPatternsForRerenderingAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateRelatedItemsAsync(string id, CreateRelatedItemsByQueryRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> AddStatisticsEventsAsync(string id, AddContentEventsRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ApplySlowLogSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOutputFormatClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<StaticOutputFormatDetail> GetAsync(string customerId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateAsync(string customerId, string id, StaticOutputFormatEditable format, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteAsync(string customerId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(string customerId, StaticOutputFormat format, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IServiceClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ShutdownAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task RestartAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ShutdownAsync(string serviceName, string nodeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task RestartAsync(string serviceName, string nodeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task SetLogLevelAsync(SetServiceLogLevelRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task EnableLoggingDiagnosticsAsync(bool? enable = null, string serviceName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task PingActiveNodesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NodeInfo>> GetActiveNodesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeleteNodeInfosAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DumpCachesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task InvalidateAllCachesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task RecycleElasticClientsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUpdateClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<UpdateInfo> GetAvailableEnvironmentUpdateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<VersionInfo> GetEnvironmentVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ReactivateEnvironmentAsync(ReactivationEnvironmentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeactivateEnvironmentAsync(DeactivationEnvironmentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<EnvironmentProcess> UpdateEnvironmentAsync(UpdateEnvironmentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<UpdateInfo> GetAvailableCustomerUpdateAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerVersionInfo>> GetCustomerVersionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<CustomerVersionInfo> GetCustomerVersionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task DeactivateCustomersAsync(System.Collections.Generic.IEnumerable<DeactivationCustomerRequest> requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task ReactivateCustomersAsync(System.Collections.Generic.IEnumerable<ReactivationCustomerRequest> requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnvironmentProcess>> UpdateCustomersAsync(System.Collections.Generic.IEnumerable<UpdateCustomerRequest> requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<bool> GetUserDeveloperFlagAsync(string alias, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<bool> UpdateUserDeveloperFlagAsync(string alias, UserDeveloperFlagUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<UserWithRoles> GetAnonymousUserAsync(string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkException">Entity not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> FindByExternalIdsAsync(System.Collections.Generic.IEnumerable<string> externalIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    /// <summary>
    /// Result from waiting for life cycle(s) on a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessWaitForLifeCycleResult
    {
        /// <summary>
        /// The life cycle that was hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle? LifeCycleHit { get; set; }

        /// <summary>
        /// The business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BusinessProcess BusinessProcess { get; set; } = new BusinessProcess();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessWaitForLifeCycleResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitForLifeCycleResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Life cycle of the business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessProcessLifeCycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInProgress")]
        CancellationInProgress = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SucceededWithErrors")]
        SucceededWithErrors = 6,

    }

    /// <summary>
    /// Business process
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetails", typeof(BusinessProcessDetails))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcess
    {
        /// <summary>
        /// ID of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// ID of the business process definition associated to the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// ID of the document that is modified by the running of the business process. Used during the cancellation of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Type of the document that is modified by the running of the business process. Used during the cancellation of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceDocType { get; set; }

        /// <summary>
        /// True if the business process execution can be cancelled. False otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportsCancellation", Required = Newtonsoft.Json.Required.Always)]
        public bool SupportsCancellation { get; set; }

        /// <summary>
        /// Scope of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcessScope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessScope BusinessProcessScope { get; set; }

        /// <summary>
        /// Current life cycle of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// When the business process started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// When the business process finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndDate { get; set; }

        /// <summary>
        /// Is the business process finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Always)]
        public bool Finished { get; set; }

        /// <summary>
        /// List containing the history of all the state transitions of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessProcessState> StateHistory { get; set; }

        /// <summary>
        /// Current state of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Timestamp when the business process last reported progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastReportedProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastReportedProgress { get; set; }

        /// <summary>
        /// Id of the business process that will be automatically started after the completion of the current one, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("continuationBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationBusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Scope of the business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessProcessScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 1,

    }

    /// <summary>
    /// State transition information of a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessState
    {
        /// <summary>
        /// State of the business process
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string State { get; set; }

        /// <summary>
        /// Date and time of when the state transition was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Eventual error associated to the state transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error information with serialized exception
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {
        /// <summary>
        /// Serialized PictureparkBusinessException.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }

        /// <summary>
        /// Trace ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }

        /// <summary>
        /// Trace job ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detailed representation of a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetails : BusinessProcess
    {
        /// <summary>
        /// Details for the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessDetailsDataBase Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for the details of a business process
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataBatchResponse", typeof(BusinessProcessDetailsDataBatchResponse))]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataSchemaImport", typeof(BusinessProcessDetailsDataSchemaImport))]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataContentImport", typeof(BusinessProcessDetailsDataContentImport))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessProcessDetailsDataBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business process detailed information regarding a batch operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataBatchResponse : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// The DocType on which the operation was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DocType { get; set; }

        /// <summary>
        /// The response of the batch operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BatchResponse Response { get; set; } = new BatchResponse();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataBatchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBatchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response from a batch operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchResponse
    {
        /// <summary>
        /// Rows in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BatchResponseRow> Rows { get; set; } = new System.Collections.Generic.List<BatchResponseRow>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Row in a batch operation response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchResponseRow
    {
        /// <summary>
        /// Id of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the operation succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }

        /// <summary>
        /// Status code of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// New version of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }

        /// <summary>
        /// If the operation did not succeed, this contains error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatchResponseRow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchResponseRow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business process detailed information regarding Schema / ListItems import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataSchemaImport : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// Result information of a schema import operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaImportResult SchemaImportResult { get; set; }

        /// <summary>
        /// Result information of a list item import operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemImportResult ListItemImportResult { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataSchemaImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataSchemaImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result information of a schema import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaImportResult
    {
        /// <summary>
        /// Number of schemas imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedSchemaCount { get; set; }

        /// <summary>
        /// Number of schema skipped during import phase because they were already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedSchemaCount { get; set; }

        /// <summary>
        /// Total number of schemas requested to be imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSchemaCount { get; set; }

        /// <summary>
        /// Ids of the schemas that were not imported because already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedSchemaIds { get; set; }

        /// <summary>
        /// Ids of the schemas that were successfully imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result information of a list item import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemImportResult
    {
        /// <summary>
        /// Number of list items imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedListItemCount { get; set; }

        /// <summary>
        /// Number of list items skipped during import phase because they were already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedListItemCount { get; set; }

        /// <summary>
        /// Total number of list items requested to be imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalListItemCount { get; set; }

        /// <summary>
        /// Ids of the list items that were not imported because already found in the system or due to errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedListItemIds { get; set; }

        /// <summary>
        /// Ids of the list items that were successfully imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataContentImport : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// Items that were imported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentImportResult> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataContentImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataContentImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an item imported during a content import
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentImportResult
    {
        /// <summary>
        /// ID of the file transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileTransferId { get; set; }

        /// <summary>
        /// ID of the resulting content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// State of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Indicates if the operation succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }

        /// <summary>
        /// If the operation did not succeeded, this contains error related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkValidationException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkBusinessException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkBusinessException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkBusinessException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("PictureparkValidationException", typeof(PictureparkValidationException))]
    [JsonInheritanceAttribute("PictureparkBusinessException", typeof(PictureparkBusinessException))]
    [JsonInheritanceAttribute("ServiceProviderDeleteException", typeof(ServiceProviderDeleteException))]
    [JsonInheritanceAttribute("ServiceProviderCreateException", typeof(ServiceProviderCreateException))]
    [JsonInheritanceAttribute("ServiceProviderNotFoundException", typeof(ServiceProviderNotFoundException))]
    [JsonInheritanceAttribute("ElasticVersionUpdateException", typeof(ElasticVersionUpdateException))]
    [JsonInheritanceAttribute("InvalidVersionException", typeof(InvalidVersionException))]
    [JsonInheritanceAttribute("EnvironmentNotDeactivatedException", typeof(EnvironmentNotDeactivatedException))]
    [JsonInheritanceAttribute("EnvironmentNotFoundException", typeof(EnvironmentNotFoundException))]
    [JsonInheritanceAttribute("EnvironmentDeactivationException", typeof(EnvironmentDeactivationException))]
    [JsonInheritanceAttribute("CustomerViolationException", typeof(CustomerViolationException))]
    [JsonInheritanceAttribute("CustomerAliasNotFoundException", typeof(CustomerAliasNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotDeactivatedException", typeof(CustomerNotDeactivatedException))]
    [JsonInheritanceAttribute("CustomerDeactivationException", typeof(CustomerDeactivationException))]
    [JsonInheritanceAttribute("CustomerHostNotFoundException", typeof(CustomerHostNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotFoundException", typeof(CustomerNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotActiveException", typeof(CustomerNotActiveException))]
    [JsonInheritanceAttribute("ConfigurationIndexNotFoundException", typeof(ConfigurationIndexNotFoundException))]
    [JsonInheritanceAttribute("DuplicateAliasException", typeof(DuplicateAliasException))]
    [JsonInheritanceAttribute("RedisDatabaseExceededException", typeof(RedisDatabaseExceededException))]
    [JsonInheritanceAttribute("MaximumTransferSizeException", typeof(MaximumTransferSizeException))]
    [JsonInheritanceAttribute("EnvironmentNotAvailableException", typeof(EnvironmentNotAvailableException))]
    [JsonInheritanceAttribute("CustomerNotAvailableException", typeof(CustomerNotAvailableException))]
    [JsonInheritanceAttribute("PictureparkForbiddenException", typeof(PictureparkForbiddenException))]
    [JsonInheritanceAttribute("PictureparkConflictException", typeof(PictureparkConflictException))]
    [JsonInheritanceAttribute("PictureparkTooManyRequestsException", typeof(PictureparkTooManyRequestsException))]
    [JsonInheritanceAttribute("PictureparkNotFoundException", typeof(PictureparkNotFoundException))]
    [JsonInheritanceAttribute("PictureparkTimeoutException", typeof(PictureparkTimeoutException))]
    [JsonInheritanceAttribute("PictureparkContradictoryArgumentsException", typeof(PictureparkContradictoryArgumentsException))]
    [JsonInheritanceAttribute("UserEmailAlreadyExistsException", typeof(UserEmailAlreadyExistsException))]
    [JsonInheritanceAttribute("UserRoleAssignedException", typeof(UserRoleAssignedException))]
    [JsonInheritanceAttribute("UnableToDeleteUserRoleException", typeof(UnableToDeleteUserRoleException))]
    [JsonInheritanceAttribute("UserNotFoundException", typeof(UserNotFoundException))]
    [JsonInheritanceAttribute("UserNotDeactivatedException", typeof(UserNotDeactivatedException))]
    [JsonInheritanceAttribute("UserWithOwnerTokensArchiveException", typeof(UserWithOwnerTokensArchiveException))]
    [JsonInheritanceAttribute("UserInactiveOrDeletedException", typeof(UserInactiveOrDeletedException))]
    [JsonInheritanceAttribute("InactiveOrDeletedUserRefusedAccessException", typeof(InactiveOrDeletedUserRefusedAccessException))]
    [JsonInheritanceAttribute("TermsOfServiceNotNewestException", typeof(TermsOfServiceNotNewestException))]
    [JsonInheritanceAttribute("IllegalAuthorizationStateTransitionException", typeof(IllegalAuthorizationStateTransitionException))]
    [JsonInheritanceAttribute("TermsOfServiceConsentRequiredException", typeof(TermsOfServiceConsentRequiredException))]
    [JsonInheritanceAttribute("UserRolesNotFoundException", typeof(UserRolesNotFoundException))]
    [JsonInheritanceAttribute("UnauthorizedException", typeof(UnauthorizedException))]
    [JsonInheritanceAttribute("UserUnlockDisallowedException", typeof(UserUnlockDisallowedException))]
    [JsonInheritanceAttribute("UserAlreadyInRequestedLockStateException", typeof(UserAlreadyInRequestedLockStateException))]
    [JsonInheritanceAttribute("LoginUsingIncorrectIdentityProviderException", typeof(LoginUsingIncorrectIdentityProviderException))]
    [JsonInheritanceAttribute("IdentityProviderNotFoundException", typeof(IdentityProviderNotFoundException))]
    [JsonInheritanceAttribute("UserDoesNotSupportLocalLoginException", typeof(UserDoesNotSupportLocalLoginException))]
    [JsonInheritanceAttribute("UserAttributeNotSynchronizableException", typeof(UserAttributeNotSynchronizableException))]
    [JsonInheritanceAttribute("UnableToMapMultipleClaimTypesIntoSameAttributeException", typeof(UnableToMapMultipleClaimTypesIntoSameAttributeException))]
    [JsonInheritanceAttribute("UnableToChangeMappedUserRolesForFederatedUserException", typeof(UnableToChangeMappedUserRolesForFederatedUserException))]
    [JsonInheritanceAttribute("UnableToDeleteDefaultUserRoleException", typeof(UnableToDeleteDefaultUserRoleException))]
    [JsonInheritanceAttribute("UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException", typeof(UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException))]
    [JsonInheritanceAttribute("UserPropertyChangeNotSupportedException", typeof(UserPropertyChangeNotSupportedException))]
    [JsonInheritanceAttribute("UserNotLinkedWithIdsException", typeof(UserNotLinkedWithIdsException))]
    [JsonInheritanceAttribute("LanguageCodeNotExistingException", typeof(LanguageCodeNotExistingException))]
    [JsonInheritanceAttribute("UserByOwnerTokenNotFoundException", typeof(UserByOwnerTokenNotFoundException))]
    [JsonInheritanceAttribute("InvalidOperationWithAnonymousUserException", typeof(InvalidOperationWithAnonymousUserException))]
    [JsonInheritanceAttribute("InvalidOperationWithAnonymousUserRoleException", typeof(InvalidOperationWithAnonymousUserRoleException))]
    [JsonInheritanceAttribute("RenderingException", typeof(RenderingException))]
    [JsonInheritanceAttribute("FormatNotApplicableForRenderingException", typeof(FormatNotApplicableForRenderingException))]
    [JsonInheritanceAttribute("FocalPointCropSizeMissingException", typeof(FocalPointCropSizeMissingException))]
    [JsonInheritanceAttribute("DocumentVersionNotFoundException", typeof(DocumentVersionNotFoundException))]
    [JsonInheritanceAttribute("DefaultChannelDeleteException", typeof(DefaultChannelDeleteException))]
    [JsonInheritanceAttribute("ChannelsNotFoundException", typeof(ChannelsNotFoundException))]
    [JsonInheritanceAttribute("SuperAdminRolesNotAssignableToChannelException", typeof(SuperAdminRolesNotAssignableToChannelException))]
    [JsonInheritanceAttribute("CustomerClonesNotAcceptedException", typeof(CustomerClonesNotAcceptedException))]
    [JsonInheritanceAttribute("ShareOutputNotFoundException", typeof(ShareOutputNotFoundException))]
    [JsonInheritanceAttribute("ShareNotFoundException", typeof(ShareNotFoundException))]
    [JsonInheritanceAttribute("ShareByTokenNotFoundException", typeof(ShareByTokenNotFoundException))]
    [JsonInheritanceAttribute("TokenGenerationException", typeof(TokenGenerationException))]
    [JsonInheritanceAttribute("ShareExpiredException", typeof(ShareExpiredException))]
    [JsonInheritanceAttribute("ShareSizeLimitExceededException", typeof(ShareSizeLimitExceededException))]
    [JsonInheritanceAttribute("DuplicateSharedOutputException", typeof(DuplicateSharedOutputException))]
    [JsonInheritanceAttribute("DuplicateEmbedConversionPresetException", typeof(DuplicateEmbedConversionPresetException))]
    [JsonInheritanceAttribute("OutputIdNotFoundException", typeof(OutputIdNotFoundException))]
    [JsonInheritanceAttribute("OutputNotFoundException", typeof(OutputNotFoundException))]
    [JsonInheritanceAttribute("UnableToCreateOrModifyStaticOutputFormatException", typeof(UnableToCreateOrModifyStaticOutputFormatException))]
    [JsonInheritanceAttribute("NotSupportedFileMappingException", typeof(NotSupportedFileMappingException))]
    [JsonInheritanceAttribute("NotSupportedFileMappingForDynamicFormatException", typeof(NotSupportedFileMappingForDynamicFormatException))]
    [JsonInheritanceAttribute("NotSupportedFileExtensionException", typeof(NotSupportedFileExtensionException))]
    [JsonInheritanceAttribute("DuplicateOutputFormatIdException", typeof(DuplicateOutputFormatIdException))]
    [JsonInheritanceAttribute("OutputEditingNotSupportedException", typeof(OutputEditingNotSupportedException))]
    [JsonInheritanceAttribute("OutputBackupNotRequestedException", typeof(OutputBackupNotRequestedException))]
    [JsonInheritanceAttribute("OutputBackupHashMismatchException", typeof(OutputBackupHashMismatchException))]
    [JsonInheritanceAttribute("OutputOperationInProgressException", typeof(OutputOperationInProgressException))]
    [JsonInheritanceAttribute("DownloadLinkExpiredException", typeof(DownloadLinkExpiredException))]
    [JsonInheritanceAttribute("RenderingNotAwaitedException", typeof(RenderingNotAwaitedException))]
    [JsonInheritanceAttribute("DuplicateContentDownloadRequestException", typeof(DuplicateContentDownloadRequestException))]
    [JsonInheritanceAttribute("InvalidContentDownloadRequestException", typeof(InvalidContentDownloadRequestException))]
    [JsonInheritanceAttribute("DownloadNotFoundException", typeof(DownloadNotFoundException))]
    [JsonInheritanceAttribute("EmbedMultiDownloadException", typeof(EmbedMultiDownloadException))]
    [JsonInheritanceAttribute("ImageOptimizationLicensingException", typeof(ImageOptimizationLicensingException))]
    [JsonInheritanceAttribute("LeaseNotAcquiredException", typeof(LeaseNotAcquiredException))]
    [JsonInheritanceAttribute("OperationInProgressException", typeof(OperationInProgressException))]
    [JsonInheritanceAttribute("OwnerTokenNotFoundException", typeof(OwnerTokenNotFoundException))]
    [JsonInheritanceAttribute("InvalidStateException", typeof(InvalidStateException))]
    [JsonInheritanceAttribute("PictureparkArgumentNullException", typeof(PictureparkArgumentNullException))]
    [JsonInheritanceAttribute("ObjectTypeMismatchException", typeof(ObjectTypeMismatchException))]
    [JsonInheritanceAttribute("InvalidStateTransitionException", typeof(InvalidStateTransitionException))]
    [JsonInheritanceAttribute("FailedToLockException", typeof(FailedToLockException))]
    [JsonInheritanceAttribute("PictureparkOperationCanceledException", typeof(PictureparkOperationCanceledException))]
    [JsonInheritanceAttribute("PictureparkApplicationException", typeof(PictureparkApplicationException))]
    [JsonInheritanceAttribute("MissingCustomerDefaultLanguageException", typeof(MissingCustomerDefaultLanguageException))]
    [JsonInheritanceAttribute("PartialOperationNotSupportedException", typeof(PartialOperationNotSupportedException))]
    [JsonInheritanceAttribute("ContractMismatchException", typeof(ContractMismatchException))]
    [JsonInheritanceAttribute("InvalidArgumentException", typeof(InvalidArgumentException))]
    [JsonInheritanceAttribute("UnknownException", typeof(UnknownException))]
    [JsonInheritanceAttribute("OwnerTokenInUseException", typeof(OwnerTokenInUseException))]
    [JsonInheritanceAttribute("InvalidValueFormatException", typeof(InvalidValueFormatException))]
    [JsonInheritanceAttribute("ItemIdDuplicatedException", typeof(ItemIdDuplicatedException))]
    [JsonInheritanceAttribute("RequestSizeLimitExceededException", typeof(RequestSizeLimitExceededException))]
    [JsonInheritanceAttribute("CronExpressionInvalidException", typeof(CronExpressionInvalidException))]
    [JsonInheritanceAttribute("FeatureNotEnabledException", typeof(FeatureNotEnabledException))]
    [JsonInheritanceAttribute("CustomerAliasInUseException", typeof(CustomerAliasInUseException))]
    [JsonInheritanceAttribute("CustomerBoostValuesInvalidException", typeof(CustomerBoostValuesInvalidException))]
    [JsonInheritanceAttribute("SnapshotRetentionTimeTooShortException", typeof(SnapshotRetentionTimeTooShortException))]
    [JsonInheritanceAttribute("ReshardIndexNotAllowedException", typeof(ReshardIndexNotAllowedException))]
    [JsonInheritanceAttribute("ReshardNumberOfShardsInvalidException", typeof(ReshardNumberOfShardsInvalidException))]
    [JsonInheritanceAttribute("ReshardNumberOfRoutingShardsInvalidException", typeof(ReshardNumberOfRoutingShardsInvalidException))]
    [JsonInheritanceAttribute("ReshardNumberOfShardsInvalidForExistingRoutingShardsException", typeof(ReshardNumberOfShardsInvalidForExistingRoutingShardsException))]
    [JsonInheritanceAttribute("DuplicateSearchIndexDocException", typeof(DuplicateSearchIndexDocException))]
    [JsonInheritanceAttribute("SearchIndexDocNotFoundException", typeof(SearchIndexDocNotFoundException))]
    [JsonInheritanceAttribute("IndexDocumentNotFoundException", typeof(IndexDocumentNotFoundException))]
    [JsonInheritanceAttribute("SearchIndexNotFoundException", typeof(SearchIndexNotFoundException))]
    [JsonInheritanceAttribute("DefaultSearchIndexDeleteException", typeof(DefaultSearchIndexDeleteException))]
    [JsonInheritanceAttribute("SearchIndexInUseException", typeof(SearchIndexInUseException))]
    [JsonInheritanceAttribute("IndexException", typeof(IndexException))]
    [JsonInheritanceAttribute("IndexMappingException", typeof(IndexMappingException))]
    [JsonInheritanceAttribute("DuplicatedSearchBehaviorException", typeof(DuplicatedSearchBehaviorException))]
    [JsonInheritanceAttribute("SearchStringLeadingWildcardException", typeof(SearchStringLeadingWildcardException))]
    [JsonInheritanceAttribute("DuplicateAggregatorException", typeof(DuplicateAggregatorException))]
    [JsonInheritanceAttribute("InvalidDateTimeFormatException", typeof(InvalidDateTimeFormatException))]
    [JsonInheritanceAttribute("InvalidSortFieldException", typeof(InvalidSortFieldException))]
    [JsonInheritanceAttribute("InvalidUiBehaviorInNonRootAggregatorException", typeof(InvalidUiBehaviorInNonRootAggregatorException))]
    [JsonInheritanceAttribute("InvalidUiBehaviorConfigurationException", typeof(InvalidUiBehaviorConfigurationException))]
    [JsonInheritanceAttribute("InvalidSearchFieldInAggregatorException", typeof(InvalidSearchFieldInAggregatorException))]
    [JsonInheritanceAttribute("SearchStringTooLongException", typeof(SearchStringTooLongException))]
    [JsonInheritanceAttribute("AggregationNameInvalidException", typeof(AggregationNameInvalidException))]
    [JsonInheritanceAttribute("AggregationNameMissingException", typeof(AggregationNameMissingException))]
    [JsonInheritanceAttribute("AggregationSizeInvalidException", typeof(AggregationSizeInvalidException))]
    [JsonInheritanceAttribute("AggregationFilterNotSupportedException", typeof(AggregationFilterNotSupportedException))]
    [JsonInheritanceAttribute("AggregationFieldMissingException", typeof(AggregationFieldMissingException))]
    [JsonInheritanceAttribute("AggregationPathMissingException", typeof(AggregationPathMissingException))]
    [JsonInheritanceAttribute("DocumentVersionConflictException", typeof(DocumentVersionConflictException))]
    [JsonInheritanceAttribute("DuplicateDocumentException", typeof(DuplicateDocumentException))]
    [JsonInheritanceAttribute("ObjectStoreResponseException", typeof(ObjectStoreResponseException))]
    [JsonInheritanceAttribute("ObjectStoreException", typeof(ObjectStoreException))]
    [JsonInheritanceAttribute("QueryException", typeof(QueryException))]
    [JsonInheritanceAttribute("PermissionOwnershipTransferException", typeof(PermissionOwnershipTransferException))]
    [JsonInheritanceAttribute("PermissionSetNotFoundException", typeof(PermissionSetNotFoundException))]
    [JsonInheritanceAttribute("PermissionSetAggregateException", typeof(PermissionSetAggregateException))]
    [JsonInheritanceAttribute("DuplicateRightException", typeof(DuplicateRightException))]
    [JsonInheritanceAttribute("PermissionValidationException", typeof(PermissionValidationException))]
    [JsonInheritanceAttribute("PermissionSetInUseException", typeof(PermissionSetInUseException))]
    [JsonInheritanceAttribute("ContentPermissionException", typeof(ContentPermissionException))]
    [JsonInheritanceAttribute("ListItemPermissionException", typeof(ListItemPermissionException))]
    [JsonInheritanceAttribute("SchemaPermissionException", typeof(SchemaPermissionException))]
    [JsonInheritanceAttribute("PermissionSetInvalidRightCombinationException", typeof(PermissionSetInvalidRightCombinationException))]
    [JsonInheritanceAttribute("PermissionSetValidationException", typeof(PermissionSetValidationException))]
    [JsonInheritanceAttribute("AmbiguousUserRoleRightsException", typeof(AmbiguousUserRoleRightsException))]
    [JsonInheritanceAttribute("UnsupportedListItemChangeCommandException", typeof(UnsupportedListItemChangeCommandException))]
    [JsonInheritanceAttribute("ListItemLayerException", typeof(ListItemLayerException))]
    [JsonInheritanceAttribute("ListItemNotFoundException", typeof(ListItemNotFoundException))]
    [JsonInheritanceAttribute("ListItemCyclicDependencyException", typeof(ListItemCyclicDependencyException))]
    [JsonInheritanceAttribute("DeleteListItemsWithReferencesException", typeof(DeleteListItemsWithReferencesException))]
    [JsonInheritanceAttribute("ListItemUpdateManyException", typeof(ListItemUpdateManyException))]
    [JsonInheritanceAttribute("ListItemSchemaMismatchException", typeof(ListItemSchemaMismatchException))]
    [JsonInheritanceAttribute("ListItemResolveBehaviorNotSupportedException", typeof(ListItemResolveBehaviorNotSupportedException))]
    [JsonInheritanceAttribute("InvalidLogoFileExtensionException", typeof(InvalidLogoFileExtensionException))]
    [JsonInheritanceAttribute("TransferInfoNotFoundException", typeof(TransferInfoNotFoundException))]
    [JsonInheritanceAttribute("FileTransferNotFoundException", typeof(FileTransferNotFoundException))]
    [JsonInheritanceAttribute("InvalidTransferTypeException", typeof(InvalidTransferTypeException))]
    [JsonInheritanceAttribute("TransferNotFoundException", typeof(TransferNotFoundException))]
    [JsonInheritanceAttribute("WrongChunkSizeException", typeof(WrongChunkSizeException))]
    [JsonInheritanceAttribute("ChunkSizeOutOfRangeException", typeof(ChunkSizeOutOfRangeException))]
    [JsonInheritanceAttribute("FileIdDuplicatedException", typeof(FileIdDuplicatedException))]
    [JsonInheritanceAttribute("UploadFailedException", typeof(UploadFailedException))]
    [JsonInheritanceAttribute("MaximumNumberOfChunksExceededException", typeof(MaximumNumberOfChunksExceededException))]
    [JsonInheritanceAttribute("MaximumFileSizeExceededException", typeof(MaximumFileSizeExceededException))]
    [JsonInheritanceAttribute("MissingDependenciesException", typeof(MissingDependenciesException))]
    [JsonInheritanceAttribute("RelationSelfReferencingException", typeof(RelationSelfReferencingException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldTypeInvalidException", typeof(InvalidChangeCommandFieldTypeInvalidException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldNotFoundException", typeof(InvalidChangeCommandFieldNotFoundException))]
    [JsonInheritanceAttribute("InvalidChangeCommandSchemaChangeInvalidException", typeof(InvalidChangeCommandSchemaChangeInvalidException))]
    [JsonInheritanceAttribute("InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException", typeof(InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException))]
    [JsonInheritanceAttribute("InvalidMetadataException", typeof(InvalidMetadataException))]
    [JsonInheritanceAttribute("RelationNotFoundException", typeof(RelationNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeNotFoundException", typeof(RelationTypeNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeTargetDocTypeMismatchException", typeof(RelationTypeTargetDocTypeMismatchException))]
    [JsonInheritanceAttribute("RelationTypeMissingException", typeof(RelationTypeMissingException))]
    [JsonInheritanceAttribute("ReferencesUpdateException", typeof(ReferencesUpdateException))]
    [JsonInheritanceAttribute("ReferenceUpdateException", typeof(ReferenceUpdateException))]
    [JsonInheritanceAttribute("DuplicatedItemAssignedException", typeof(DuplicatedItemAssignedException))]
    [JsonInheritanceAttribute("InvalidDataTypeException", typeof(InvalidDataTypeException))]
    [JsonInheritanceAttribute("LayerAssignmentInvalidException", typeof(LayerAssignmentInvalidException))]
    [JsonInheritanceAttribute("OutdatedMetadataUpdateInProgressException", typeof(OutdatedMetadataUpdateInProgressException))]
    [JsonInheritanceAttribute("SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException", typeof(SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException))]
    [JsonInheritanceAttribute("SchemasMetadataProtectionException", typeof(SchemasMetadataProtectionException))]
    [JsonInheritanceAttribute("FilterTemplateRenderingException", typeof(FilterTemplateRenderingException))]
    [JsonInheritanceAttribute("ResolvedLinkedItemsThresholdReachedException", typeof(ResolvedLinkedItemsThresholdReachedException))]
    [JsonInheritanceAttribute("TreeAggregatorOnlyAllowedInTopLevelAggregationsException", typeof(TreeAggregatorOnlyAllowedInTopLevelAggregationsException))]
    [JsonInheritanceAttribute("TreeAggregatorInvalidFieldTypeException", typeof(TreeAggregatorInvalidFieldTypeException))]
    [JsonInheritanceAttribute("TreeAggregatorInnerAggregationsNotAllowedException", typeof(TreeAggregatorInnerAggregationsNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteTypeMismatchException", typeof(SchemaFieldOverwriteTypeMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteIdException", typeof(SchemaFieldOverwriteIdException))]
    [JsonInheritanceAttribute("SchemaFieldIdDuplicatedException", typeof(SchemaFieldIdDuplicatedException))]
    [JsonInheritanceAttribute("SchemaFieldIdPreviouslyUsedException", typeof(SchemaFieldIdPreviouslyUsedException))]
    [JsonInheritanceAttribute("SchemaFieldIdAlreadyExistsInSchemaHierarchyException", typeof(SchemaFieldIdAlreadyExistsInSchemaHierarchyException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoSimpleSearchNestingException", typeof(SchemaFieldSchemaIndexInfoSimpleSearchNestingException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoNestingException", typeof(SchemaFieldSchemaIndexInfoNestingException))]
    [JsonInheritanceAttribute("SchemaFieldIdUppercaseException", typeof(SchemaFieldIdUppercaseException))]
    [JsonInheritanceAttribute("SchemaIdLowercaseException", typeof(SchemaIdLowercaseException))]
    [JsonInheritanceAttribute("SchemaInfoNotFoundException", typeof(SchemaInfoNotFoundException))]
    [JsonInheritanceAttribute("IndexedFieldThresholdExceededException", typeof(IndexedFieldThresholdExceededException))]
    [JsonInheritanceAttribute("SortableFieldThresholdExceededException", typeof(SortableFieldThresholdExceededException))]
    [JsonInheritanceAttribute("DuplicateSchemaInfoException", typeof(DuplicateSchemaInfoException))]
    [JsonInheritanceAttribute("SchemaFieldNumberRangeException", typeof(SchemaFieldNumberRangeException))]
    [JsonInheritanceAttribute("SchemaInUseContentSchemaException", typeof(SchemaInUseContentSchemaException))]
    [JsonInheritanceAttribute("LayerAssignmentInUseWithContentsException", typeof(LayerAssignmentInUseWithContentsException))]
    [JsonInheritanceAttribute("SchemaInUseListItemException", typeof(SchemaInUseListItemException))]
    [JsonInheritanceAttribute("SchemaInUseContentException", typeof(SchemaInUseContentException))]
    [JsonInheritanceAttribute("SchemaInUseFieldException", typeof(SchemaInUseFieldException))]
    [JsonInheritanceAttribute("DuplicateMetadataDisplayPatternException", typeof(DuplicateMetadataDisplayPatternException))]
    [JsonInheritanceAttribute("DuplicateSchemaException", typeof(DuplicateSchemaException))]
    [JsonInheritanceAttribute("SchemaImportEmptyException", typeof(SchemaImportEmptyException))]
    [JsonInheritanceAttribute("SchemaImportVersionMismatchException", typeof(SchemaImportVersionMismatchException))]
    [JsonInheritanceAttribute("SchemaInheritanceFieldIndexDeviationException", typeof(SchemaInheritanceFieldIndexDeviationException))]
    [JsonInheritanceAttribute("SchemaInheritanceTypeDeviationException", typeof(SchemaInheritanceTypeDeviationException))]
    [JsonInheritanceAttribute("SchemaValidationException", typeof(SchemaValidationException))]
    [JsonInheritanceAttribute("SchemaSortFieldException", typeof(SchemaSortFieldException))]
    [JsonInheritanceAttribute("SchemaFieldIdException", typeof(SchemaFieldIdException))]
    [JsonInheritanceAttribute("SchemaFieldTypeChangeException", typeof(SchemaFieldTypeChangeException))]
    [JsonInheritanceAttribute("SchemaFieldNotFilterableException", typeof(SchemaFieldNotFilterableException))]
    [JsonInheritanceAttribute("SchemaFieldNotSortableException", typeof(SchemaFieldNotSortableException))]
    [JsonInheritanceAttribute("SchemaFieldNotSearchableException", typeof(SchemaFieldNotSearchableException))]
    [JsonInheritanceAttribute("SchemaFieldInvalidBoostException", typeof(SchemaFieldInvalidBoostException))]
    [JsonInheritanceAttribute("SchemaFieldSortableInUseException", typeof(SchemaFieldSortableInUseException))]
    [JsonInheritanceAttribute("SchemaNoContentException", typeof(SchemaNoContentException))]
    [JsonInheritanceAttribute("SchemaParentChangeException", typeof(SchemaParentChangeException))]
    [JsonInheritanceAttribute("SchemaMissingTypeException", typeof(SchemaMissingTypeException))]
    [JsonInheritanceAttribute("SchemaPermissionConfigurationException", typeof(SchemaPermissionConfigurationException))]
    [JsonInheritanceAttribute("SchemaMetadataProtectionSettingsNotSupportedForStructsException", typeof(SchemaMetadataProtectionSettingsNotSupportedForStructsException))]
    [JsonInheritanceAttribute("SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException", typeof(SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException))]
    [JsonInheritanceAttribute("SchemaNoLayerException", typeof(SchemaNoLayerException))]
    [JsonInheritanceAttribute("SchemaIdException", typeof(SchemaIdException))]
    [JsonInheritanceAttribute("SchemaInUseException", typeof(SchemaInUseException))]
    [JsonInheritanceAttribute("SchemaNotFoundException", typeof(SchemaNotFoundException))]
    [JsonInheritanceAttribute("SchemaCountLimitReachedException", typeof(SchemaCountLimitReachedException))]
    [JsonInheritanceAttribute("SystemSchemaInvalidModificationException", typeof(SystemSchemaInvalidModificationException))]
    [JsonInheritanceAttribute("SchemaFieldRelationSchemaSystemSchemaException", typeof(SchemaFieldRelationSchemaSystemSchemaException))]
    [JsonInheritanceAttribute("SchemaFieldRelationSchemaTypeUnsupportedException", typeof(SchemaFieldRelationSchemaTypeUnsupportedException))]
    [JsonInheritanceAttribute("SchemaMultipleTypesException", typeof(SchemaMultipleTypesException))]
    [JsonInheritanceAttribute("MissingDisplayPatternForCustomerDefaultLanguageException", typeof(MissingDisplayPatternForCustomerDefaultLanguageException))]
    [JsonInheritanceAttribute("SchemaViewForAllException", typeof(SchemaViewForAllException))]
    [JsonInheritanceAttribute("SystemLayerReferenceInvalidModificationException", typeof(SystemLayerReferenceInvalidModificationException))]
    [JsonInheritanceAttribute("SchemaFieldAnalyzerInvalidException", typeof(SchemaFieldAnalyzerInvalidException))]
    [JsonInheritanceAttribute("SchemaFieldRelationMultipleTypesException", typeof(SchemaFieldRelationMultipleTypesException))]
    [JsonInheritanceAttribute("SchemaFieldNotRequirableException", typeof(SchemaFieldNotRequirableException))]
    [JsonInheritanceAttribute("DisplayPatternTypeNotSupportedException", typeof(DisplayPatternTypeNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldActivityInUseException", typeof(SchemaFieldActivityInUseException))]
    [JsonInheritanceAttribute("SchemaFieldReferencedSchemaChangeNotAllowedException", typeof(SchemaFieldReferencedSchemaChangeNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldReferencedSchemaSystemSchemaException", typeof(SchemaFieldReferencedSchemaSystemSchemaException))]
    [JsonInheritanceAttribute("SchemaFieldRelationRelationTypeIdModificationNotAllowedException", typeof(SchemaFieldRelationRelationTypeIdModificationNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldRelationTargetDocTypeModificationNotAllowedException", typeof(SchemaFieldRelationTargetDocTypeModificationNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldImportMismatchException", typeof(SchemaFieldImportMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportRelatedSchemaMismatchException", typeof(SchemaFieldImportRelatedSchemaMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportTypeMismatchException", typeof(SchemaFieldImportTypeMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldNotSupportedException", typeof(SchemaFieldNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldDisplayPatternTypeNotSupportedException", typeof(SchemaFieldDisplayPatternTypeNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldMarkdownNotMultilineException", typeof(SchemaFieldMarkdownNotMultilineException))]
    [JsonInheritanceAttribute("IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException", typeof(IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException))]
    [JsonInheritanceAttribute("SchemaFieldDynamicViewFieldInvalidFilterTemplateException", typeof(SchemaFieldDynamicViewFieldInvalidFilterTemplateException))]
    [JsonInheritanceAttribute("SchemaFieldTreeViewAtLeastOneLevelRequiredException", typeof(SchemaFieldTreeViewAtLeastOneLevelRequiredException))]
    [JsonInheritanceAttribute("SchemaFieldTreeViewTagboxFieldRequiredException", typeof(SchemaFieldTreeViewTagboxFieldRequiredException))]
    [JsonInheritanceAttribute("SchemaFieldTreeViewNotSupportedForSchemaTypeException", typeof(SchemaFieldTreeViewNotSupportedForSchemaTypeException))]
    [JsonInheritanceAttribute("TagboxInUseInTreeViewFieldException", typeof(TagboxInUseInTreeViewFieldException))]
    [JsonInheritanceAttribute("DeleteContentsWithReferencesException", typeof(DeleteContentsWithReferencesException))]
    [JsonInheritanceAttribute("ContentMetadataUpdateManyException", typeof(ContentMetadataUpdateManyException))]
    [JsonInheritanceAttribute("ContentNotFoundException", typeof(ContentNotFoundException))]
    [JsonInheritanceAttribute("ContentLayerInvalidException", typeof(ContentLayerInvalidException))]
    [JsonInheritanceAttribute("ContentFileReplaceTypeMismatchException", typeof(ContentFileReplaceTypeMismatchException))]
    [JsonInheritanceAttribute("ContentLayerSameRootException", typeof(ContentLayerSameRootException))]
    [JsonInheritanceAttribute("ContentHistoricVersionNotFoundException", typeof(ContentHistoricVersionNotFoundException))]
    [JsonInheritanceAttribute("ContentSchemaChangeException", typeof(ContentSchemaChangeException))]
    [JsonInheritanceAttribute("ConcurrentFileReplacementDuringRepairException", typeof(ConcurrentFileReplacementDuringRepairException))]
    [JsonInheritanceAttribute("ContentResolveBehaviorNotSupportedException", typeof(ContentResolveBehaviorNotSupportedException))]
    [JsonInheritanceAttribute("BusinessProcessEngineRequestException", typeof(BusinessProcessEngineRequestException))]
    [JsonInheritanceAttribute("BusinessProcessNotFoundException", typeof(BusinessProcessNotFoundException))]
    [JsonInheritanceAttribute("TooManyBusinessProcessesException", typeof(TooManyBusinessProcessesException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionNotFoundException", typeof(BusinessProcessDefinitionNotFoundException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionCreateException", typeof(BusinessProcessDefinitionCreateException))]
    [JsonInheritanceAttribute("BusinessProcessNotExternalException", typeof(BusinessProcessNotExternalException))]
    [JsonInheritanceAttribute("BusinessProcessCancellationNotSupportedException", typeof(BusinessProcessCancellationNotSupportedException))]
    [JsonInheritanceAttribute("BusinessProcessContinuationException", typeof(BusinessProcessContinuationException))]
    [JsonInheritanceAttribute("BusinessProcessSummaryNotBatchBasedException", typeof(BusinessProcessSummaryNotBatchBasedException))]
    [JsonInheritanceAttribute("BusinessProcessSummaryNotFoundException", typeof(BusinessProcessSummaryNotFoundException))]
    [JsonInheritanceAttribute("SnapshotTimeoutException", typeof(SnapshotTimeoutException))]
    [JsonInheritanceAttribute("SnapshotFailedException", typeof(SnapshotFailedException))]
    [JsonInheritanceAttribute("CoreClusterNotProvidedException", typeof(CoreClusterNotProvidedException))]
    [JsonInheritanceAttribute("CrossClusterRestoreException", typeof(CrossClusterRestoreException))]
    [JsonInheritanceAttribute("SnapshotNotFoundException", typeof(SnapshotNotFoundException))]
    [JsonInheritanceAttribute("SnapshotExistingIndicesNotClosedException", typeof(SnapshotExistingIndicesNotClosedException))]
    [JsonInheritanceAttribute("AddMetadataLanguageTimeoutException", typeof(AddMetadataLanguageTimeoutException))]
    [JsonInheritanceAttribute("EnvironmentProcessAlreadyRunningException", typeof(EnvironmentProcessAlreadyRunningException))]
    [JsonInheritanceAttribute("EnvironmentProcessNotFoundException", typeof(EnvironmentProcessNotFoundException))]
    [JsonInheritanceAttribute("EnvironmentProcessWaitTimeoutException", typeof(EnvironmentProcessWaitTimeoutException))]
    [JsonInheritanceAttribute("CustomerBoostValuesUpdateTimeoutException", typeof(CustomerBoostValuesUpdateTimeoutException))]
    [JsonInheritanceAttribute("NoTermsOfServiceDefinedException", typeof(NoTermsOfServiceDefinedException))]
    [JsonInheritanceAttribute("AtLeastOneActiveTermsOfServiceMustExistException", typeof(AtLeastOneActiveTermsOfServiceMustExistException))]
    [JsonInheritanceAttribute("ForbiddenHtmlElementsUsedException", typeof(ForbiddenHtmlElementsUsedException))]
    [JsonInheritanceAttribute("BusinessProcessStateNotHitException", typeof(BusinessProcessStateNotHitException))]
    [JsonInheritanceAttribute("BusinessProcessLifeCycleNotHitException", typeof(BusinessProcessLifeCycleNotHitException))]
    [JsonInheritanceAttribute("OnlyAccessibleToRecipientException", typeof(OnlyAccessibleToRecipientException))]
    [JsonInheritanceAttribute("NotificationNotFoundException", typeof(NotificationNotFoundException))]
    [JsonInheritanceAttribute("CustomerAliasHeaderMissingException", typeof(CustomerAliasHeaderMissingException))]
    [JsonInheritanceAttribute("BusinessRuleActionInvalidDocumentTypeException", typeof(BusinessRuleActionInvalidDocumentTypeException))]
    [JsonInheritanceAttribute("BusinessRuleActionsMissingException", typeof(BusinessRuleActionsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConditionMissingException", typeof(BusinessRuleConditionMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConditionsMissingException", typeof(BusinessRuleConditionsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConfigurationValidationException", typeof(BusinessRuleConfigurationValidationException))]
    [JsonInheritanceAttribute("BusinessRuleSchemaIdInvalidException", typeof(BusinessRuleSchemaIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRulePermissionSetIdInvalidException", typeof(BusinessRulePermissionSetIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleRuleIdDuplicationException", typeof(BusinessRuleRuleIdDuplicationException))]
    [JsonInheritanceAttribute("BusinessRuleRuleIdMissingException", typeof(BusinessRuleRuleIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleTriggerPointMissingException", typeof(BusinessRuleTriggerPointMissingException))]
    [JsonInheritanceAttribute("BusinessRuleValidationException", typeof(BusinessRuleValidationException))]
    [JsonInheritanceAttribute("BusinessRuleRegularExpressionInvalidException", typeof(BusinessRuleRegularExpressionInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleConditionInvalidTriggerPointException", typeof(BusinessRuleConditionInvalidTriggerPointException))]
    [JsonInheritanceAttribute("BusinessRuleRefIdsMissingException", typeof(BusinessRuleRefIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRulePathInvalidException", typeof(BusinessRulePathInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleFieldIdInvalidException", typeof(BusinessRuleFieldIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleContentPermissionSetIdsMissingException", typeof(BusinessRuleContentPermissionSetIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleFieldPathInvalidException", typeof(BusinessRuleFieldPathInvalidException))]
    [JsonInheritanceAttribute("BusinessRulePolygonInvalidException", typeof(BusinessRulePolygonInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleArrayIndexInvalidException", typeof(BusinessRuleArrayIndexInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleDictionaryKeyInvalidException", typeof(BusinessRuleDictionaryKeyInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleProjectionTransformationsMissingException", typeof(BusinessRuleProjectionTransformationsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleInvalidVariableNameException", typeof(BusinessRuleInvalidVariableNameException))]
    [JsonInheritanceAttribute("BusinessRuleTransformationGroupTransformationsMissingException", typeof(BusinessRuleTransformationGroupTransformationsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleTransformationGroupInputsMissingException", typeof(BusinessRuleTransformationGroupInputsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNamedCacheNameInvalidException", typeof(BusinessRuleNamedCacheNameInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationSizeInvalidException", typeof(BusinessRuleNGramTransformationSizeInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationMinWordLengthInvalidException", typeof(BusinessRuleNGramTransformationMinWordLengthInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationMaxWordLengthInvalidException", typeof(BusinessRuleNGramTransformationMaxWordLengthInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationInvalidIdException", typeof(BusinessRuleNotificationInvalidIdException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationNoRecipientsException", typeof(BusinessRuleNotificationNoRecipientsException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationRecipientUserIdMissingException", typeof(BusinessRuleNotificationRecipientUserIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationRecipientUserRoleIdMissingException", typeof(BusinessRuleNotificationRecipientUserRoleIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNumberSequenceInvalidIdException", typeof(BusinessRuleNumberSequenceInvalidIdException))]
    [JsonInheritanceAttribute("BusinessRuleNumberSequenceIdDuplicationException", typeof(BusinessRuleNumberSequenceIdDuplicationException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleInvalidCronExpressionException", typeof(BusinessRuleScheduleInvalidCronExpressionException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleFilterMissingException", typeof(BusinessRuleScheduleFilterMissingException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleRulesMissingException", typeof(BusinessRuleScheduleRulesMissingException))]
    [JsonInheritanceAttribute("BusinessRuleStringContainsConditionValuesToMatchMissingException", typeof(BusinessRuleStringContainsConditionValuesToMatchMissingException))]
    [JsonInheritanceAttribute("BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException", typeof(BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleDateMathTransformationTimeSpanInvalidException", typeof(BusinessRuleDateMathTransformationTimeSpanInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleTransferOwnershipTransferUserIdMissingException", typeof(BusinessRuleTransferOwnershipTransferUserIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleOutputFormatIdMissingException", typeof(BusinessRuleOutputFormatIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException", typeof(BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException))]
    [JsonInheritanceAttribute("NamedCacheConfigurationException", typeof(NamedCacheConfigurationException))]
    [JsonInheritanceAttribute("NamedCacheNameMissingException", typeof(NamedCacheNameMissingException))]
    [JsonInheritanceAttribute("NamedCacheNameDuplicationException", typeof(NamedCacheNameDuplicationException))]
    [JsonInheritanceAttribute("ListItemNamedCacheSchemaIdInvalidException", typeof(ListItemNamedCacheSchemaIdInvalidException))]
    [JsonInheritanceAttribute("ListItemNamedCacheKeyFieldsInvalidException", typeof(ListItemNamedCacheKeyFieldsInvalidException))]
    [JsonInheritanceAttribute("SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException", typeof(SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException))]
    [JsonInheritanceAttribute("NoTagsFoundException", typeof(NoTagsFoundException))]
    [JsonInheritanceAttribute("OutputNotAvailableException", typeof(OutputNotAvailableException))]
    [JsonInheritanceAttribute("ModelNotFoundException", typeof(ModelNotFoundException))]
    [JsonInheritanceAttribute("DisplayValueRerenderingInProgressException", typeof(DisplayValueRerenderingInProgressException))]
    [JsonInheritanceAttribute("OutputFormatNotFoundException", typeof(OutputFormatNotFoundException))]
    [JsonInheritanceAttribute("OutputFormatSourceNotDefinedException", typeof(OutputFormatSourceNotDefinedException))]
    [JsonInheritanceAttribute("OutputFormatRetentionTimeOutOfRangeException", typeof(OutputFormatRetentionTimeOutOfRangeException))]
    [JsonInheritanceAttribute("NotSupportedFileExtensionForFormatException", typeof(NotSupportedFileExtensionForFormatException))]
    [JsonInheritanceAttribute("OutputFormatXmpWritebackNotSupportedException", typeof(OutputFormatXmpWritebackNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException", typeof(OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatsInUseException", typeof(OutputFormatsInUseException))]
    [JsonInheritanceAttribute("OutputFormatOperationInProgressException", typeof(OutputFormatOperationInProgressException))]
    [JsonInheritanceAttribute("StaticOutputFormatModificationNotSupportedException", typeof(StaticOutputFormatModificationNotSupportedException))]
    [JsonInheritanceAttribute("OriginalOutputFormatModificationNotSupportedException", typeof(OriginalOutputFormatModificationNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatSourceNotValidForRenderingCategoryException", typeof(OutputFormatSourceNotValidForRenderingCategoryException))]
    [JsonInheritanceAttribute("CollectionSizeLimitExceededException", typeof(CollectionSizeLimitExceededException))]
    [JsonInheritanceAttribute("CollectionModificationNotAllowedException", typeof(CollectionModificationNotAllowedException))]
    [JsonInheritanceAttribute("CollectionNotFoundException", typeof(CollectionNotFoundException))]
    [JsonInheritanceAttribute("NonDefaultTemplateNameNotAllowedException", typeof(NonDefaultTemplateNameNotAllowedException))]
    [JsonInheritanceAttribute("SystemTemplateModificationNotAllowedException", typeof(SystemTemplateModificationNotAllowedException))]
    [JsonInheritanceAttribute("TemplateDuplicationException", typeof(TemplateDuplicationException))]
    [JsonInheritanceAttribute("TemplateLanguageCodeNotSupportedException", typeof(TemplateLanguageCodeNotSupportedException))]
    [JsonInheritanceAttribute("TemplateMediaTypesMissingException", typeof(TemplateMediaTypesMissingException))]
    [JsonInheritanceAttribute("TemplateMediaTypesNotSupportedException", typeof(TemplateMediaTypesNotSupportedException))]
    [JsonInheritanceAttribute("TemplateNotFoundException", typeof(TemplateNotFoundException))]
    [JsonInheritanceAttribute("XmpMappingFieldNotSupported", typeof(XmpMappingFieldNotSupported))]
    [JsonInheritanceAttribute("XmpMappingFieldNotFoundException", typeof(XmpMappingFieldNotFoundException))]
    [JsonInheritanceAttribute("XmpMappingSchemaNotAvailableForFileContentSchemaException", typeof(XmpMappingSchemaNotAvailableForFileContentSchemaException))]
    [JsonInheritanceAttribute("XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException", typeof(XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException))]
    [JsonInheritanceAttribute("XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException", typeof(XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException))]
    [JsonInheritanceAttribute("XmpMappingFieldInUseException", typeof(XmpMappingFieldInUseException))]
    [JsonInheritanceAttribute("XmpMappingConfigurationInvalidException", typeof(XmpMappingConfigurationInvalidException))]
    [JsonInheritanceAttribute("ActivityMappingInvalidException", typeof(ActivityMappingInvalidException))]
    [JsonInheritanceAttribute("StatisticsExportNotEnabledException", typeof(StatisticsExportNotEnabledException))]
    [JsonInheritanceAttribute("StatisticsReadNotEnabledException", typeof(StatisticsReadNotEnabledException))]
    [JsonInheritanceAttribute("StatisticsWriteNotEnabledException", typeof(StatisticsWriteNotEnabledException))]
    [JsonInheritanceAttribute("ConversionPresetTemplateNotFoundException", typeof(ConversionPresetTemplateNotFoundException))]
    [JsonInheritanceAttribute("CommentNotFoundException", typeof(CommentNotFoundException))]
    [JsonInheritanceAttribute("CommentOwnershipFailureException", typeof(CommentOwnershipFailureException))]
    [JsonInheritanceAttribute("CommentReplyDeletionException", typeof(CommentReplyDeletionException))]
    [JsonInheritanceAttribute("CommentReplyParentException", typeof(CommentReplyParentException))]
    [JsonInheritanceAttribute("CommentReplyContentMismatchException", typeof(CommentReplyContentMismatchException))]
    [JsonInheritanceAttribute("VirtualDisplayContentNotSupportedException", typeof(VirtualDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("NestedDisplayContentNotSupportedException", typeof(NestedDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("SelfReferencingDisplayContentNotSupportedException", typeof(SelfReferencingDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("ConcurrentFileReplacementException", typeof(ConcurrentFileReplacementException))]
    [JsonInheritanceAttribute("ContentSearchQueryInvalidException", typeof(ContentSearchQueryInvalidException))]
    [JsonInheritanceAttribute("IngestContainerCreationFailedException", typeof(IngestContainerCreationFailedException))]
    [JsonInheritanceAttribute("IngestContainerNotFoundException", typeof(IngestContainerNotFoundException))]
    [JsonInheritanceAttribute("IngestContainerEmptyException", typeof(IngestContainerEmptyException))]
    [JsonInheritanceAttribute("IngestFileNotFoundException", typeof(IngestFileNotFoundException))]
    [JsonInheritanceAttribute("IngestContainerImportAlreadyInProgressException", typeof(IngestContainerImportAlreadyInProgressException))]
    [JsonInheritanceAttribute("IngestContainerImportRequestValidationFailedException", typeof(IngestContainerImportRequestValidationFailedException))]
    [JsonInheritanceAttribute("IngestFileInvalidFileNameOverrideExtensionException", typeof(IngestFileInvalidFileNameOverrideExtensionException))]
    [JsonInheritanceAttribute("IngestFileAlreadyImportedException", typeof(IngestFileAlreadyImportedException))]
    [JsonInheritanceAttribute("IngestUrlInvalidException", typeof(IngestUrlInvalidException))]
    [JsonInheritanceAttribute("IngestDownloadFailedException", typeof(IngestDownloadFailedException))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkException : System.Exception
    {
        [Newtonsoft.Json.JsonProperty("traceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLevel TraceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }

        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HttpStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum TraceLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Verbose")]
        Verbose = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkConflictException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkConflictException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkConflictException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkTimeoutException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkForbiddenException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkForbiddenException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkForbiddenException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkContradictoryArgumentsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ArgumentNames { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkContradictoryArgumentsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkContradictoryArgumentsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public abstract partial class PictureparkDatabaseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkDatabaseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkDatabaseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserEmailAlreadyExistsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserEmailAlreadyExistsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmailAlreadyExistsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserRoleAssignedException : UnableToDeleteUserRoleException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleAssignedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteUserRoleException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("missingUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotDeactivatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("notDeactivatedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotDeactivatedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserWithOwnerTokensArchiveException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("notArchivedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotArchivedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserWithOwnerTokensArchiveException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserWithOwnerTokensArchiveException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserInactiveOrDeletedException : PictureparkValidationException
    {
        /// <summary>
        /// The ID of the inactive or deleted user in question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserInactiveOrDeletedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInactiveOrDeletedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InactiveOrDeletedUserRefusedAccessException : PictureparkForbiddenException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InactiveOrDeletedUserRefusedAccessException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InactiveOrDeletedUserRefusedAccessException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TermsOfServiceNotNewestException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsOfServiceNotNewestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsOfServiceNotNewestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IllegalAuthorizationStateTransitionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IllegalAuthorizationStateTransitionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IllegalAuthorizationStateTransitionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User authorization state
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reviewed")]
        Reviewed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ToBeReviewed")]
        ToBeReviewed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Invited")]
        Invited = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivation")]
        UserTriggeredDeactivation = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TermsOfServiceConsentRequiredException : PictureparkForbiddenException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsOfServiceConsentRequiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsOfServiceConsentRequiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserRolesNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRolesNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRolesNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnauthorizedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnauthorizedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnauthorizedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserUnlockDisallowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserUnlockDisallowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUnlockDisallowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserAlreadyInRequestedLockStateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("userIsLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UserIsLocked { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAlreadyInRequestedLockStateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAlreadyInRequestedLockStateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LoginUsingIncorrectIdentityProviderException : PictureparkForbiddenException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoginUsingIncorrectIdentityProviderException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginUsingIncorrectIdentityProviderException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IdentityProviderNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("missingIdentityProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingIdentityProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("external", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool External { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentityProviderNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityProviderNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserDoesNotSupportLocalLoginException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDoesNotSupportLocalLoginException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDoesNotSupportLocalLoginException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserAttributeNotSynchronizableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("attributePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributePath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAttributeNotSynchronizableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAttributeNotSynchronizableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToMapMultipleClaimTypesIntoSameAttributeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("attributePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributePath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToMapMultipleClaimTypesIntoSameAttributeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToMapMultipleClaimTypesIntoSameAttributeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToChangeMappedUserRolesForFederatedUserException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToChangeMappedUserRolesForFederatedUserException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToChangeMappedUserRolesForFederatedUserException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteDefaultUserRoleException : UnableToDeleteUserRoleException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteDefaultUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteDefaultUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException : UnableToDeleteUserRoleException
    {
        [Newtonsoft.Json.JsonProperty("identityProviderIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IdentityProviderIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserPropertyChangeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("propertyPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyPath { get; set; }

        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserPropertyChangeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPropertyChangeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotLinkedWithIdsException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotLinkedWithIdsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotLinkedWithIdsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LanguageCodeNotExistingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("existingLanguageCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExistingLanguageCodes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageCodeNotExistingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageCodeNotExistingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserByOwnerTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("ownerToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserByOwnerTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserByOwnerTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidOperationWithAnonymousUserException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidOperationWithAnonymousUserException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidOperationWithAnonymousUserException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidOperationWithAnonymousUserRoleException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidOperationWithAnonymousUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidOperationWithAnonymousUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RenderingException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FormatNotApplicableForRenderingException : RenderingException
    {
        [Newtonsoft.Json.JsonProperty("contentRenderingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RenderingCategory ContentRenderingType { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatNotApplicableForRenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatNotApplicableForRenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RenderingCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Document")]
        Document = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Video")]
        Video = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Audio")]
        Audio = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Vector")]
        Vector = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FocalPointCropSizeMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("focalPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPointId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FocalPointCropSizeMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FocalPointCropSizeMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderDeleteException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("detailedErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderCreateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("detailErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderCreateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderCreateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("missingServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingServiceProviderId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentVersionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultChannelDeleteException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultChannelDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultChannelDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ChannelsNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChannelsNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelsNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SuperAdminRolesNotAssignableToChannelException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SuperAdminRolesNotAssignableToChannelException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SuperAdminRolesNotAssignableToChannelException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ElasticVersionUpdateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ElasticVersionUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElasticVersionUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidVersionException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidVersionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidVersionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotDeactivatedException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotFoundException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentDeactivationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentDeactivationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerClonesNotAcceptedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerClonesNotAcceptedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerClonesNotAcceptedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareOutputNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareByTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareByTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareByTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TokenGenerationException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Retries { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TokenGenerationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenGenerationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareExpiredException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareExpiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareExpiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSharedOutputException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSharedOutputException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSharedOutputException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateEmbedConversionPresetException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateEmbedConversionPresetException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateEmbedConversionPresetException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputIdNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("outputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputIdNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputIdNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToCreateOrModifyStaticOutputFormatException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToCreateOrModifyStaticOutputFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToCreateOrModifyStaticOutputFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileMappingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("inputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("targetFormatKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetFormatKind { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileMappingForDynamicFormatException : NotSupportedFileMappingException
    {
        [Newtonsoft.Json.JsonProperty("formatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileMappingForDynamicFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileMappingForDynamicFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateOutputFormatIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateOutputFormatIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateOutputFormatIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputEditingNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputEditingNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputEditingNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputBackupNotRequestedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputBackupNotRequestedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputBackupNotRequestedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputBackupHashMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedHash { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHash { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputBackupHashMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputBackupHashMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputOperationInProgressException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputOperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputOperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DownloadLinkExpiredException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadLinkExpiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadLinkExpiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RenderingNotAwaitedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RenderingNotAwaitedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingNotAwaitedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateContentDownloadRequestException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateContentDownloadRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateContentDownloadRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidContentDownloadRequestException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidContentDownloadRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidContentDownloadRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DownloadNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EmbedMultiDownloadException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EmbedMultiDownloadException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedMultiDownloadException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ImageOptimizationLicensingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageOptimizationLicensingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageOptimizationLicensingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LeaseNotAcquiredException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeaseNotAcquiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeaseNotAcquiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OperationInProgressException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("leaseResourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LeaseResourceType LeaseResourceType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeaseResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaEditing")]
        SchemaEditing = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OwnerTokenUserIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidStateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkArgumentNullException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkArgumentNullException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkArgumentNullException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateTransitionException : InvalidStateException
    {
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidStateTransitionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateTransitionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FailedToLockException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FailedToLockException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedToLockException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkOperationCanceledException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkOperationCanceledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkOperationCanceledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkApplicationException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkApplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkApplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingCustomerDefaultLanguageException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("customerDefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerDefaultLanguage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingCustomerDefaultLanguageException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingCustomerDefaultLanguageException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PartialOperationNotSupportedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartialOperationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartialOperationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContractMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("expectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContractMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkTooManyRequestsException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkTooManyRequestsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkTooManyRequestsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidArgumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("argumentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidArgumentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidArgumentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public abstract partial class ArgumentRangeException : InvalidArgumentException
    {
        [Newtonsoft.Json.JsonProperty("minAcceptableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinAcceptableValue { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAcceptableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxAcceptableValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArgumentRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArgumentRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnknownException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnknownException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnknownException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerTokenInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidValueFormatException : InvalidArgumentException
    {
        [Newtonsoft.Json.JsonProperty("expectedFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidValueFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidValueFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ItemIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RequestSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RequestedAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RequestSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CronExpressionInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("cronExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CronExpression { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CronExpressionInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CronExpressionInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FeatureNotEnabledException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("featureName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeatureName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeatureNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeatureNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerViolationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedCustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("currentCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentCustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerViolationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerViolationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("existingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingCustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotDeactivatedException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerDeactivationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDeactivationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerHostNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotActiveException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotActiveException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotActiveException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerBoostValuesInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValuesInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValuesInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotRetentionTimeTooShortException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("snapshotRetentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan SnapshotRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumRetentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan MinimumRetentionTime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRetentionTimeTooShortException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRetentionTimeTooShortException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardIndexNotAllowedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardIndexNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardIndexNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfShardsInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfShardsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfShardsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfRoutingShardsInvalidException : ReshardNumberOfShardsInvalidException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfRoutingShardsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfRoutingShardsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfShardsInvalidForExistingRoutingShardsException : ReshardNumberOfShardsInvalidException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfShardsInvalidForExistingRoutingShardsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfShardsInvalidForExistingRoutingShardsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConfigurationIndexNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("configurationIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfigurationIndexNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationIndexNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSearchIndexDocException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSearchIndexDocException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSearchIndexDocException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexDocNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexDocNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexDocNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexDocumentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexDocumentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexDocumentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAliasException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("indexAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateAliasException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAliasException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultSearchIndexDeleteException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultSearchIndexDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultSearchIndexDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexInUseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }

        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexMappingException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }

        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicatedSearchBehaviorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("duplicatedSearchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DuplicatedSearchBehaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicatedSearchBehaviorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicatedSearchBehaviorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchStringLeadingWildcardException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchStringLeadingWildcardException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchStringLeadingWildcardException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidDateTimeFormatException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string ExpectedFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidDateTimeFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidDateTimeFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSortFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSortFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidUiBehaviorInNonRootAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidUiBehaviorInNonRootAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUiBehaviorInNonRootAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidUiBehaviorConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidUiBehaviorConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUiBehaviorConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidSearchFieldInAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSearchFieldInAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSearchFieldInAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchStringTooLongException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchStringTooLongException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchStringTooLongException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationNameInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        [Newtonsoft.Json.JsonProperty("aggregationPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationPrefix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationNameInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationNameInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationNameMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationNameMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationNameMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Size of the aggregation is invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationSizeInvalidException : PictureparkValidationException
    {
        /// <summary>
        /// The name identifying the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        /// <summary>
        /// The invalid size of the aggregation: size must be equal or greater than 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AggregationSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationSizeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationSizeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationFilterNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        [Newtonsoft.Json.JsonProperty("notSupportedFilterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotSupportedFilterType { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedFilterTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedFilterTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFilterNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilterNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationFieldMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFieldMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFieldMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationPathMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationPathMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationPathMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionConflictException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DocumentVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentVersionConflictException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionConflictException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RedisDatabaseExceededException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerCount { get; set; }

        [Newtonsoft.Json.JsonProperty("maxCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxCount { get; set; }

        [Newtonsoft.Json.JsonProperty("startIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("redisDatabaseCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RedisDatabaseCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RedisDatabaseExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RedisDatabaseExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateDocumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateDocumentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateDocumentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreResponseException : PictureparkDatabaseException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectStoreResponseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreResponseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreException : PictureparkDatabaseException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectStoreException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class QueryException : PictureparkDatabaseException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueryException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionOwnershipTransferException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("missingUserRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserRight MissingUserRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionOwnershipTransferException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionOwnershipTransferException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ManageContent")]
        ManageContent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSharings")]
        ManageSharings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTransfer")]
        ManageTransfer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageChannels")]
        ManageChannels = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSchemas")]
        ManageSchemas = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageUsers")]
        ManageUsers = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageUserRoles")]
        ManageUserRoles = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagePermissions")]
        ManagePermissions = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSearchIndexes")]
        ManageSearchIndexes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageListItems")]
        ManageListItems = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageServiceProviders")]
        ManageServiceProviders = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageEmbeds")]
        ManageEmbeds = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTemplates")]
        ManageTemplates = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTermsOfService")]
        ManageTermsOfService = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageLiveStream")]
        ManageLiveStream = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageDocumentHistory")]
        ManageDocumentHistory = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageAllShares")]
        ManageAllShares = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageOutputFormats")]
        ManageOutputFormats = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageBusinessProcesses")]
        ManageBusinessProcesses = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageIdentityProviders")]
        ManageIdentityProviders = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageXmpMappings")]
        ManageXmpMappings = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatistics")]
        ReadStatistics = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"WriteStatistics")]
        WriteStatistics = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportStatistics")]
        ExportStatistics = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"EditImages")]
        EditImages = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageConversionPresetTemplates")]
        ManageConversionPresetTemplates = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageComments")]
        ManageComments = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageAllComments")]
        ManageAllComments = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ListUsers")]
        ListUsers = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageIngest")]
        ManageIngest = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetAggregateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetAggregateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetAggregateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateRightException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateRightException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateRightException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ReferenceCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> ContentRights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content rights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccessOriginal")]
        AccessOriginal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EditMetadata")]
        EditMetadata = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EditContent")]
        EditContent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagePermissions")]
        ManagePermissions = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageHistoricVersions")]
        ManageHistoricVersions = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadataRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataRight MetadataRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata rights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetadataRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageItems")]
        ManageItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSchema")]
        ManageSchema = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadataRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataRight MetadataRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetInvalidRightCombinationException : PermissionSetValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetInvalidRightCombinationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetInvalidRightCombinationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This exception is an abstract base for permission set validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AmbiguousUserRoleRightsException : PermissionSetValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AmbiguousUserRoleRightsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AmbiguousUserRoleRightsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnsupportedListItemChangeCommandException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnsupportedListItemChangeCommandException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsupportedListItemChangeCommandException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemLayerException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemLayerException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemCyclicDependencyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemCyclicDependencyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCyclicDependencyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteListItemsWithReferencesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("numberOfReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfReferences { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeleteListItemsWithReferencesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteListItemsWithReferencesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedItemsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItemsCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemUpdateManyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateManyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemSchemaMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemSchemaMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSchemaMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemResolveBehaviorNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ListItemResolveBehavior> Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemResolveBehaviorNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemResolveBehaviorNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ListItemResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedListItems")]
        LinkedListItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueThumbnail")]
        InnerDisplayValueThumbnail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueList")]
        InnerDisplayValueList = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueDetail")]
        InnerDisplayValueDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueName")]
        InnerDisplayValueName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueThumbnail")]
        OuterDisplayValueThumbnail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueList")]
        OuterDisplayValueList = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueDetail")]
        OuterDisplayValueDetail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueName")]
        OuterDisplayValueName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFields")]
        DynamicViewFields = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFieldsWithHasItems")]
        DynamicViewFieldsWithHasItems = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidLogoFileExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedExtensions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidLogoFileExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidLogoFileExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferInfoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferInfoId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferInfoNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferInfoNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FileTransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidTransferTypeException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidTransferTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidTransferTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of the transfer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FileUpload")]
        FileUpload = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FileUploadAutoImport")]
        FileUploadAutoImport = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WebDownload")]
        WebDownload = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImport")]
        SchemaImport = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class WrongChunkSizeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Actual { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Expected { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WrongChunkSizeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrongChunkSizeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ChunkSizeOutOfRangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Actual { get; set; }

        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Minimum { get; set; }

        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Maximum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChunkSizeOutOfRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChunkSizeOutOfRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumTransferSizeException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("transferSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransferSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumTransferSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumTransferSize { get; set; }

        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumTransferSizeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumTransferSizeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FileIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UploadFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UploadFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumNumberOfChunksExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfChunks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfChunks { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumNumberOfChunks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumNumberOfChunks { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumNumberOfChunksExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumNumberOfChunksExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumFileSizeExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DeclaredFileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MaximumFileSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumFileSizeExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumFileSizeExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingDependenciesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingDependenciesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingDependenciesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationSelfReferencingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationSelfReferencingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationSelfReferencingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldTypeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldActualType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldActualType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldExpectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldExpectedType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandFieldTypeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldTypeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldNotFoundException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandFieldNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandSchemaChangeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandSchemaChangeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandSchemaChangeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidMetadataException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("metadataErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataError> MetadataErrors { get; set; }

        [Newtonsoft.Json.JsonProperty("validationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> ValidationErrors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidMetadataException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidMetadataException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataError
    {
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorType { get; set; }

        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Always)]
        public int LineNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("linePosition", Required = Newtonsoft.Json.Required.Always)]
        public int LinePosition { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeTargetDocTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }

        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetDocType { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedTargetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedTargetDocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeTargetDocTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeTargetDocTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeMissingException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReferencesUpdateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReferenceUpdateException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReferencesUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferencesUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReferenceUpdateException : PictureparkBusinessException
    {
        /// <summary>
        /// This is the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceItemId { get; set; }

        /// <summary>
        /// This is the DocType of the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// These exceptions describe why the source metadata item could not be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReferenceUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicatedItemAssignedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("itemPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicatedItemAssignedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicatedItemAssignedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidDataTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidDataTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidDataTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LayerAssignmentInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerAssignmentInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerAssignmentInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutdatedMetadataUpdateInProgressException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutdatedMetadataUpdateInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutdatedMetadataUpdateInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemasMetadataProtectionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemasMetadataProtectionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemasMetadataProtectionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FilterTemplateRenderingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterTemplateRenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterTemplateRenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ResolvedLinkedItemsThresholdReachedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("metadataItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataItemId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResolvedLinkedItemsThresholdReachedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolvedLinkedItemsThresholdReachedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TreeAggregatorOnlyAllowedInTopLevelAggregationsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregatorOnlyAllowedInTopLevelAggregationsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregatorOnlyAllowedInTopLevelAggregationsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TreeAggregatorInvalidFieldTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregatorInvalidFieldTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregatorInvalidFieldTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TreeAggregatorInnerAggregationsNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregatorInnerAggregationsNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregatorInnerAggregationsNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldOverwriteType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldOverwriteType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldOverwriteTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldOverwriteIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdPreviouslyUsedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsedInSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdPreviouslyUsedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdPreviouslyUsedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdAlreadyExistsInSchemaHierarchyException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("existingInSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingInSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdAlreadyExistsInSchemaHierarchyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdAlreadyExistsInSchemaHierarchyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoSimpleSearchNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSchemaIndexInfoSimpleSearchNestingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoSimpleSearchNestingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSchemaIndexInfoNestingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoNestingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdUppercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdUppercaseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdUppercaseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdLowercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaIdLowercaseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdLowercaseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInfoNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInfoNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexedFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double IndexedFieldCount { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IndexedFieldThreshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexedFieldThresholdExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexedFieldThresholdExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SortableFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SortableFieldCount { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SortableFieldThreshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortableFieldThresholdExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortableFieldThresholdExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaInfoException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSchemaInfoException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaInfoException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNumberRangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MinValue { get; set; }

        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MaxValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNumberRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNumberRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseContentSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LayerAssignmentInUseWithContentsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("usedAssignmentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UsedAssignmentSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerAssignmentInUseWithContentsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerAssignmentInUseWithContentsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseListItemException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ListItemCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseListItemException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseListItemException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ContentCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseContentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldNamespaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldNamespaces { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateMetadataDisplayPatternException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayPatternId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateMetadataDisplayPatternException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateMetadataDisplayPatternException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportEmptyException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportEmptyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportEmptyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportVersionMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("providedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvidedVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportVersionMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportVersionMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceFieldIndexDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInheritanceFieldIndexDeviationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceFieldIndexDeviationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceTypeDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInheritanceTypeDeviationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceTypeDeviationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaSortFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSortFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTypeChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("newTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewTypeName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldTypeChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTypeChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotFilterableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotFilterableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotFilterableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSortableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSortableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSortableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSearchableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSearchableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSearchableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldInvalidBoostException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedBoostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> AllowedBoostValues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldInvalidBoostException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldInvalidBoostException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSortableInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("channelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ChannelIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSortableInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSortableInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNoContentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoContentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaParentChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldSchemaParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("newSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewSchemaParentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaParentChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaParentChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMissingTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedSchemaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> ExpectedSchemaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMissingTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMissingTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of the schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SchemaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Layer")]
        Layer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Struct")]
        Struct = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaPermissionConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMetadataProtectionSettingsNotSupportedForStructsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMetadataProtectionSettingsNotSupportedForStructsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMetadataProtectionSettingsNotSupportedForStructsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNoLayerException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoLayerException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaCountLimitReachedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaCountLimitReachedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCountLimitReachedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemSchemaInvalidModificationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemSchemaInvalidModificationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemSchemaInvalidModificationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationSchemaSystemSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relationSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationSchemaSystemSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationSchemaSystemSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationSchemaTypeUnsupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relationSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationSchemaTypeUnsupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationSchemaTypeUnsupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMultipleTypesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMultipleTypesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMultipleTypesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingDisplayPatternForCustomerDefaultLanguageException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("missingTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DisplayPatternType> MissingTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingDisplayPatternForCustomerDefaultLanguageException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingDisplayPatternForCustomerDefaultLanguageException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The display pattern type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisplayPatternType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Thumbnail")]
        Thumbnail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Detail")]
        Detail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DownloadFileName")]
        DownloadFileName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaViewForAllException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaViewForAllException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaViewForAllException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemLayerReferenceInvalidModificationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemLayerReferenceInvalidModificationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemLayerReferenceInvalidModificationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldAnalyzerInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Analyzer> Analyzers { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Analyzer> AllowedAnalyzers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldAnalyzerInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldAnalyzerInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Analyzer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Language")]
        Language = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PathHierarchy")]
        PathHierarchy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EdgeNGram")]
        EdgeNGram = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NGram")]
        NGram = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoDiacritics")]
        NoDiacritics = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"KeywordLowercase")]
        KeywordLowercase = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationMultipleTypesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationMultipleTypesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationMultipleTypesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotRequirableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotRequirableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotRequirableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DisplayPatternTypeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayPatternId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayPatternTypeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPatternTypeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldActivityInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldActivityInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldActivityInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldReferencedSchemaChangeNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldReferencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldReferencedSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("newReferencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewReferencedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldReferencedSchemaChangeNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldReferencedSchemaChangeNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldReferencedSchemaSystemSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("referencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferencedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldReferencedSchemaSystemSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldReferencedSchemaSystemSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationRelationTypeIdModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationRelationTypeIdModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationRelationTypeIdModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationTargetDocTypeModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationTargetDocTypeModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationTargetDocTypeModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldIds { get; set; }

        [Newtonsoft.Json.JsonProperty("existingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportRelatedSchemaMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingRelatedSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("existingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingRelatedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportRelatedSchemaMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportRelatedSchemaMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldType { get; set; }

        [Newtonsoft.Json.JsonProperty("existingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldDisplayPatternTypeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedDisplayPatternTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DisplayPatternType> SupportedDisplayPatternTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldDisplayPatternTypeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldDisplayPatternTypeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldMarkdownNotMultilineException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldMarkdownNotMultilineException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldMarkdownNotMultilineException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldDynamicViewFieldInvalidFilterTemplateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldDynamicViewFieldInvalidFilterTemplateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldDynamicViewFieldInvalidFilterTemplateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTreeViewAtLeastOneLevelRequiredException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldTreeViewAtLeastOneLevelRequiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTreeViewAtLeastOneLevelRequiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTreeViewTagboxFieldRequiredException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldTreeViewTagboxFieldRequiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTreeViewTagboxFieldRequiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTreeViewNotSupportedForSchemaTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SchemaType SchemaType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldTreeViewNotSupportedForSchemaTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTreeViewNotSupportedForSchemaTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TagboxInUseInTreeViewFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("tagboxFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagboxFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("treeViewFieldSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TreeViewFieldSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("treeViewFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TreeViewFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TagboxInUseInTreeViewFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagboxInUseInTreeViewFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteContentsWithReferencesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("numberOfReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShares", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfShares { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeleteContentsWithReferencesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteContentsWithReferencesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentMetadataUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedItemsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItemsCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataUpdateManyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateManyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentLayerInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentLayerInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentLayerInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentFileReplaceTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("originalContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType OriginalContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("newContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType NewContentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFileReplaceTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileReplaceTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Bitmap")]
        Bitmap = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VectorGraphic")]
        VectorGraphic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RawImage")]
        RawImage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InterchangeDocument")]
        InterchangeDocument = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WordProcessingDocument")]
        WordProcessingDocument = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TextDocument")]
        TextDocument = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DesktopPublishingDocument")]
        DesktopPublishingDocument = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Presentation")]
        Presentation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Spreadsheet")]
        Spreadsheet = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Archive")]
        Archive = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Audio")]
        Audio = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Video")]
        Video = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Font")]
        Font = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Multimedia")]
        Multimedia = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceCode")]
        SourceCode = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Database")]
        Database = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Cad")]
        Cad = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Model3d")]
        Model3d = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Virtual")]
        Virtual = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentLayerSameRootException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerIdsByRootSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LayerIdsByRootSchema> LayerIdsByRootSchema { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentLayerSameRootException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentLayerSameRootException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerIdsByRootSchema
    {
        [Newtonsoft.Json.JsonProperty("rootSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerIdsByRootSchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerIdsByRootSchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentHistoricVersionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentHistoricVersionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentHistoricVersionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentSchemaChangeException : PictureparkValidationException
    {
        /// <summary>
        /// Content for which a change to RequestedContentSchemaId would cause data loss
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// ContentSchemaId to which the Content would have been changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedContentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedContentSchemaId { get; set; }

        /// <summary>
        /// Layers assigned to this Content which are not allowed for contents of type RequestedContentSchemaId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incompatibleLayerAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IncompatibleLayerAssignments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSchemaChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSchemaChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConcurrentFileReplacementDuringRepairException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedOriginalFileVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExpectedOriginalFileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualOriginalFileVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ActualOriginalFileVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConcurrentFileReplacementDuringRepairException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConcurrentFileReplacementDuringRepairException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentResolveBehaviorNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentResolveBehavior> Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentResolveBehaviorNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentResolveBehaviorNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedListItems")]
        LinkedListItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Metadata")]
        Metadata = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Outputs")]
        Outputs = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueThumbnail")]
        InnerDisplayValueThumbnail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueList")]
        InnerDisplayValueList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueDetail")]
        InnerDisplayValueDetail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueName")]
        InnerDisplayValueName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Permissions")]
        Permissions = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueThumbnail")]
        OuterDisplayValueThumbnail = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueList")]
        OuterDisplayValueList = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueDetail")]
        OuterDisplayValueDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueName")]
        OuterDisplayValueName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoricVersionCount")]
        HistoricVersionCount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFields")]
        DynamicViewFields = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFieldsWithHasItems")]
        DynamicViewFieldsWithHasItems = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DisplayContentOutputs")]
        DisplayContentOutputs = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessEngineRequestException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("engineError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineError { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessEngineRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessEngineRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TooManyBusinessProcessesException : PictureparkTooManyRequestsException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TooManyBusinessProcessesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TooManyBusinessProcessesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDefinitionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionCreateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProcessDefinitionIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDefinitionCreateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionCreateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessNotExternalException : PictureparkForbiddenException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotExternalException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotExternalException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessCancellationNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessCancellationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessCancellationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessContinuationException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("continuationBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationBusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("precedingBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrecedingBusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("precedingBusinessProcessException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PictureparkException PrecedingBusinessProcessException { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessContinuationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessContinuationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessSummaryNotBatchBasedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryNotBatchBasedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryNotBatchBasedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessSummaryNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotTimeoutException : PictureparkTimeoutException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CoreClusterNotProvidedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CoreClusterNotProvidedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoreClusterNotProvidedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CrossClusterRestoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CrossClusterRestoreException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrossClusterRestoreException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotExistingIndicesNotClosedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("existingNotClosedIndicesInCluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ExistingNotClosedIndicesInCluster { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotExistingIndicesNotClosedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotExistingIndicesNotClosedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AddMetadataLanguageTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddMetadataLanguageTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddMetadataLanguageTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessAlreadyRunningException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentProcessType EnvironmentProcessType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessAlreadyRunningException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessAlreadyRunningException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EnvironmentProcessType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AddMetadataLanguage")]
        AddMetadataLanguage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerUpdate")]
        CustomerUpdate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnvironmentUpdate")]
        EnvironmentUpdate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerBoostValuesUpdate")]
        CustomerBoostValuesUpdate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerReshard")]
        CustomerReshard = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessWaitTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("waitedLifecycles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WaitedLifecycles { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessWaitTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessWaitTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerBoostValuesUpdateTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValuesUpdateTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValuesUpdateTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NoTermsOfServiceDefinedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NoTermsOfServiceDefinedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoTermsOfServiceDefinedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AtLeastOneActiveTermsOfServiceMustExistException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AtLeastOneActiveTermsOfServiceMustExistException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AtLeastOneActiveTermsOfServiceMustExistException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ForbiddenHtmlElementsUsedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ForbiddenHtmlElementsUsedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForbiddenHtmlElementsUsedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessStateNotHitException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Expected { get; set; }

        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Actual { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessStateNotHitException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessStateNotHitException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessLifeCycleNotHitException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessProcessLifeCycle> Expected { get; set; }

        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle Actual { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessLifeCycleNotHitException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessLifeCycleNotHitException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OnlyAccessibleToRecipientException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OnlyAccessibleToRecipientException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OnlyAccessibleToRecipientException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotificationNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotAvailableException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotAvailableException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasHeaderMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasHeaderMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasHeaderMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleActionInvalidDocumentTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("allowedDocumentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerDocType> AllowedDocumentTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleActionInvalidDocumentTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleActionInvalidDocumentTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleTriggerDocType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleActionsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleActionsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleActionsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConfigurationValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConfigurationValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConfigurationValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePermissionSetIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePermissionSetIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePermissionSetIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRuleIdDuplicationException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRuleIdDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRuleIdDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRuleIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRuleIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRuleIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTriggerPointMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTriggerPointMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTriggerPointMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRegularExpressionInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("regex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRegularExpressionInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRegularExpressionInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionInvalidTriggerPointException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("allowedDocTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerDocType> AllowedDocTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerAction> AllowedActions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionInvalidTriggerPointException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionInvalidTriggerPointException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleTriggerAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FileReplacement")]
        FileReplacement = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Schedule")]
        Schedule = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRefIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRefIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRefIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePathInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePathInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePathInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleFieldIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFieldIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFieldIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleContentPermissionSetIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleContentPermissionSetIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleContentPermissionSetIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleFieldPathInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFieldPathInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFieldPathInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePolygonInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePolygonInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePolygonInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleArrayIndexInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleArrayIndexInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleArrayIndexInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleDictionaryKeyInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleDictionaryKeyInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleDictionaryKeyInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleProjectionTransformationsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleProjectionTransformationsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleProjectionTransformationsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleInvalidVariableNameException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleInvalidVariableNameException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleInvalidVariableNameException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransformationGroupTransformationsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformationGroupTransformationsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformationGroupTransformationsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransformationGroupInputsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformationGroupInputsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformationGroupInputsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNamedCacheNameInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("cacheName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNamedCacheNameInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNamedCacheNameInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationSizeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("minSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationSizeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationSizeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationMinWordLengthInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("minWordLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinWordLength { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationMinWordLengthInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationMinWordLengthInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationMaxWordLengthInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("maxWordLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxWordLength { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationMaxWordLengthInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationMaxWordLengthInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationInvalidIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationInvalidIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationInvalidIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationNoRecipientsException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationNoRecipientsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationNoRecipientsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationRecipientUserIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationRecipientUserIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationRecipientUserIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationRecipientUserRoleIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationRecipientUserRoleIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationRecipientUserRoleIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNumberSequenceInvalidIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNumberSequenceInvalidIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNumberSequenceInvalidIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNumberSequenceIdDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNumberSequenceIdDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNumberSequenceIdDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleInvalidCronExpressionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleInvalidCronExpressionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleInvalidCronExpressionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleFilterMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleFilterMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleFilterMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleRulesMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleRulesMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleRulesMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleStringContainsConditionValuesToMatchMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleStringContainsConditionValuesToMatchMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleStringContainsConditionValuesToMatchMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleDateMathTransformationTimeSpanInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpan { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleDateMathTransformationTimeSpanInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleDateMathTransformationTimeSpanInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransferOwnershipTransferUserIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransferOwnershipTransferUserIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransferOwnershipTransferUserIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleOutputFormatIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleOutputFormatIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleOutputFormatIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheNameMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheNameMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheNameMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheNameDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheNameDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheNameDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNamedCacheSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNamedCacheSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNamedCacheSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNamedCacheKeyFieldsInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNamedCacheKeyFieldsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNamedCacheKeyFieldsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NoTagsFoundException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NoTagsFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoTagsFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputNotAvailableException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ModelNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ModelNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DisplayValueRerenderingInProgressException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayValueRerenderingInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueRerenderingInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatSourceNotDefinedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSourceNotDefinedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSourceNotDefinedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatRetentionTimeOutOfRangeException : ArgumentRangeException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatRetentionTimeOutOfRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatRetentionTimeOutOfRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileExtensionForFormatException : NotSupportedFileExtensionException
    {
        [Newtonsoft.Json.JsonProperty("formatKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatKind { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileExtensionForFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileExtensionForFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatXmpWritebackNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatXmpWritebackNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatXmpWritebackNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException : OutputFormatXmpWritebackNotSupportedException
    {
        [Newtonsoft.Json.JsonProperty("derivingCopyFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DerivingCopyFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatsInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        [Newtonsoft.Json.JsonProperty("dependentOutputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DependentOutputFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatsInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatsInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatOperationInProgressException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatOperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatOperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StaticOutputFormatModificationNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StaticOutputFormatModificationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaticOutputFormatModificationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OriginalOutputFormatModificationNotSupportedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OriginalOutputFormatModificationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalOutputFormatModificationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatSourceNotValidForRenderingCategoryException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("renderingCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RenderingCategory RenderingCategory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSourceNotValidForRenderingCategoryException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSourceNotValidForRenderingCategoryException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NonDefaultTemplateNameNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonDefaultTemplateNameNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonDefaultTemplateNameNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemTemplateModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemTemplateModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemTemplateModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("duplicatedTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DuplicatedTemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateLanguageCodeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedLanguageCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedLanguageCodes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateLanguageCodeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateLanguageCodeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateMediaTypesMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requiredMediaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredMediaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateMediaTypesMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateMediaTypesMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateMediaTypesNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("unsupportedMediaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UnsupportedMediaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateMediaTypesNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateMediaTypesNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldNotSupported : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldNotSupported FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldNotSupported>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldNotFoundException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingSchemaNotAvailableForFileContentSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingSchemaNotAvailableForFileContentSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingSchemaNotAvailableForFileContentSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingConfigurationInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedConfiguration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingConfigurationInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingConfigurationInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ActivityMappingInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("activityMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityMapping { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ActivityMappingInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityMappingInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsExportNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsExportNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsExportNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public abstract partial class StatisticsFeatureNotEnabledException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsFeatureNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsFeatureNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsReadNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsReadNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsReadNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsWriteNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsWriteNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsWriteNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConversionPresetTemplateNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("conversionPresetTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionPresetTemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentOwnershipFailureException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentOwnershipFailureException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentOwnershipFailureException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyDeletionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyDeletionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyDeletionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyParentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyParentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyParentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyContentMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyContentMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyContentMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class VirtualDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VirtualDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VirtualDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NestedDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SelfReferencingDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SelfReferencingDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SelfReferencingDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConcurrentFileReplacementException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedOriginalFileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpectedOriginalFileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualOriginalFileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActualOriginalFileVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConcurrentFileReplacementException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConcurrentFileReplacementException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentSearchQueryInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSearchQueryInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchQueryInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentSearchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Metadata")]
        Metadata = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FullText")]
        FullText = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataAndFullText")]
        MetadataAndFullText = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerCreationFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerCreationFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerCreationFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerEmptyException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerEmptyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerEmptyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerImportAlreadyInProgressException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerImportAlreadyInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerImportAlreadyInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerImportRequestValidationFailedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, InvalidMetadataException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerImportRequestValidationFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerImportRequestValidationFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileInvalidFileNameOverrideExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedExtension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileInvalidFileNameOverrideExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileInvalidFileNameOverrideExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileAlreadyImportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileAlreadyImportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileAlreadyImportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestUrlInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestUrlInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestUrlInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestDownloadFailedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestDownloadFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestDownloadFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search result from a search for business processes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSearchResult : SearchBehaviorWithAggregationBaseResultOfBusinessProcess
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfBusinessProcess : SearchBehaviorBaseResultOfBusinessProcess
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of an aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationResult
    {
        /// <summary>
        /// Name of the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// When there are lots of unique terms, Elastic Search only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sumOtherDocCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumOtherDocCount { get; set; }

        /// <summary>
        /// Items returned for the aggregation. Each item consists of a bucket with the matched value and the number of matches.
        /// <br/>Optionally inner aggregations for further drill down can be available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResultItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResultItem> AggregationResultItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Aggregation result item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationResultItem
    {
        /// <summary>
        /// Value matched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Number of items matched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }

        /// <summary>
        /// Ready to use filter to filter the data based on the aggregation result values.
        /// <br/>It can be passed as one of the aggregation filters of an aggregation query: it returns documents meeting the aggregation condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationFilter Filter { get; set; }

        /// <summary>
        /// True if the current result item matches on of the aggregation filters sent in the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// Inner aggregation results, if inner aggregations were provided in the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        /// <summary>
        /// Detailed information about the aggregation result item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationResultItemDetailBase Detail { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationResultItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters aggregations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>
        /// The name of the aggregation this filter is connected to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        /// <summary>
        /// The filter to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Autogenerated Guid at request time, for precise aggregation result mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The filters' base class
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AndFilter", typeof(AndFilter))]
    [JsonInheritanceAttribute("OrFilter", typeof(OrFilter))]
    [JsonInheritanceAttribute("NotFilter", typeof(NotFilter))]
    [JsonInheritanceAttribute("DateRangeFilter", typeof(DateRangeFilter))]
    [JsonInheritanceAttribute("ExistsFilter", typeof(ExistsFilter))]
    [JsonInheritanceAttribute("GeoBoundingBoxFilter", typeof(GeoBoundingBoxFilter))]
    [JsonInheritanceAttribute("GeoDistanceFilter", typeof(GeoDistanceFilter))]
    [JsonInheritanceAttribute("NestedFilter", typeof(NestedFilter))]
    [JsonInheritanceAttribute("NumericRangeFilter", typeof(NumericRangeFilter))]
    [JsonInheritanceAttribute("PrefixFilter", typeof(PrefixFilter))]
    [JsonInheritanceAttribute("TermFilter", typeof(TermFilter))]
    [JsonInheritanceAttribute("TermsFilter", typeof(TermsFilter))]
    [JsonInheritanceAttribute("ChildFilter", typeof(ChildFilter))]
    [JsonInheritanceAttribute("ParentFilter", typeof(ParentFilter))]
    [JsonInheritanceAttribute("TreeFilter", typeof(TreeFilter))]
    [JsonInheritanceAttribute("AggregationFilter", typeof(AggregationFilter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FilterBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to put filters in "and"
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>
        /// The filters to put in "and". All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AndFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Put filters in "or"
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>
        /// The filters to put in "or". All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Negates the specified filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>
        /// The filter to be negated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over a range of date time values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The date time range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DateRange Range { get; set; } = new DateRange();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The date time range class used in filters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRange
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A custom dictionary type to distinguish language specific class properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TranslatedStringDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over the existence of a field's value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ExistsFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters geo point values based on a bounding box
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The top left corner of the bounding box's geo location (latitude and longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("topLeft", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation TopLeft { get; set; } = new GeoLocation();

        /// <summary>
        /// The bottom right corner of the bounding box's geo location (latitude and longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bottomRight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation BottomRight { get; set; } = new GeoLocation();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoBoundingBoxFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// It stores geo location information (latitude and longitude)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoLocation
    {
        /// <summary>
        /// The latitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lat { get; set; }

        /// <summary>
        /// The longitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lon { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoLocation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters within the radius of the distance from a location
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The point of origin to calculate the distance from (latitude/longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation Location { get; set; } = new GeoLocation();

        /// <summary>
        /// The distance in meters from the point of origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistanceFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on nested documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>
        /// The path pointing to the nested document (i.e. personLayer.nestedAddress).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        /// <summary>
        /// The filter to be applied on the nested documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over a range of numeric values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The numeric range on which filtering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NumericRange Range { get; set; } = new NumericRange();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The numeric range class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRange
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }

        /// <summary>
        /// The to value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters field's values based on a prefix
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The value to be used as prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prefix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrefixFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters values exactly containing a term
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The value to use to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Term { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters values containing at least one of the terms
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The list of values to be filtered on. At least one must match to return results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Terms { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on child documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>
        /// The type of the child document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ChildType { get; set; }

        /// <summary>
        /// The filter to be applied on the child document. All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChildFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on parent documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>
        /// The type of the parent document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ParentType { get; set; }

        /// <summary>
        /// The filter to be applied on the child document. All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ParentFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters results based on a tree structure and a path.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreeFilter : FilterBase
    {
        /// <summary>
        /// Field to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// Path to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail for an AggregationResultItem.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("TreeAggregationResultItemDetail", typeof(TreeAggregationResultItemDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AggregationResultItemDetailBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationResultItemDetailBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItemDetailBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail for a tree aggregation result item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreeAggregationResultItemDetail : AggregationResultItemDetailBase
    {
        /// <summary>
        /// Path of the item. Use together with TreeFilter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// Resolved path components of the path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedPathComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TreeAggregationResultPathComponent> ResolvedPathComponents { get; set; }

        /// <summary>
        /// Indicates if the node contains children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasChildren", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasChildren { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregationResultItemDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregationResultItemDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Component of a tree path.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreeAggregationResultPathComponent
    {
        /// <summary>
        /// Raw path component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PathComponent { get; set; }

        /// <summary>
        /// Display value of the path component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregationResultPathComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregationResultPathComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfBusinessProcess : BaseResultOfBusinessProcess
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryDebugInformation
    {
        [Newtonsoft.Json.JsonProperty("general", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string General { get; set; }

        [Newtonsoft.Json.JsonProperty("auditTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuditTrail { get; set; }

        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueryDebugInformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryDebugInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfBusinessProcess
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessProcess> Results { get; set; } = new System.Collections.Generic.List<BusinessProcess>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search request to search for business processes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSearchRequest
    {
        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search behaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DropInvalidCharactersOnFailure")]
        DropInvalidCharactersOnFailure = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WildcardOnSingleTerm")]
        WildcardOnSingleTerm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SimplifiedSearch")]
        SimplifiedSearch = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WildcardOnEveryTerm")]
        WildcardOnEveryTerm = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SimplifiedSearchOr")]
        SimplifiedSearchOr = 4,

    }

    /// <summary>
    /// It is the base class for all aggregators.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DateRangeAggregator", typeof(DateRangeAggregator))]
    [JsonInheritanceAttribute("GeoDistanceAggregator", typeof(GeoDistanceAggregator))]
    [JsonInheritanceAttribute("NestedAggregator", typeof(NestedAggregator))]
    [JsonInheritanceAttribute("NumericRangeAggregator", typeof(NumericRangeAggregator))]
    [JsonInheritanceAttribute("TermsAggregator", typeof(TermsAggregator))]
    [JsonInheritanceAttribute("TermsRelationAggregator", typeof(TermsRelationAggregator))]
    [JsonInheritanceAttribute("TermsEnumAggregator", typeof(TermsEnumAggregator))]
    [JsonInheritanceAttribute("TreeAggregator", typeof(TreeAggregator))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AggregatorBase
    {
        /// <summary>
        /// The slug name of the aggregation. It must be unique per aggregation request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Language specific field names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// An optional aggregator list for nested aggregations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// An optional filter to limit the data set the aggregation is operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Optional behavior that the UI should keep in regards to the aggregation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UiAggregatorBehavior UiBehavior { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregatorBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Behavior that the UI should keep in regards to the aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiAggregatorBehavior
    {
        /// <summary>
        /// Filters should be enabled in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableFilter { get; set; }

        /// <summary>
        /// Suggestions should be enabled in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableSuggestions", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSuggestions { get; set; }

        /// <summary>
        /// Search functionality should be enabled in the filters in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableSearchInFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSearchInFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiAggregatorBehavior FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiAggregatorBehavior>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator dedicated for date values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// A list of date time ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DateRangeForAggregator> Ranges { get; set; } = new System.Collections.Generic.List<DateRangeForAggregator>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The date range class used in aggregators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeForAggregator
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeForAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeForAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator that works on geo_point fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The point of origin to calculate the distance from (latitude/longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation Location { get; set; } = new GeoLocation();

        /// <summary>
        /// A list of distance ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GeoDistance> Ranges { get; set; } = new System.Collections.Generic.List<GeoDistance>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistanceAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Stores geo distance information for gei distance aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistance
    {
        /// <summary>
        /// Language specific geo distance names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The distance in meters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistance FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistance>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A special single bucket aggregation that enables aggregating on nested documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedAggregator : AggregatorBase
    {
        /// <summary>
        /// The path pointing to the nested object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// A list of numeric ranges on which aggregate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NumericRangeForAggregator> Ranges { get; set; } = new System.Collections.Generic.List<NumericRangeForAggregator>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The numeric range for aggregator class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeForAggregator
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }

        /// <summary>
        /// The to value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeForAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeForAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket value aggregator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on. Only not analyzed fields are supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// It defines how many term buckets should be returned out of the overall terms list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        /// <summary>
        /// Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Includes { get; set; }

        /// <summary>
        /// Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Excludes { get; set; }

        /// <summary>
        /// Limits the possible returned aggregation values by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchFields { get; set; }

        /// <summary>
        /// Sort settings for the aggregation results. If no sort is specified, aggregation is sorted on the item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortInfo Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sorting information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortInfo
    {
        /// <summary>
        /// The field's ID to sort on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// The sort direction (ascending/descending).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; } = Picturepark.SDK.V1.CloudManager.Contract.SortDirection.Asc;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The sort direction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    /// <summary>
    /// A multi-bucket value aggregator used for aggregations on relation item ids.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        /// <summary>
        /// Type of the item target of the relation. It is used to resolve the target ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsRelationAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TermsRelationAggregatorDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Schema")]
        Schema = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionSet")]
        ContentPermissionSet = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserRole")]
        UserRole = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaPermissionSet")]
        SchemaPermissionSet = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCustomerAlias")]
        IndexCustomerAlias = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCustomerId")]
        IndexCustomerId = 9,

    }

    /// <summary>
    /// A multi-bucket value aggregator used for aggregations on indexed enum values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        /// <summary>
        /// Type of the enum target of the relation. It is used to resolve the enum translation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EnumType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsEnumAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Aggregator for a FieldTreeView.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TreeAggregator : AggregatorBase
    {
        /// <summary>
        /// The fields ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// Path to get buckets for.
        /// <br/>Remark: If this is not null, missing items will only be returned if they're a direct child of this path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// Search string to filter the buckets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// The size parameter can be set to define how many buckets should be returned out of the overall list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        /// <summary>
        /// Sorting for results. If null, sorts by item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection? SortDirection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TreeAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepository
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupEntityType EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("isArchived", Required = Newtonsoft.Json.Required.Always)]
        public bool IsArchived { get; set; }

        [Newtonsoft.Json.JsonProperty("externalMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalMetadata { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepository FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepository>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryCustomerCreateRequest : SnapshotRepositoryBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryCustomerCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryCustomerCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class SnapshotRepositoryBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Expires { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryBaseCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryBaseCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotEnqueueResult
    {
        [Newtonsoft.Json.JsonProperty("tokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotEnqueueResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnqueueResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerCreateRequest : SnapshotBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class SnapshotBaseCreateRequest
    {
        /// <summary>
        /// The SnapshotName. Must be unique.
        /// <br/>The name usually will be enriched with Reason, ContractVersion and DateTime information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        /// <summary>
        /// The Repository in which the snapshot will be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// The Indices being part of the snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Indices { get; set; }

        /// <summary>
        /// Snapshot also if the entity is inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshotInactive", Required = Newtonsoft.Json.Required.Always)]
        public bool SnapshotInactive { get; set; }

        /// <summary>
        /// The snapshot backup reason will be added to the snapshot name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupReason Reason { get; set; }

        /// <summary>
        /// Timestamp when creating the request (utc). If there is a more recent snapshot in the repository, it will keep/return the latest one,
        /// <br/>instead of creating a new one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Time at which the repository becomes eligible for cleanup
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Expires { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotBaseCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotBaseCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deletion")]
        Deletion = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerAllClustersRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotInactive", Required = Newtonsoft.Json.Required.Always)]
        public bool SnapshotInactive { get; set; } = true;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerAllClustersRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerAllClustersRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerAllClustersResult
    {
        [Newtonsoft.Json.JsonProperty("repositoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("indicesByClusters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> IndicesByClusters { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? Duration { get; set; }

        /// <summary>
        /// Only populated when all snapshots have finished
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("tokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerAllClustersResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerAllClustersResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerExportResult
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerExportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerExportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerExportRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("keepRepository", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepRepository { get; set; }

        [Newtonsoft.Json.JsonProperty("excludeSecondaryIndices", Required = Newtonsoft.Json.Required.Always)]
        public bool ExcludeSecondaryIndices { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerExportRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerExportRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRestore
    {
        [Newtonsoft.Json.JsonProperty("restoreDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime RestoreDate { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Indices { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRestore FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRestore>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerRestoreRequest : SnapshotBaseRestoreRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("resetServiceProviders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResetServiceProviders { get; set; }

        [Newtonsoft.Json.JsonProperty("skipUpdateAfterRestore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SkipUpdateAfterRestore { get; set; }

        /// <summary>
        /// Defines whether secondary indices which are missing for customer are filled or left empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refillRecreatedSecondaryIndices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RefillRecreatedSecondaryIndices { get; set; } = true;

        /// <summary>
        /// Defines where searchIndices are recreated if they did not exist (not part of restored snapshot, for example)
        /// <br/>If null, searchIndices will be recreated on the cluster they were on when the snapshot was taken (or, if that cluster does not exist, on the default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recreateSearchIndicesCluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecreateSearchIndicesCluster { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerRestoreRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerRestoreRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class SnapshotBaseRestoreRequest
    {
        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotBaseRestoreRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotBaseRestoreRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestoreSnapshotIndices
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, SnapshotRestore> Result { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RestoreSnapshotIndices FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestoreSnapshotIndices>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestoreSnapshotIndicesRequest : SnapshotBaseRestoreRequest
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("clusters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Clusters { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RestoreSnapshotIndicesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestoreSnapshotIndicesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerCloneRequest
    {
        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceCustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceCustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("corsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorsAllowedHosts { get; set; }

        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfigurationWriteRequest HostConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDeliveryBaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDeliveryBaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("redirectUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUri { get; set; }

        [Newtonsoft.Json.JsonProperty("anonymize", Required = Newtonsoft.Json.Required.Always)]
        public bool Anonymize { get; set; }

        [Newtonsoft.Json.JsonProperty("adminUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User AdminUser { get; set; }

        [Newtonsoft.Json.JsonProperty("adminUserPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminUserPassword { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerCloneRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCloneRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerHostConfigurationWriteRequest
    {
        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfigurationEditable HostConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("configureCustomCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TlsSecretWriteRequest ConfigureCustomCertificates { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostConfigurationWriteRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostConfigurationWriteRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerHostConfigurationEditable
    {
        [Newtonsoft.Json.JsonProperty("frontend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, HostConfiguration> Frontend { get; set; }

        [Newtonsoft.Json.JsonProperty("api", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, HostConfiguration> Api { get; set; }

        [Newtonsoft.Json.JsonProperty("delivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, HostConfiguration> Delivery { get; set; }

        [Newtonsoft.Json.JsonProperty("integrationSubDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntegrationSubDomain { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostConfigurationEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostConfigurationEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostConfiguration
    {
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("certificateConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HostCertificateConfiguration CertificateConfiguration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HostConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("IssuerCertificate", typeof(IssuerCertificate))]
    [JsonInheritanceAttribute("DefaultPlatformCertificate", typeof(DefaultPlatformCertificate))]
    [JsonInheritanceAttribute("CertificateReference", typeof(CertificateReference))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class HostCertificateConfiguration
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HostCertificateConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostCertificateConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerCertificate : HostCertificateConfiguration
    {
        [Newtonsoft.Json.JsonProperty("issuerNameOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuerNameOverride { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuerCertificate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuerCertificate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultPlatformCertificate : HostCertificateConfiguration
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultPlatformCertificate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultPlatformCertificate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateReference : HostCertificateConfiguration
    {
        [Newtonsoft.Json.JsonProperty("certificateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CertificateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CertificateReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CertificateReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TlsSecretWriteRequest
    {
        [Newtonsoft.Json.JsonProperty("commands", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TlsSecretCommandBase> Commands { get; set; } = new System.Collections.Generic.List<TlsSecretCommandBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TlsSecretWriteRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TlsSecretWriteRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("TlsSecretPutCommand", typeof(TlsSecretPutCommand))]
    [JsonInheritanceAttribute("TlsSecretDeleteCommand", typeof(TlsSecretDeleteCommand))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class TlsSecretCommandBase
    {
        /// <summary>
        /// Certificate to mutate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CertificateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TlsSecretCommandBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TlsSecretCommandBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TlsSecretPutCommand : TlsSecretCommandBase
    {
        /// <summary>
        /// Data to use when creating or updating the certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TlsCertificate Certificate { get; set; } = new TlsCertificate();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TlsSecretPutCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TlsSecretPutCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TlsCertificate
    {
        [Newtonsoft.Json.JsonProperty("crt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Crt { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TlsCertificate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TlsCertificate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TlsSecretDeleteCommand : TlsSecretCommandBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TlsSecretDeleteCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TlsSecretDeleteCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// User's Picturepark ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// User's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the user (doubles as username).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Marks a user that was deleted from the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeleted { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("customerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomerHosts { get; set; }

        [Newtonsoft.Json.JsonProperty("mainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("storageSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageSiloName { get; set; }

        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseInformation LicenseInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Customer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Customer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Lifecycle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LifeCycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseInformation
    {
        /// <summary>
        /// Backup option for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backupOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicenseBackupOption BackupOption { get; set; }

        /// <summary>
        /// Subscription for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicenseSubscription Subscription { get; set; }

        /// <summary>
        /// State of content historic versioning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historicVersioningState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HistoricVersioningState HistoricVersioningState { get; set; }

        /// <summary>
        /// State of statistics features for Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatisticsLicenseState ContentStatistics { get; set; }

        /// <summary>
        /// Image optimization licensing options
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageOptimization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageOptimizationLicenseState ImageOptimization { get; set; }

        /// <summary>
        /// License flag to enable tree view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTreeView", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTreeView { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LicenseInformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// License backup option
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseBackupOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SuisseSafe")]
        SuisseSafe = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SuisseAzureArchiveStorage")]
        SuisseAzureArchiveStorage = 2,

    }

    /// <summary>
    /// License subscription
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseSubscription
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium")]
        Premium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enterprise")]
        Enterprise = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HistoricVersioningState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticsLicenseState
    {
        /// <summary>
        /// Defines whether the respective statistics are gathered periodically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Always)]
        public bool Collection { get; set; }

        /// <summary>
        /// Allows or prevents access to read endpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty("read", Required = Newtonsoft.Json.Required.Always)]
        public bool Read { get; set; }

        /// <summary>
        /// Allows or prevents access to write endpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty("write", Required = Newtonsoft.Json.Required.Always)]
        public bool Write { get; set; }

        /// <summary>
        /// Allows or prevents export of the respective statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export", Required = Newtonsoft.Json.Required.Always)]
        public bool Export { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsLicenseState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsLicenseState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageOptimizationLicenseState
    {
        /// <summary>
        /// Whether image optimization can be used when delivering embeds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embedDelivery", Required = Newtonsoft.Json.Required.Always)]
        public bool EmbedDelivery { get; set; }

        /// <summary>
        /// Whether edit output endpoint is available in API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiOutputEditing", Required = Newtonsoft.Json.Required.Always)]
        public bool ApiOutputEditing { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageOptimizationLicenseState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageOptimizationLicenseState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to import the ElasticSearch repository of a customer from another cloud
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerImportRequest
    {
        /// <summary>
        /// The customer id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Name of the ElasticSearch repository
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// Name of the snapshot within the ElasticSearch repository if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }

        /// <summary>
        /// Set to true if the customer was configured against another IDS instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetExternalUserIds", Required = Newtonsoft.Json.Required.Always)]
        public bool ResetExternalUserIds { get; set; }

        /// <summary>
        /// Set to true if the customer was configured against another IDS instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetIdentityProviderIds", Required = Newtonsoft.Json.Required.Always)]
        public bool ResetIdentityProviderIds { get; set; }

        /// <summary>
        /// Provide email address of an admin user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminUserEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminUserEmail { get; set; }

        /// <summary>
        /// Provide password for the admin user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminUserPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminUserPassword { get; set; }

        /// <summary>
        /// Reset service providers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetServiceProviders", Required = Newtonsoft.Json.Required.Always)]
        public bool ResetServiceProviders { get; set; }

        /// <summary>
        /// Base url for customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// ContentDelivery Base url for shares
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentDeliveryBaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDeliveryBaseUrl { get; set; }

        /// <summary>
        /// Host configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfigurationCreation HostConfiguration { get; set; }

        /// <summary>
        /// List of CORS allowed hosts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorsAllowedHosts { get; set; }

        /// <summary>
        /// Defines whether secondary indices which are missing for customer are filled or left empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refillRecreatedSecondaryIndices", Required = Newtonsoft.Json.Required.Always)]
        public bool RefillRecreatedSecondaryIndices { get; set; } = true;

        /// <summary>
        /// Defines where searchIndices are recreated if they did not exist (not part of restored snapshot, for example)
        /// <br/>If null, searchIndices will be recreated on the cluster they were on when the snapshot was taken (or, if that cluster does not exist, on the default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recreateSearchIndicesCluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecreateSearchIndicesCluster { get; set; }

        /// <summary>
        /// Name of the storage silo where customer's files are located. Must be configured in cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageSiloName { get; set; }

        /// <summary>
        /// Optional name of the storage silo where customer's content backup is written to. Must be configured in cloud.
        /// <br/>If not set, default configured in cloud will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentBackupStorageSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentBackupStorageSiloName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerImportRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerImportRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerHostConfigurationCreation : CustomerHostConfigurationEditable
    {
        [Newtonsoft.Json.JsonProperty("certificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, TlsCertificate> Certificates { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostConfigurationCreation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostConfigurationCreation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request used to import customer from another sub-cloud
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerImportAllClustersRequest : CustomerImportRequest
    {
        /// <summary>
        /// Collection of clusters for which the restore and import should be performed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Clusters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerImportAllClustersRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerImportAllClustersRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryEnvironmentCreateRequest : SnapshotRepositoryBaseCreateRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryEnvironmentCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryEnvironmentCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotEnvironmentCreateRequest : SnapshotBaseCreateRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotEnvironmentCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotEnvironmentSearchResult : BaseResultOfSnapshot
    {
        /// <summary>
        /// List of repositories that were used in the repositories filter, but were not found in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingRepositories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MissingRepositories { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotEnvironmentSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfSnapshot
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Snapshot> Results { get; set; } = new System.Collections.Generic.List<Snapshot>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfSnapshot FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfSnapshot>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Snapshot
    {
        /// <summary>
        /// The snapshot creation DurationInMilliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long DurationInMilliseconds { get; set; }

        /// <summary>
        /// The snapshot EndTime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndTime { get; set; }

        /// <summary>
        /// The snapshot EndTimeInMilliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTimeInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long EndTimeInMilliseconds { get; set; }

        /// <summary>
        /// The snapshot elastic search shard failures.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SnapshotShardFailure> Failures { get; set; }

        /// <summary>
        /// The snapshot Indices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Indices { get; set; }

        /// <summary>
        /// The snapshot Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The repository name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// The repository start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RepositoryStartTime { get; set; }

        /// <summary>
        /// The repository expiration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryExpiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RepositoryExpiry { get; set; }

        /// <summary>
        /// Is the repository already archived?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repositoryIsArchived", Required = Newtonsoft.Json.Required.Always)]
        public bool RepositoryIsArchived { get; set; }

        /// <summary>
        /// The snapshot StartTime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// The snapshot StartTimeInMilliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTimeInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long StartTimeInMilliseconds { get; set; }

        /// <summary>
        /// The snapshot State.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupEntityType EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("restoreDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime RestoreDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Snapshot FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Snapshot>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotShardFailure
    {
        /// <summary>
        /// The Index having the shard failure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }

        /// <summary>
        /// The elastic search NodeId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeId { get; set; }

        /// <summary>
        /// The elastic serach shard failure Reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        /// <summary>
        /// The failing elastic search ShardId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShardId { get; set; }

        /// <summary>
        /// The snapshot failure status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotShardFailure FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotShardFailure>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotEnvironmentSearchRequest
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RepositoryNames { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotEnvironmentSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerSearchResult : BaseResultOfSnapshot
    {
        /// <summary>
        /// List of repositories that were used in the repositories filter, but were not found in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingRepositories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MissingRepositories { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotCustomerSearchRequest
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RepositoryNames { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Limits the returned snapshots to the ones containing data of the specified type (customer, export or history). This search criteria is applied only if no repository name
        /// <br/>is specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshotDataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SnapshotDataType? SnapshotDataType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotCustomerSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of data that have been snapshot
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SnapshotDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"History")]
        History = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Export")]
        Export = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositorySearchResult
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SnapshotRepository> Results { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositorySearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositorySearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryCustomerSearchRequest
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        /// <summary>
        /// Limits the returned snapshot repositories to the ones containing customer, history or export backups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshotDataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SnapshotDataType? SnapshotDataType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryCustomerSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryCustomerSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryEnvironmentSearchRequest
    {
        [Newtonsoft.Json.JsonProperty("environmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryEnvironmentSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryEnvironmentSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryCleanupResult
    {
        [Newtonsoft.Json.JsonProperty("repositories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Repositories { get; set; }

        [Newtonsoft.Json.JsonProperty("cleanupTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CleanupTime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryCleanupResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryCleanupResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryArchiveRequest
    {
        [Newtonsoft.Json.JsonProperty("isArchived", Required = Newtonsoft.Json.Required.Always)]
        public bool IsArchived { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryArchiveRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryArchiveRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositoryMetadataUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositoryMetadataUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryMetadataUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotRepositorySearchByNameRequest
    {
        [Newtonsoft.Json.JsonProperty("repositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRepositorySearchByNameRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositorySearchByNameRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GlobalSnapshotRepositoryStateResult
    {
        /// <summary>
        /// Indicates if a Snapshot operation is currently in progress
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backupInProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool BackupInProgress { get; set; }

        /// <summary>
        /// If no snapshot in progress, this version should be re-checked after
        /// <br/>performing read operations on Snapshot-Repositories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backupVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackupVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GlobalSnapshotRepositoryStateResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalSnapshotRepositoryStateResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of logo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogoKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Background")]
        Background = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Small")]
        Small = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }

        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDeliveryBaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDeliveryBaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfigurationCreation HostConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("enableQueryDetails", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableQueryDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("cdnConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdnConfigurationBase CdnConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("taggingConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaggingConfigurationBase TaggingConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("supportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("readWriteUserExcludedEmailAddressRegexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReadWriteUserExcludedEmailAddressRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerServiceProvider> ServiceProviders { get; set; }

        [Newtonsoft.Json.JsonProperty("corsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorsAllowedHosts { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }

        /// <summary>
        /// Specify ES cluster for ContentSearch index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexClusterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootContentSearchIndexClusterName { get; set; }

        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootContentSearchIndexNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootContentSearchIndexNumberOfReplicas { get; set; }

        /// <summary>
        /// Specify ES cluster for ListItemSearch index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexClusterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootListItemSearchIndexClusterName { get; set; }

        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootListItemSearchIndexNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootListItemSearchIndexNumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int SortableFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("noReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("languageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfiguration LanguageConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StaticOutputFormat> OutputFormats { get; set; }

        [Newtonsoft.Json.JsonProperty("contentRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ContentRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ListItemRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("userRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan UserRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerTokenRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan OwnerTokenRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("successfulTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SuccessfulTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("incompleteTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan IncompleteTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("rollingIndexCreationScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan RollingIndexCreationScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHistoryRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan DocumentHistoryRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStreamRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan LiveStreamRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("importCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ImportCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("editCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan EditCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEventCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan NotificationEventCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("useSsl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public bool? UseSsl { get; set; }

        [Newtonsoft.Json.JsonProperty("replacedOriginalsRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ReplacedOriginalsRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SnapshotEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotFullbackupScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotFullbackupScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("adminUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User AdminUser { get; set; }

        [Newtonsoft.Json.JsonProperty("adminUserPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminUserPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("contentBackupState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete("ContentBackup functionality has been removed")]
        public ContentBackupState? ContentBackupState { get; set; }

        [Newtonsoft.Json.JsonProperty("apiLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReadWriteApiLimits ApiLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("apiClientLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ReadWriteApiLimits> ApiClientLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("boostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> BoostValues { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationEmailNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationEmailNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultUserRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("skipSignUpCaptcha", Required = Newtonsoft.Json.Required.Always)]
        public bool SkipSignUpCaptcha { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseInformation LicenseInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("idsAccentColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdsAccentColor { get; set; }

        [Newtonsoft.Json.JsonProperty("storageSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageSiloName { get; set; }

        [Newtonsoft.Json.JsonProperty("contentBackupSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentBackupSiloName { get; set; }

        [Newtonsoft.Json.JsonProperty("bffDevMode", Required = Newtonsoft.Json.Required.Always)]
        public bool BffDevMode { get; set; }

        [Newtonsoft.Json.JsonProperty("disableIdsRegisterLink", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableIdsRegisterLink { get; set; }

        [Newtonsoft.Json.JsonProperty("customerSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSettingsUpdateRequest CustomerSettings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FastlyCdnConfiguration", typeof(FastlyCdnConfiguration))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CdnConfigurationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CdnConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CdnConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FastlyCdnConfiguration : CdnConfigurationBase
    {
        [Newtonsoft.Json.JsonProperty("apiToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiToken { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("servingStaleContentEnabledOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServingStaleContentEnabledOverride { get; set; }

        [Newtonsoft.Json.JsonProperty("timeToServingStaleContentOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? TimeToServingStaleContentOverride { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAgeOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? MaxAgeOverride { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FastlyCdnConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FastlyCdnConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ClarifaiTaggingConfiguration", typeof(ClarifaiTaggingConfiguration))]
    [JsonInheritanceAttribute("SimulatedTaggingConfiguration", typeof(SimulatedTaggingConfiguration))]
    [JsonInheritanceAttribute("AzureTaggingConfiguration", typeof(AzureTaggingConfiguration))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class TaggingConfigurationBase
    {
        [Newtonsoft.Json.JsonProperty("enableImageAnalytics", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableImageAnalytics { get; set; }

        [Newtonsoft.Json.JsonProperty("enableLegacyTaggingBehavior", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableLegacyTaggingBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultTagOutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTagOutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultKeywordLookupCacheName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultKeywordLookupCacheName { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultTaggingLayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTaggingLayerId { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultFoundTagsFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultFoundTagsFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultMissingKeywordsFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultMissingKeywordsFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("useDownloadLink", Required = Newtonsoft.Json.Required.Always)]
        public bool UseDownloadLink { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaggingConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaggingConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClarifaiTaggingConfiguration : TaggingConfigurationBase
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("appId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppId { get; set; }

        [Newtonsoft.Json.JsonProperty("apiToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiToken { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultModel { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultLanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultMinimumValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DefaultMinimumValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClarifaiTaggingConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClarifaiTaggingConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimulatedTaggingConfiguration : TaggingConfigurationBase
    {
        [Newtonsoft.Json.JsonProperty("defaultNumberOfKeywords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultNumberOfKeywords { get; set; }

        [Newtonsoft.Json.JsonProperty("enableOcr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableOcr { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimulatedTaggingConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulatedTaggingConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Options for Azure tagging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureTaggingConfiguration : TaggingConfigurationBase
    {
        /// <summary>
        /// Url to Azure Computer Vision Service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiUrl { get; set; }

        /// <summary>
        /// API Key to Azure Computer Vision Service (needed for connection)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Determines the language, list of supported language codes: https://aka.ms/cv-languages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Minimum value of confidence to accept the service result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MinimumValue { get; set; }

        /// <summary>
        /// Specifies if tagging feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTagging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTagging { get; set; }

        /// <summary>
        /// Specifies if object detection feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableObjectDetection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableObjectDetection { get; set; }

        /// <summary>
        /// Specifies if OCR feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableOcr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableOcr { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AzureTaggingConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureTaggingConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerServiceProvider
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Scopes { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerAllowedMessage> AllowedMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerAllowedCommand> AllowedCommands { get; set; }

        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerServiceProvider FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProvider>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerAllowedMessage
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAllowedMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerAllowedCommand
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAllowedCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageConfiguration
    {
        /// <summary>
        /// A list of languages serving as system languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemLanguages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> SystemLanguages { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// A list of languages serving as metadata languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataLanguages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MetadataLanguages { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// The default language. Not the be confused with the metadata fallback language x-default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLanguage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DefaultLanguage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a static output format used in cloud manager.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StaticOutputFormat : StaticOutputFormatEditable
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Will be removed in future versions")]
        public bool System { get; set; }

        [Newtonsoft.Json.JsonProperty("dynamic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dynamic { get; set; }

        [Newtonsoft.Json.JsonProperty("dataExtraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Will be removed in future versions")]
        public bool DataExtraction { get; set; }

        [Newtonsoft.Json.JsonProperty("temporary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Temporary { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StaticOutputFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaticOutputFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StaticOutputFormatEditable : OutputFormatEditable
    {
        [Newtonsoft.Json.JsonProperty("storageAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatStorageAttributes StorageAttributes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StaticOutputFormatEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaticOutputFormatEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatStorageAttributes
    {
        [Newtonsoft.Json.JsonProperty("azure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AzureStorageAttributes Azure { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatStorageAttributes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatStorageAttributes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureStorageAttributes
    {
        [Newtonsoft.Json.JsonProperty("accessTierPhases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AzureStorageAccessTierPhase> AccessTierPhases { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AzureStorageAttributes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureStorageAttributes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureStorageAccessTierPhase
    {
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AzureStorageAccessTier Tier { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? Duration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AzureStorageAccessTierPhase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureStorageAccessTierPhase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AzureStorageAccessTier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Hot")]
        Hot = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cool")]
        Cool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cold")]
        Cold = 2,

    }

    /// <summary>
    /// Represents the editable part of the output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatEditable : OutputFormatRenderingSpecification
    {
        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// How long should the dynamic outputs created from this format be kept.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan RetentionTime { get; set; }

        /// <summary>
        /// Optional patterns (liquid syntax) that produce the filename for item of this output format.
        /// <br/>If set, the customer's default language is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadFileNamePatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DownloadFileNamePatterns { get; set; }

        /// <summary>
        /// Indicates if outputs of this format should be accessible for users not having AccessOriginal permission on the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ViewForAll { get; set; }

        /// <summary>
        /// Indicates if metadata should be written into XMP header of outputs where applicable and configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableXmpWriteback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableXmpWriteback { get; set; }

        /// <summary>
        /// Defines additional settings for XmpWriteback
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmpWritebackOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpWritebackOptions XmpWritebackOptions { get; set; }

        /// <summary>
        /// Defines how the OutputFormat should behave for certain features (Download, Sharing, Media editing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatBehaviors Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines additional settings for XmpWriteback
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpWritebackOptions
    {
        /// <summary>
        /// Defines how data from XmpMappings interacts with unaltered Xmp data contained in originally uploaded file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mergeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public XmpWritebackMergeMode MergeMode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpWritebackOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpWritebackOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines how data from XmpMappings interacts with unaltered Xmp data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum XmpWritebackMergeMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MappingOnly")]
        MappingOnly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MergeWithOriginal")]
        MergeWithOriginal = 1,

    }

    /// <summary>
    /// Behaviors of OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatBehaviors
    {
        /// <summary>
        /// Behavior for DownloadDialog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadDialogBehavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DownloadDialogBehavior DownloadDialogBehavior { get; set; }

        /// <summary>
        /// Behavior when sharing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareOutputAccessBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatShareOutputAccessBehaviors ShareOutputAccessBehaviors { get; set; }

        /// <summary>
        /// Behavior for media editor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaEditorBehavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaEditorBehavior MediaEditorBehavior { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatBehaviors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatBehaviors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines behavior of an OutputFormat in DownloadDialog
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DownloadDialogBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ShowAlways")]
        ShowAlways = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShowMoreFormats")]
        ShowMoreFormats = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hide")]
        Hide = 2,

    }

    /// <summary>
    /// Behavior when sharing for OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatShareOutputAccessBehaviors
    {
        /// <summary>
        /// Behavior when sharing with Full.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("full", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccessBehavior Full { get; set; }

        /// <summary>
        /// Behavior when sharing with Preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccessBehavior Preview { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatShareOutputAccessBehaviors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatShareOutputAccessBehaviors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines behavior of OutputFormat in ShareAccess
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputAccessBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Include")]
        Include = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Exclude")]
        Exclude = 1,

    }

    /// <summary>
    /// Defines behavior of OutputFormat in Media editor
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaEditorBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Show")]
        Show = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hide")]
        Hide = 1,

    }

    /// <summary>
    /// Used to specify how to render derived outputs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatRenderingSpecification
    {
        /// <summary>
        /// Which output format should be used as a source of data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOutputFormats SourceOutputFormats { get; set; }

        /// <summary>
        /// Information about the technical format of the data, e.g. JPEG, AAC or video still.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatBase Format { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatRenderingSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatRenderingSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines the source used for rendering an OutputFormat depending on the type of content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceOutputFormats
    {
        /// <summary>
        /// The source to be used for content of type Image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// The source to be used for content of type Video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Video { get; set; }

        /// <summary>
        /// The source to be used for content of type Document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }

        /// <summary>
        /// The source to be used for content of type Audio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audio { get; set; }

        /// <summary>
        /// The source to be used for content of type Vector
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vector { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SourceOutputFormats FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SourceOutputFormats>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OriginalFormat", typeof(OriginalFormat))]
    [JsonInheritanceAttribute("CopyFormat", typeof(CopyFormat))]
    [JsonInheritanceAttribute("JpegFormat", typeof(JpegFormat))]
    [JsonInheritanceAttribute("PngFormat", typeof(PngFormat))]
    [JsonInheritanceAttribute("TiffFormat", typeof(TiffFormat))]
    [JsonInheritanceAttribute("WebPFormat", typeof(WebPFormat))]
    [JsonInheritanceAttribute("AvifFormat", typeof(AvifFormat))]
    [JsonInheritanceAttribute("Mp4VideoFormat", typeof(Mp4VideoFormat))]
    [JsonInheritanceAttribute("VideoSpriteFormat", typeof(VideoSpriteFormat))]
    [JsonInheritanceAttribute("VideoStillFormat", typeof(VideoStillFormat))]
    [JsonInheritanceAttribute("AacAudioFormat", typeof(AacAudioFormat))]
    [JsonInheritanceAttribute("AudioStillFormat", typeof(AudioStillFormat))]
    [JsonInheritanceAttribute("Mp3AudioFormat", typeof(Mp3AudioFormat))]
    [JsonInheritanceAttribute("DocumentStillFormat", typeof(DocumentStillFormat))]
    [JsonInheritanceAttribute("PdfFormat", typeof(PdfFormat))]
    [JsonInheritanceAttribute("SvgFormat", typeof(SvgFormat))]
    [JsonInheritanceAttribute("VectorStillFormat", typeof(VectorStillFormat))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FormatWithFixedExtensionBase : FormatBase
    {
        /// <summary>
        /// The filename extension of the file produced by this Format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatWithFixedExtensionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatWithFixedExtensionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Special format that represents the original.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginalFormat : FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OriginalFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A format that, when rendered, simply copies the source file. Primarily intended for use with XmpWriteback.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CopyFormat : FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CopyFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CopyFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for ImageFormats such as JPEG, PNG, TIFF, ...
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ImageFormatBase : FormatWithFixedExtensionBase
    {
        /// <summary>
        /// Color profile to use. Colorspace is derived from the chosen profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorProfile? ColorProfile { get; set; }

        /// <summary>
        /// The method of conversion for color spaces (e.g. CMYK to RGB). Further information can be found here: http://www.colourphil.co.uk/rendering_intents.shtml
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorTransformationIntent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorTransformationIntent ColorTransformationIntent { get; set; }

        /// <summary>
        /// Horizontal resolution in dpi (dots per inch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? HorizontalResolution { get; set; }

        /// <summary>
        /// Vertical resolution in dpi (dots per inch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? VerticalResolution { get; set; }

        /// <summary>
        /// Copy clipping paths from input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keepClippingPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool KeepClippingPath { get; set; }

        /// <summary>
        /// Allows resizing of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        /// <summary>
        /// A collection of actions to be applied during rendering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ImageActionBase> Actions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Available color profiles
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorProfile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AdobeRgb1998")]
        AdobeRgb1998 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AppleRgb")]
        AppleRgb = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ColorMatchRgb")]
        ColorMatchRgb = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EciRgbV1")]
        EciRgbV1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EciRgbV2")]
        EciRgbV2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Srgb")]
        Srgb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SrgbColorSpaceProfile")]
        SrgbColorSpaceProfile = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EuropeIsoCoatedFogra27")]
        EuropeIsoCoatedFogra27 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EuroscaleCoated")]
        EuroscaleCoated = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EuroscaleUncoated")]
        EuroscaleUncoated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoated")]
        IsoCoated = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoatedEciV2")]
        IsoCoatedEciV2 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2001Coated")]
        JapanColor2001Coated = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2001Uncoated")]
        JapanColor2001Uncoated = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2002Newspaper")]
        JapanColor2002Newspaper = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanWebCoated")]
        JapanWebCoated = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"UsSheetfedCoated")]
        UsSheetfedCoated = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UsSheetfedUncoated")]
        UsSheetfedUncoated = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UsWebCoatedSwop")]
        UsWebCoatedSwop = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UsWebUncoated")]
        UsWebUncoated = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoatedV2Grey1cBas")]
        IsoCoatedV2Grey1cBas = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoated300EciV2")]
        IsoCoated300EciV2 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CoatedFogra27")]
        CoatedFogra27 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CoatedFogra39")]
        CoatedFogra39 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UncoatedFogra29")]
        UncoatedFogra29 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedFogra28")]
        WebCoatedFogra28 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedSwop2006Grade3")]
        WebCoatedSwop2006Grade3 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedSwop2006Grade5")]
        WebCoatedSwop2006Grade5 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Isonewspaper26v4")]
        Isonewspaper26v4 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Isonewspaper26v4Grey")]
        Isonewspaper26v4Grey = 29,

    }

    /// <summary>
    /// http://www.colourphil.co.uk/rendering_intents.shtml
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorTransformationIntent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RelativeColorimetricBpc")]
        RelativeColorimetricBpc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AbsoluteColorimetric")]
        AbsoluteColorimetric = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Perceptual")]
        Perceptual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RelativeColorimetric")]
        RelativeColorimetric = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Saturation")]
        Saturation = 4,

    }

    /// <summary>
    /// Specifies image resize parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResizeAction
    {
        /// <summary>
        /// Target width for the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        /// <summary>
        /// Target height for the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// Specifies additional resize behaviour.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResizeMode ResizeMode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResizeAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies how the dimensions of a ResizeAction are applied to the content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResizeMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fit")]
        Fit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Shrink")]
        Shrink = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resize")]
        Resize = 2,

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AlphaHandlingAction", typeof(AlphaHandlingAction))]
    [JsonInheritanceAttribute("CropActionGeneric", typeof(CropActionGeneric))]
    [JsonInheritanceAttribute("CropAction", typeof(CropAction))]
    [JsonInheritanceAttribute("GravityBasedCropAction", typeof(GravityBasedCropAction))]
    [JsonInheritanceAttribute("RelativeCropAction", typeof(RelativeCropAction))]
    [JsonInheritanceAttribute("UnsharpenMaskAction", typeof(UnsharpenMaskAction))]
    [JsonInheritanceAttribute("WatermarkAction", typeof(WatermarkAction))]
    [JsonInheritanceAttribute("RotateAction", typeof(RotateAction))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ImageActionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageActionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageActionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows different forms of modifying alpha information in an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlphaHandlingAction : ImageActionBase
    {
        /// <summary>
        /// Specifies the kind of alpha handling to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alphaHandling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlphaHandling AlphaHandling { get; set; }

        /// <summary>
        /// Specifies potentially needed color information for alpha handling. Must be given in RGB hex format (8 bit per channel).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replacementRgbColorHexCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementRgbColorHexCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlphaHandlingAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaHandlingAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies the kind of AlphaHandling to be applied to an image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlphaHandling
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DiscardAlpha")]
        DiscardAlpha = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplaceAlpha")]
        ReplaceAlpha = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplaceInvertedAlpha")]
        ReplaceInvertedAlpha = 2,

    }

    /// <summary>
    /// Parameters for cropping actions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropActionGeneric : ImageActionBase
    {
        /// <summary>
        /// Defines position of cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CropPositionBase Position { get; set; }

        /// <summary>
        /// Defines size of cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CropSizeBase Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropActionGeneric FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropActionGeneric>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines position of cropping rectangle.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CropOriginAbsolute", typeof(CropOriginAbsolute))]
    [JsonInheritanceAttribute("CropCenterRelative", typeof(CropCenterRelative))]
    [JsonInheritanceAttribute("CropPositionGravity", typeof(CropPositionGravity))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropPositionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropPositionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropPositionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropOriginAbsolute : CropPositionBase
    {
        /// <summary>
        /// X-Coordinate of top left point of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int X { get; set; }

        /// <summary>
        /// Y-Coordinate of top left point of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropOriginAbsolute FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropOriginAbsolute>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropCenterRelative : CropPositionBase
    {
        /// <summary>
        /// Relative horizontal position of center for crop. 0.5 designates the center of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float X { get; set; }

        /// <summary>
        /// Relative vertical position of center for crop. 0.5 designates the center of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropCenterRelative FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropCenterRelative>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropPositionGravity : CropPositionBase
    {
        /// <summary>
        /// Gravity of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gravity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropGravity Gravity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropPositionGravity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropPositionGravity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CropGravity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NorthWest")]
        NorthWest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"North")]
        North = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NorthEast")]
        NorthEast = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"East")]
        East = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SouthEast")]
        SouthEast = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"South")]
        South = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SouthWest")]
        SouthWest = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"West")]
        West = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Center")]
        Center = 8,

    }

    /// <summary>
    /// Defines size of cropping rectangle.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CropSizeAbsolute", typeof(CropSizeAbsolute))]
    [JsonInheritanceAttribute("CropSizeRelative", typeof(CropSizeRelative))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropSizeBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropSizeAbsolute : CropSizeBase
    {
        /// <summary>
        /// Width of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Height of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeAbsolute FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeAbsolute>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropSizeRelative : CropSizeBase
    {
        /// <summary>
        /// Width of the cropping rectangle in range [0, 1].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Width { get; set; }

        /// <summary>
        /// Height of the cropping rectangle in range [0, 1].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Height { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeRelative FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeRelative>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropActionAbsoluteSizeBase : CropActionGeneric
    {
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropActionAbsoluteSizeBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropActionAbsoluteSizeBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image, weighing the cropping rectangle on a gravity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GravityBasedCropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("gravity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropGravity Gravity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GravityBasedCropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GravityBasedCropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image, positioning the cropping rectangle relative to the width/height of the image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelativeCropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelativeCropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelativeCropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Increases sharpness of an image by using the unsharp mask technique.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnsharpenMaskAction : ImageActionBase
    {
        /// <summary>
        /// Unsharp mask amount (the difference between blurred and original image).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Amount { get; set; }

        /// <summary>
        /// Blur radius used to produce unfocused version of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radius", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Radius { get; set; }

        /// <summary>
        /// The threshold value for the unsharp mask in range [0, 1]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Threshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnsharpenMaskAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsharpenMaskAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows rendering a watermark to an image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WatermarkAction : ImageActionBase
    {
        /// <summary>
        /// Identifies the image to be used as watermark
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkFilePath { get; set; }

        /// <summary>
        /// Margin to the left border of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginLeft { get; set; }

        /// <summary>
        /// Margin to the top of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginTop { get; set; }

        /// <summary>
        /// Margin to the right border of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginRight { get; set; }

        /// <summary>
        /// Margin to the bottom of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginBottom { get; set; }

        /// <summary>
        /// Scales the opacity of the watermark
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Opacity { get; set; }

        /// <summary>
        /// Scales the watermark width according to the size of the final image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("widthRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float WidthRatio { get; set; }

        /// <summary>
        /// Scales the watermark height according to the size of the final image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("heightRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float HeightRatio { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WatermarkAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatermarkAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows rotating an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RotateAction : ImageActionBase
    {
        /// <summary>
        /// Degrees to rotate the image in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("degrees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Degrees { get; set; }

        /// <summary>
        /// Direction the rotation should be applied in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RotateDirection Direction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RotateAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotateAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RotateDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clockwise")]
        Clockwise = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CounterClockwise")]
        CounterClockwise = 1,

    }

    /// <summary>
    /// Renders a JPEG image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JpegFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        /// <summary>
        /// Whether to use chroma subsampling or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chromaSubsamplingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChromaSubsamplingEnabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JpegFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JpegFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders a PNG image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PngFormat : ImageFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PngFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PngFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders a TIFF image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TiffFormat : ImageFormatBase
    {
        /// <summary>
        /// Specifies whether color channels should be premultiplied with alpha (associated alpha) or not (unassociated alpha).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alphaPremultiplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AlphaPremultiplied { get; set; }

        /// <summary>
        /// Specifies the compression type to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compressionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompressionType CompressionType { get; set; }

        /// <summary>
        /// Preserve (including size affecting changes) unspecified extraChannels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeUnspecifiedTiffExtraChannels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TiffFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TiffFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Available compression types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompressionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Lzw")]
        Lzw = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rle")]
        Rle = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Zip")]
        Zip = 3,

    }

    /// <summary>
    /// Renders a WebP image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebPFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 90.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WebPFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebPFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders an AVIF image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvifFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 90.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvifFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvifFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering video.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class VideoFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders H.264 in mp4 container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mp4VideoFormat : VideoFormatBase
    {
        /// <summary>
        /// Allows resizing of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        /// <summary>
        /// Gets or sets the encoding audio codec.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audioCodec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioFormatBase AudioCodec { get; set; }

        /// <summary>
        /// Gets or sets the encoding codec preset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preset Preset { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Mp4VideoFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp4VideoFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering audio.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AudioFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Video rendering preset, see http://dev.beandog.org/x264_preset_reference.html for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preset
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ultrafast")]
        Ultrafast = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"superfast")]
        Superfast = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"veryfast")]
        Veryfast = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"faster")]
        Faster = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fast")]
        Fast = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"slow")]
        Slow = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"slower")]
        Slower = 7,

    }

    /// <summary>
    /// Generates a sprite image of the input video.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoSpriteFormat : VideoFormatBase
    {
        /// <summary>
        /// Specifies the dimensions of a single frame in the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spriteResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction SpriteResizeAction { get; set; }

        /// <summary>
        /// Limit for the number of frames to generate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfSprites", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxNumberOfSprites { get; set; }

        /// <summary>
        /// JPEG-quality to use for the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoSpriteFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoSpriteFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoStillFormat : VideoFormatBase
    {
        /// <summary>
        /// Specifies the position from which to produce the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positionInSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PositionInSeconds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies Aac encoding for the output and additional settings for the encoder.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AacAudioFormat : AudioFormatBase
    {
        /// <summary>
        /// Gets or sets the encoding profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Profile Profile { get; set; }

        /// <summary>
        /// Gets or sets the encoding coder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Coder Coder { get; set; }

        /// <summary>
        /// Gets or sets the bitrate of the encoding in kbps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableBitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VariableBitRate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AacAudioFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AacAudioFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Profile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"aac_low")]
        Aac_low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"mpeg2_aac_low")]
        Mpeg2_aac_low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"aac_ltp")]
        Aac_ltp = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"aac_main")]
        Aac_main = 3,

    }

    /// <summary>
    /// Audio coders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Coder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"twoloop")]
        Twoloop = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"anmr")]
        Anmr = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fast")]
        Fast = 2,

    }

    /// <summary>
    /// Generates a waveform image from an Audio source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioStillFormat : AudioFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders an MP3 audio file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mp3AudioFormat : AudioFormatBase
    {
        /// <summary>
        /// Gets or sets the encoding bitrate. This setting and Quality are mutually exclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or sets the encoding quality. This setting and Bitrate are mutually exclusive.
        /// <br/>Values can be set it range of 0 to 9, where a lower value is a higher quality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Mp3AudioFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp3AudioFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DocumentFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a document to a raster image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentStillFormat : DocumentFormatBase
    {
        /// <summary>
        /// Allows resizing of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PdfFormat : DocumentFormatBase
    {
        /// <summary>
        /// Specifies compression quality used for ReduceFileSize.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jpegQuality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int JpegQuality { get; set; }

        /// <summary>
        /// Whether to linearize the output for fast web viewing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fastWebView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FastWebView { get; set; }

        /// <summary>
        /// Whether to apply measures to decrease output size or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reduceFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReduceFileSize { get; set; }

        /// <summary>
        /// Whether to extract document full text from this output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extractFullText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExtractFullText { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PdfFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering vector graphics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class VectorFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a PDF to SVG
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SvgFormat : VectorFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SvgFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SvgFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a vector graphic to a raster image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorStillFormat : VectorFormatBase
    {
        /// <summary>
        /// Specifies output dimensions for raster operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentBackupState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Recovery")]
        Recovery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Resetting")]
        Resetting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReadWriteApiLimits
    {
        [Newtonsoft.Json.JsonProperty("read", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiLimits Read { get; set; }

        [Newtonsoft.Json.JsonProperty("write", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiLimits Write { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReadWriteApiLimits FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReadWriteApiLimits>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiLimits
    {
        [Newtonsoft.Json.JsonProperty("thirtySeconds", Required = Newtonsoft.Json.Required.Always)]
        public int ThirtySeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("minute", Required = Newtonsoft.Json.Required.Always)]
        public int Minute { get; set; }

        [Newtonsoft.Json.JsonProperty("fiveMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int FiveMinutes { get; set; }

        [Newtonsoft.Json.JsonProperty("fifteenMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int FifteenMinutes { get; set; }

        [Newtonsoft.Json.JsonProperty("hour", Required = Newtonsoft.Json.Required.Always)]
        public int Hour { get; set; }

        [Newtonsoft.Json.JsonProperty("twelveHours", Required = Newtonsoft.Json.Required.Always)]
        public int TwelveHours { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiLimits FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiLimits>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Customer settings update request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSettingsUpdateRequest : CustomerSettings
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerSettingsUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSettingsUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Customer settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSettings
    {
        /// <summary>
        /// Default expiration time as time span that will be applied as default by the UI when creating a new Share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiDefaultShareExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? UiDefaultShareExpirationTime { get; set; }

        /// <summary>
        /// Prefix to be used for the zip file created when downloading multiple contents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadPrefixName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DownloadPrefixName { get; set; }

        /// <summary>
        /// Desired maintenance schedule and blocking periods
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desiredMaintenance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaintenanceWindow DesiredMaintenance { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Maintenance window
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintenanceWindow
    {
        /// <summary>
        /// List of schedules during which the maintenance is allowed to be performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MaintenanceSchedule> Schedules { get; set; }

        /// <summary>
        /// List of blocking periods in absolute times during which no maintenance should be performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockingPeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BlockingPeriod> BlockingPeriods { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaintenanceWindow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaintenanceWindow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Maintenance schedule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintenanceSchedule
    {
        /// <summary>
        /// Cron expression that specifies the desired starting times for scheduled maintenance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cronExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CronExpression { get; set; }

        /// <summary>
        /// Maximum desired duration of maintenance window when started at the times specified by the CronExpression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan Duration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaintenanceSchedule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaintenanceSchedule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Blocking period for a maintenance
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockingPeriod
    {
        /// <summary>
        /// Start of the blocking period. It must be before End.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Start { get; set; }

        /// <summary>
        /// End of the blocking period. It must be after Start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime End { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BlockingPeriod FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlockingPeriod>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerConfiguration
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("lifelineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LifelineId { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("mainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("userCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("mailCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("transferCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("shareCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("outputCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("channelCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("businessProcessCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("contentCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("displayValueCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayValueCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("tokenCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHistoryCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHistoryCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHistorySteadyCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHistorySteadyCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStreamCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LiveStreamCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("cacheCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("statisticsCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticsCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("businessRuleCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessRuleCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("metadataItemCollectionCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataItemCollectionCatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfiguration HostConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("useSsl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public bool? UseSsl { get; set; }

        [Newtonsoft.Json.JsonProperty("enableQueryDetails", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableQueryDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerServiceProviderConfiguration> ServiceProviders { get; set; }

        [Newtonsoft.Json.JsonProperty("supportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDeliveryBaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDeliveryBaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("cdnConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdnConfigurationBase CdnConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("taggingConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaggingConfigurationBase TaggingConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfRoutingShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfRoutingShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootContentSearchIndexNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootContentSearchIndexNumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("rootContentSearchIndexNumberOfRoutingShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootContentSearchIndexNumberOfRoutingShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootListItemSearchIndexNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootListItemSearchIndexNumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("rootListItemSearchIndexNumberOfRoutingShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootListItemSearchIndexNumberOfRoutingShards { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int SortableFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("corsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorsAllowedHosts { get; set; }

        [Newtonsoft.Json.JsonProperty("noReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("readWriteUserExcludedEmailAddressRegexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReadWriteUserExcludedEmailAddressRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("languageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfiguration LanguageConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("redisDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int RedisDatabaseIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SnapshotEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotFullbackupScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotFullbackupScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("contentRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ContentRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ListItemRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("userRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan UserRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerTokenRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan OwnerTokenRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("rollingIndexCreationScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan RollingIndexCreationScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHistoryRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan DocumentHistoryRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStreamRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan LiveStreamRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("successfulTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SuccessfulTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("incompleteTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan IncompleteTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("replacedOriginalsRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ReplacedOriginalsRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("importCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ImportCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("editCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan EditCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEventCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan NotificationEventCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceAdminUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceAdminUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentBackupState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete("ContentBackup functionality has been removed")]
        public ContentBackupState? ContentBackupState { get; set; }

        [Newtonsoft.Json.JsonProperty("apiLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReadWriteApiLimits ApiLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("apiClientLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ReadWriteApiLimits> ApiClientLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultContentPermissionSetIds { get; set; }

        [Newtonsoft.Json.JsonProperty("boostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> BoostValues { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationEmailNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationEmailNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("isClone", Required = Newtonsoft.Json.Required.Always)]
        public bool IsClone { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultUserRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("skipSignUpCaptcha", Required = Newtonsoft.Json.Required.Always)]
        public bool SkipSignUpCaptcha { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseInformation LicenseInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("activityMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityMapping ActivityMapping { get; set; }

        [Newtonsoft.Json.JsonProperty("idsAccentColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdsAccentColor { get; set; }

        [Newtonsoft.Json.JsonProperty("bffDevMode", Required = Newtonsoft.Json.Required.Always)]
        public bool BffDevMode { get; set; }

        [Newtonsoft.Json.JsonProperty("storageSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageSiloName { get; set; }

        [Newtonsoft.Json.JsonProperty("disableIdsRegisterLink", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableIdsRegisterLink { get; set; }

        [Newtonsoft.Json.JsonProperty("anonymousUserExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnonymousUserExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("anonymousUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnonymousUserRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchMultiTermQueryRewrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElasticMultiTermQueryRewrite ElasticSearchMultiTermQueryRewrite { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerHostConfiguration : CustomerHostConfigurationEditable
    {
        [Newtonsoft.Json.JsonProperty("certificateIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CertificateIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerServiceProviderConfiguration
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerServiceProviderConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProviderConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityMapping
    {
        [Newtonsoft.Json.JsonProperty("creationDateFieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationDateFieldPath { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationDateFieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModificationDateFieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ActivityMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ElasticMultiTermQueryRewrite
    {
        [Newtonsoft.Json.JsonProperty("behavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MultiTermQueryRewriteBehavior Behavior { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ElasticMultiTermQueryRewrite FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElasticMultiTermQueryRewrite>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiTermQueryRewriteBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConstantScore")]
        ConstantScore = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConstantScoreBoolean")]
        ConstantScoreBoolean = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ScoringBoolean")]
        ScoringBoolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TopTermsBlendedFreqsN")]
        TopTermsBlendedFreqsN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TopTermsBoostN")]
        TopTermsBoostN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TopTermsN")]
        TopTermsN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SnapshotEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStreamRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan LiveStreamRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotFullbackupScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotFullbackupScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("hostConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerHostConfigurationEditable HostConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("contentRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ContentRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ListItemRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("userRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan UserRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerTokenRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan OwnerTokenRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("rollingIndexCreationScheduleTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan RollingIndexCreationScheduleTime { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHistoryRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan DocumentHistoryRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SnapshotRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("successfulTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan SuccessfulTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("incompleteTransferRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan IncompleteTransferRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("importCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ImportCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("editCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan EditCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEventCollectionRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan NotificationEventCollectionRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("replacedOriginalsRetentionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan ReplacedOriginalsRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("enableQueryDetails", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableQueryDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("cdnConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdnConfigurationBase CdnConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("taggingConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaggingConfigurationBase TaggingConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDeliveryBaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDeliveryBaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("supportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("readWriteUserExcludedEmailAddressRegexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReadWriteUserExcludedEmailAddressRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("corsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorsAllowedHosts { get; set; }

        [Newtonsoft.Json.JsonProperty("noReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IndexedFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortableFieldThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("apiLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReadWriteApiLimits ApiLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("apiClientLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ReadWriteApiLimits> ApiClientLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultContentPermissionSetIds { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationEmailNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationEmailNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("enableSupportUserRegistrationNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSupportUserRegistrationNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultUserRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("skipSignUpCaptcha", Required = Newtonsoft.Json.Required.Always)]
        public bool SkipSignUpCaptcha { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseInformation LicenseInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ElasticSearchNumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchNumberOfRoutingShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ElasticSearchNumberOfRoutingShards { get; set; }

        [Newtonsoft.Json.JsonProperty("activityMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityMapping ActivityMapping { get; set; }

        [Newtonsoft.Json.JsonProperty("idsAccentColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdsAccentColor { get; set; }

        [Newtonsoft.Json.JsonProperty("bffDevMode", Required = Newtonsoft.Json.Required.Always)]
        public bool BffDevMode { get; set; }

        [Newtonsoft.Json.JsonProperty("disableIdsRegisterLink", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableIdsRegisterLink { get; set; }

        [Newtonsoft.Json.JsonProperty("elasticSearchMultiTermQueryRewrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElasticMultiTermQueryRewrite ElasticSearchMultiTermQueryRewrite { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerDeleteRequest
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("preserveInExternalSystems", Required = Newtonsoft.Json.Required.Always)]
        public bool PreserveInExternalSystems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerDeleteRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDeleteRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchResult : BaseResultOfCustomer
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfCustomer
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Customer> Results { get; set; } = new System.Collections.Generic.List<Customer>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfCustomer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfCustomer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchRequest
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User information retrieved via search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserWithRoles
    {
        /// <summary>
        /// IDs of user roles user is assigned to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        /// <summary>
        /// User's Picturepark ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// User's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the user (doubles as username).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Authorization state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        /// <summary>
        /// Life cycle state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// A locked user is not allowed to log in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// A support user is a user created for Picturepark support personnel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSupportUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSupportUser { get; set; }

        /// <summary>
        /// Read-only users can't be removed from the system, e.g. service user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReadOnly { get; set; }

        /// <summary>
        /// Federated user is a user who is (currently) governed by an external identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFederated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFederated { get; set; }

        /// <summary>
        /// Anonymous user is the automatically logged in user if public access is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymousUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAnonymousUser { get; set; }

        /// <summary>
        /// Last activity of user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserWithRoles FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserWithRoles>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Index
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }

        [Newtonsoft.Json.JsonProperty("indexAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfRoutingShards", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfRoutingShards { get; set; }

        [Newtonsoft.Json.JsonProperty("indexType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndexType IndexType { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndexState State { get; set; }

        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Index FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Index>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndexType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Main")]
        Main = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cache")]
        Cache = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentSearch")]
        ContentSearch = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemSearch")]
        ListItemSearch = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentHistory")]
        DocumentHistory = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LiveStream")]
        LiveStream = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Mail")]
        Mail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Transfer")]
        Transfer = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Share")]
        Share = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Output")]
        Output = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Notification")]
        Notification = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessProcess")]
        BusinessProcess = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Token")]
        Token = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DisplayValue")]
        DisplayValue = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Schema")]
        Schema = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"OutputFormat")]
        OutputFormat = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Channel")]
        Channel = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentHistorySteady")]
        DocumentHistorySteady = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Statistics")]
        Statistics = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessRule")]
        BusinessRule = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataItemCollection")]
        MetadataItemCollection = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndexState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexInProgress")]
        ReindexInProgress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchIndexReindexShardsRequest : SearchIndexReindexRequest
    {
        [Newtonsoft.Json.JsonProperty("clusterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterName { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfReplicas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfReplicas { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfRoutingShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRoutingShards { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexReindexShardsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexReindexShardsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchIndexReindexRequest
    {
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }

        [Newtonsoft.Json.JsonProperty("onBehalfOfUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OnBehalfOfUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexReindexRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexReindexRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcess
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("processType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentProcessType ProcessType { get; set; }

        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentProcessLifeCycle LifeCycle { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnvironmentProcessDataViewItemBase Data { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EnvironmentProcessLifeCycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInProgress")]
        CancellationInProgress = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 6,

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("EnvironmentProcessAddMetadataLanguageData", typeof(EnvironmentProcessAddMetadataLanguageData))]
    [JsonInheritanceAttribute("EnvironmentProcessCustomerUpdateData", typeof(EnvironmentProcessCustomerUpdateData))]
    [JsonInheritanceAttribute("EnvironmentProcessEnvironmentUpdateData", typeof(EnvironmentProcessEnvironmentUpdateData))]
    [JsonInheritanceAttribute("EnvironmentProcessCustomerBoostValuesUpdateData", typeof(EnvironmentProcessCustomerBoostValuesUpdateData))]
    [JsonInheritanceAttribute("EnvironmentProcessCustomerReshard", typeof(EnvironmentProcessCustomerReshard))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class EnvironmentProcessDataViewItemBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessDataViewItemBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessDataViewItemBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessAddMetadataLanguageData : EnvironmentProcessDataViewItemBase
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddMetadataLanguageState State { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcessState> StateHistory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessAddMetadataLanguageData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessAddMetadataLanguageData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddMetadataLanguageState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerExported")]
        CustomerExported = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerUpdated")]
        CustomerUpdated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterDataReindexed")]
        MasterDataReindexed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RedisCacheRestored")]
        RedisCacheRestored = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TranslationsForSystemEntitiesAdded")]
        TranslationsForSystemEntitiesAdded = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SortingFallbackApplied")]
        SortingFallbackApplied = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SearchIndexesReindexed")]
        SearchIndexesReindexed = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessState
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessCustomerUpdateData : EnvironmentProcessDataViewItemBase
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerUpdateState State { get; set; }

        [Newtonsoft.Json.JsonProperty("targetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcessState> StateHistory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessCustomerUpdateData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessCustomerUpdateData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerUpdateState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessEnvironmentUpdateData : EnvironmentProcessDataViewItemBase
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentUpdateState State { get; set; }

        [Newtonsoft.Json.JsonProperty("targetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcessState> StateHistory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessEnvironmentUpdateData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessEnvironmentUpdateData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EnvironmentUpdateState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessCustomerBoostValuesUpdateData : EnvironmentProcessDataViewItemBase
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerBoostValuesUpdateState State { get; set; }

        [Newtonsoft.Json.JsonProperty("addedBoostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> AddedBoostValues { get; set; }

        [Newtonsoft.Json.JsonProperty("removedBoostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerBoostValueRemoveInfo> RemovedBoostValues { get; set; }

        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcessState> StateHistory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessCustomerBoostValuesUpdateData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessCustomerBoostValuesUpdateData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerBoostValuesUpdateState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BoostValuesAdded")]
        BoostValuesAdded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SearchIndexesMappingUpdated")]
        SearchIndexesMappingUpdated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExistingBoostValuesUpdated")]
        ExistingBoostValuesUpdated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BoostValuesRemoved")]
        BoostValuesRemoved = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SearchIndexesReindexed")]
        SearchIndexesReindexed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerBoostValueRemoveInfo
    {
        /// <summary>
        /// Existing boost value that is going to be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueToRemove", Required = Newtonsoft.Json.Required.Always)]
        public double ValueToRemove { get; set; }

        /// <summary>
        /// Boost value that is going to replace the removed one where it was used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueToReplaceWith", Required = Newtonsoft.Json.Required.Always)]
        public double ValueToReplaceWith { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValueRemoveInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValueRemoveInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessCustomerReshard : EnvironmentProcessDataViewItemBase
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerReshardState State { get; set; }

        [Newtonsoft.Json.JsonProperty("shrunkIndices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<IndexType> ShrunkIndices { get; set; }

        [Newtonsoft.Json.JsonProperty("splitIndices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<IndexType> SplitIndices { get; set; }

        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcessState> StateHistory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessCustomerReshard FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessCustomerReshard>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerReshardState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportingCustomer")]
        ExportingCustomer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ShrinkingIndices")]
        ShrinkingIndices = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SplittingIndices")]
        SplittingIndices = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerMetadataLanguageCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerMetadataLanguageCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerMetadataLanguageCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerBoostValuesUpdateRequest
    {
        /// <summary>
        /// List of boost values that need to be added to the existing ones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boostValuesToAdd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> BoostValuesToAdd { get; set; }

        /// <summary>
        /// List of existing boost values that need to be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boostValuesToRemove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerBoostValueRemoveInfo> BoostValuesToRemove { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValuesUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValuesUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReshardRequest
    {
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<IndexType, IndexShardSettings> Indices { get; set; }

        [Newtonsoft.Json.JsonProperty("skipCustomerExport", Required = Newtonsoft.Json.Required.Always)]
        public bool SkipCustomerExport { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerReshardRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerReshardRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndexShardSettings
    {
        [Newtonsoft.Json.JsonProperty("numberOfShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfShards { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfRoutingShards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRoutingShards { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexShardSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexShardSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Changes the storage silo of a customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeStorageSiloRequest
    {
        /// <summary>
        /// Target silo name, must be configured in the cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSiloName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSiloName { get; set; }

        /// <summary>
        /// Specifies if contents of currently configured silo should be copied to new silo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copySiloContents", Required = Newtonsoft.Json.Required.Always)]
        public bool CopySiloContents { get; set; }

        /// <summary>
        /// Start the operation even though another one is already running for the same customer.
        /// <br/>Cancels all currently running operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Always)]
        public bool Force { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangeStorageSiloRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeStorageSiloRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingOperationItem
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nothingPending", Required = Newtonsoft.Json.Required.Always)]
        public bool NothingPending { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PendingOperationItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PendingOperationItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerQueuePriorityConfiguration
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomerId { get; set; }

        /// <summary>
        /// By QueueFamily
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queueConfigurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, QueuePriorityConfiguration> QueueConfigurations { get; set; } = new System.Collections.Generic.Dictionary<string, QueuePriorityConfiguration>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerQueuePriorityConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerQueuePriorityConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueuePriorityConfiguration
    {
        [Newtonsoft.Json.JsonProperty("models", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<QueuePriorityModelConfiguration> Models { get; set; } = new System.Collections.Generic.List<QueuePriorityModelConfiguration>();

        [Newtonsoft.Json.JsonProperty("aggregation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueueModelAggregationConfiguration Aggregation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueuePriorityConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueuePriorityConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("Legacy", typeof(Legacy))]
    [JsonInheritanceAttribute("MessagesInFlight", typeof(MessagesInFlight))]
    [JsonInheritanceAttribute("PerOperation", typeof(PerOperation))]
    [JsonInheritanceAttribute("ConcurrentInteractiveLimit", typeof(ConcurrentInteractiveLimit))]
    [JsonInheritanceAttribute("LowItemCountRequestRateMalus", typeof(LowItemCountRequestRateMalus))]
    [JsonInheritanceAttribute("LowItemCountRequestRateBonus", typeof(LowItemCountRequestRateBonus))]
    [JsonInheritanceAttribute("InheritFromCurrentProcessingMessage", typeof(InheritFromCurrentProcessingMessage))]
    [JsonInheritanceAttribute("LowMessageRateBonus", typeof(LowMessageRateBonus))]
    [JsonInheritanceAttribute("Constant", typeof(Constant))]
    [JsonInheritanceAttribute("BackgroundOperation", typeof(BackgroundOperation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class QueuePriorityModelConfiguration
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueuePriorityModelConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueuePriorityModelConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Legacy : LowLevelPriorityRelatedConfigurationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Legacy FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Legacy>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class LowLevelPriorityRelatedConfigurationBase : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("lowLevelMaxPriority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LowLevelMaxPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("ignorePriority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IgnorePriority { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreInteractivity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IgnoreInteractivity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowLevelPriorityRelatedConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowLevelPriorityRelatedConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagesInFlight : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueuePriorityMathFunctionAndArguments Function { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MessagesInFlight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagesInFlight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("QueuePriorityMathFunctionAndArgumentsExponentialFalling", typeof(QueuePriorityMathFunctionAndArgumentsExponentialFalling))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class QueuePriorityMathFunctionAndArguments
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueuePriorityMathFunctionAndArguments FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueuePriorityMathFunctionAndArguments>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// (a^b)^-x: Result divides by A every 1/B&gt;, example:
    /// <br/>a == 3, b == 0.1, x == 0 =&gt; 1
    /// <br/>a == 3, b == 0.1, x == 10 =&gt; 1/3
    /// <br/>a == 3, b == 0.1, x == 20 =&gt; 1/9
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueuePriorityMathFunctionAndArgumentsExponentialFalling : QueuePriorityMathFunctionAndArguments
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double A { get; set; }

        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double B { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueuePriorityMathFunctionAndArgumentsExponentialFalling FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueuePriorityMathFunctionAndArgumentsExponentialFalling>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerOperation : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("boostMessageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BoostMessageCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PerOperation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerOperation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Provides possibility to respect internal interactivity request but only for a limited number of messages in parallel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConcurrentInteractiveLimit : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("maxInteractiveInFlight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxInteractiveInFlight { get; set; }

        [Newtonsoft.Json.JsonProperty("limitReached", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LimitReachedBehavior LimitReached { get; set; }

        [Newtonsoft.Json.JsonProperty("priorityBonusIfInteractivityDenied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PriorityBonusIfInteractivityDenied { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConcurrentInteractiveLimit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConcurrentInteractiveLimit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LimitReachedBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ignore")]
        Ignore = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RespondNegative")]
        RespondNegative = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LowItemCountRequestRateMalus : LowItemCountRequestRateBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowItemCountRequestRateMalus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowItemCountRequestRateMalus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class LowItemCountRequestRateBase : QueuePriorityModelMessageRateConfigurationBase
    {
        [Newtonsoft.Json.JsonProperty("itemCountBoundaryInclusive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemCountBoundaryInclusive { get; set; }

        [Newtonsoft.Json.JsonProperty("voteOnInteractivity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VoteOnInteractivity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowItemCountRequestRateBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowItemCountRequestRateBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class QueuePriorityModelMessageRateConfigurationBase : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("windowLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan WindowLength { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueuePriorityModelMessageRateConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueuePriorityModelMessageRateConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LowItemCountRequestRateBonus : LowItemCountRequestRateBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowItemCountRequestRateBonus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowItemCountRequestRateBonus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InheritFromCurrentProcessingMessage : LowLevelPriorityRelatedConfigurationBase
    {
        /// <summary>
        /// Adds result of this model to the enqueued message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachResultAsTag", Required = Newtonsoft.Json.Required.Always)]
        public bool AttachResultAsTag { get; set; }

        /// <summary>
        /// Whether an attached result from AttachResultAsTag&gt; should be used as result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoreIncomingTag", Required = Newtonsoft.Json.Required.Always)]
        public bool IgnoreIncomingTag { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InheritFromCurrentProcessingMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InheritFromCurrentProcessingMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LowMessageRateBonus : QueuePriorityModelMessageRateConfigurationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowMessageRateBonus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowMessageRateBonus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Constant : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("interactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Interactive { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Constant FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Constant>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackgroundOperation : QueuePriorityModelConfiguration
    {
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double Priority { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BackgroundOperation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BackgroundOperation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueueModelAggregationConfiguration
    {
        [Newtonsoft.Json.JsonProperty("interactivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePriorityModelResultInteractivityAggregator Interactivity { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePriorityModelResultPriorityAggregator Priority { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueueModelAggregationConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueueModelAggregationConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("InteractivityAggregatorSingleVeto", typeof(InteractivityAggregatorSingleVeto))]
    [JsonInheritanceAttribute("InteractivityAggregatorMajorityVote", typeof(InteractivityAggregatorMajorityVote))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class MessagePriorityModelResultInteractivityAggregator
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MessagePriorityModelResultInteractivityAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePriorityModelResultInteractivityAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InteractivityAggregatorSingleVeto : MessagePriorityModelResultInteractivityAggregator
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InteractivityAggregatorSingleVeto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InteractivityAggregatorSingleVeto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InteractivityAggregatorMajorityVote : MessagePriorityModelResultInteractivityAggregator
    {
        [Newtonsoft.Json.JsonProperty("interactiveOnTie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InteractiveOnTie { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InteractivityAggregatorMajorityVote FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InteractivityAggregatorMajorityVote>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("PriorityAverage", typeof(PriorityAverage))]
    [JsonInheritanceAttribute("PriorityAverageWeighted", typeof(PriorityAverageWeighted))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class MessagePriorityModelResultPriorityAggregator
    {
        [Newtonsoft.Json.JsonProperty("maxPriority", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int MaxPriority { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MessagePriorityModelResultPriorityAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePriorityModelResultPriorityAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriorityAverage : MessagePriorityModelResultPriorityAggregator
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriorityAverage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriorityAverage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriorityAverageWeighted : MessagePriorityModelResultPriorityAggregator
    {
        /// <summary>
        /// ModelResults are considered as long as their cumulative weight is at or below this value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int MaxWeight { get; set; } = 100;

        /// <summary>
        /// Weights to be used for model results (if they were produced). Results with undefined weights are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelWeights", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PriorityAverageWeightedModelWeight> ModelWeights { get; set; } = new System.Collections.Generic.List<PriorityAverageWeightedModelWeight>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriorityAverageWeighted FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriorityAverageWeighted>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriorityAverageWeightedModelWeight
    {
        [Newtonsoft.Json.JsonProperty("modelType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ModelType { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public int Weight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriorityAverageWeightedModelWeight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriorityAverageWeightedModelWeight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerServiceProviderCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerServiceProvider ServiceProvider { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerServiceProviderCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProviderCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentConfiguration
    {
        /// <summary>
        /// The environment configuration id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The contract version of the environment configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }

        /// <summary>
        /// Curent lifecycle state of the entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Language specific deactivation messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The version view item for the environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionInfo
    {
        /// <summary>
        /// The manual file version of Picturepark.Contract.dll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }

        /// <summary>
        /// The GitVersionTask generated file product version of Picturepark.Configuration.dll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileProductVersion { get; set; }

        /// <summary>
        /// The current contract version stored in CustomerDoc / EnvironmentDoc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }

        /// <summary>
        /// The release version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }

        /// <summary>
        /// Cloud name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloudName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessWaitResult
    {
        [Newtonsoft.Json.JsonProperty("lifeCycleHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentProcessLifeCycle? LifeCycleHit { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnvironmentProcess EnvironmentProcess { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessWaitResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessWaitResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessSearchResult
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentProcess> Results { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentProcessSearchRequest
    {
        /// <summary>
        /// Defines the offset from the first result you want to fetch. Defaults to 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;

        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TouchSchemasRequest
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TouchSchemasRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TouchSchemasRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputResetRetryAttemptsRequest
    {
        /// <summary>
        /// List of Content IDs you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        /// <summary>
        /// The IDs of the output formats you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        /// <summary>
        /// Should the successful filter results also be reset (and subsequently re-rendered)?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeCompleted { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputResetRetryAttemptsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputResetRetryAttemptsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecalculateFileInformationRequest
    {
        /// <summary>
        /// List of Content IDs you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        /// <summary>
        /// The IDs of the output formats you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        /// <summary>
        /// Set to filter on creation date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedBefore { get; set; }

        /// <summary>
        /// Set to filter on creation date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedAfter { get; set; }

        /// <summary>
        /// Skip hash calculation (only fix file size)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skipHashCalculation", Required = Newtonsoft.Json.Required.Always)]
        public bool SkipHashCalculation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RecalculateFileInformationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecalculateFileInformationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRelatedItemsByQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("renderDisplayValues", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderDisplayValues { get; set; }

        [Newtonsoft.Json.JsonProperty("fixDisplayValuesIds", Required = Newtonsoft.Json.Required.Always)]
        public bool FixDisplayValuesIds { get; set; }

        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("createRelatedItemsForContents", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateRelatedItemsForContents { get; set; }

        [Newtonsoft.Json.JsonProperty("createRelatedItemsForListItems", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateRelatedItemsForListItems { get; set; }

        [Newtonsoft.Json.JsonProperty("contentElasticSearchQueryJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentElasticSearchQueryJson { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemElasticSearchQueryJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemElasticSearchQueryJson { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateRelatedItemsByQueryRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateRelatedItemsByQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddContentEventsRequest
    {
        /// <summary>
        /// Data to be added to statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddContentEventsRequestItem> Events { get; set; } = new System.Collections.Generic.List<AddContentEventsRequestItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddContentEventsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddContentEventsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddContentEventsRequestItem
    {
        /// <summary>
        /// Specifies at which time the events happened. The information will be automatically aggregated according to internal temporal resolution of statistics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Specifies content for which the events happened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// Optionally specify the used ApiClient. Defaults to the API Client sending this request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiClientId { get; set; }

        /// <summary>
        /// Data to be added to statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentStatisticsDataEditable Statistics { get; set; } = new ContentStatisticsDataEditable();

        /// <summary>
        /// Optionally specify an additional id under which the supplied data should be tracked. This
        /// <br/>Id is only used internally and cannot be retrieved through API or export.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalEventTraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalEventTraceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddContentEventsRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddContentEventsRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentStatisticsDataEditable
    {
        /// <summary>
        /// Statistical data for downloads of a Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentDownloadsEditable Downloads { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentStatisticsDataEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentStatisticsDataEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadsEditable
    {
        /// <summary>
        /// Total downloads of content (regardless of formats, single download of multiple formats is counted once)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }

        /// <summary>
        /// Downloads of content through basic Share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Always)]
        public int Share { get; set; }

        /// <summary>
        /// Downloads of content through embed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embed", Required = Newtonsoft.Json.Required.Always)]
        public int Embed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadsEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadsEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StaticOutputFormatDetail : StaticOutputFormat
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StaticOutputFormatDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaticOutputFormatDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Audit information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAuditDetail
    {
        /// <summary>
        /// The date on which the document was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CreationDate { get; set; }

        /// <summary>
        /// The last date on which the document was modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ModificationDate { get; set; }

        /// <summary>
        /// ID of the user who created the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CreatedByUser { get; set; }

        /// <summary>
        /// ID of the last user who modified the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ModifiedByUser { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAuditDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuditDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetServiceLogLevelRequest
    {
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetServiceLogLevelRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetServiceLogLevelRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeInfo
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastResponseTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime LastResponseTime { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("versionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }

        [Newtonsoft.Json.JsonProperty("logLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogLevel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NodeInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NodeInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains information about a possibly available update
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInfo
    {
        /// <summary>
        /// The current version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentVersion { get; set; }

        /// <summary>
        /// The maximum version available to update to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateVersion { get; set; }

        /// <summary>
        /// Indicates if an update is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateAvailable", Required = Newtonsoft.Json.Required.Always)]
        public bool UpdateAvailable { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReactivationEnvironmentRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReactivationEnvironmentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationEnvironmentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivationEnvironmentRequest
    {
        /// <summary>
        /// Language specific deactivation messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeactivationEnvironmentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationEnvironmentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateEnvironmentRequest
    {
        /// <summary>
        /// The maximal target version.
        /// <br/>In case the highest available update version is lower than the desired target version, the environments's contract version will be raised to the highest available update version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateEnvironmentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateEnvironmentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The version view item for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerVersionInfo : VersionInfo
    {
        /// <summary>
        /// The customer id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerVersionInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerVersionInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivationCustomerRequest
    {
        /// <summary>
        /// The customer id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Language specific deactivation messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeactivationCustomerRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationCustomerRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReactivationCustomerRequest
    {
        /// <summary>
        /// The customer id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReactivationCustomerRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationCustomerRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCustomerRequest
    {
        /// <summary>
        /// The maximal target version.
        /// <br/>In case the highest available update version is lower than the desired target version, the customer's contract version will be raised to the highest available update version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }

        /// <summary>
        /// The customer id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Defines whether secondary indices which are missing for customer are filled or left empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refillRecreatedSecondaryIndices", Required = Newtonsoft.Json.Required.Always)]
        public bool RefillRecreatedSecondaryIndices { get; set; } = true;

        /// <summary>
        /// Defines where searchIndices are recreated if they did not exist (not part of restored snapshot, for example)
        /// <br/>If null, searchIndices will be recreated on the cluster they were on when the snapshot was taken (or, if that cluster does not exist, on the default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recreateSearchIndicesCluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecreateSearchIndicesCluster { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateCustomerRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCustomerRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDeveloperFlagUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("isDeveloper", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeveloper { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDeveloperFlagUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDeveloperFlagUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataDictionary : System.Collections.Generic.Dictionary<string, object>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DataDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStreamMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("documentChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentChange DocumentChange { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationEvent ApplicationEvent { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStreamMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentChange
    {
        [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime TimeStamp { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentChange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentChange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("TransferEvent", typeof(TransferEvent))]
    [JsonInheritanceAttribute("ReindexEvent", typeof(ReindexEvent))]
    [JsonInheritanceAttribute("ContentDetailViewEvent", typeof(ContentDetailViewEvent))]
    [JsonInheritanceAttribute("ContentDownloadEvent", typeof(ContentDownloadEvent))]
    [JsonInheritanceAttribute("ContentShareEvent", typeof(ContentShareEvent))]
    [JsonInheritanceAttribute("SessionRenewalEvent", typeof(SessionRenewalEvent))]
    [JsonInheritanceAttribute("SharePageViewEvent", typeof(SharePageViewEvent))]
    [JsonInheritanceAttribute("ApiStatisticsEvent", typeof(ApiStatisticsEvent))]
    [JsonInheritanceAttribute("TrafficStatisticsEvent", typeof(TrafficStatisticsEvent))]
    [JsonInheritanceAttribute("OutputRenderedEvent", typeof(OutputRenderedEvent))]
    [JsonInheritanceAttribute("ConfigurationChangeEvent", typeof(ConfigurationChangeEvent))]
    [JsonInheritanceAttribute("CustomerChangeEvent", typeof(CustomerChangeEvent))]
    [JsonInheritanceAttribute("SearchReindexCompletedEvent", typeof(SearchReindexCompletedEvent))]
    [JsonInheritanceAttribute("BusinessRuleFiredEvent", typeof(BusinessRuleFiredEvent))]
    [JsonInheritanceAttribute("BusinessProcessCancellationRequestedEvent", typeof(BusinessProcessCancellationRequestedEvent))]
    [JsonInheritanceAttribute("DataExtractionRepairEvent", typeof(DataExtractionRepairEvent))]
    [JsonInheritanceAttribute("TaggerStatisticsEvent", typeof(TaggerStatisticsEvent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApplicationEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Transfer states
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadInProgress")]
        UploadInProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCompleted")]
        UploadCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgress")]
        ImportInProgress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompleted")]
        ImportCompleted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCancelled")]
        UploadCancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelled")]
        ImportCancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportFailed")]
        ImportFailed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferReady")]
        TransferReady = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FileDeleteInProgress")]
        FileDeleteInProgress = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCleanup")]
        TransferCleanup = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedWithErrors")]
        ImportCompletedWithErrors = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCompletedWithErrors")]
        UploadCompletedWithErrors = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCancellationInProgress")]
        UploadCancellationInProgress = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportDone")]
        ImportDone = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReindexEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndexState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReindexEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReindexEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDetailViewEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDetailViewEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetailViewEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("downloadInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DownloadTrackingInfo> DownloadInfos { get; set; }

        [Newtonsoft.Json.JsonProperty("fileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("shareToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareToken { get; set; }

        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Range { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadTrackingInfo
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDisposition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentDisposition ContentDisposition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadTrackingInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadTrackingInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentDisposition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Attachment")]
        Attachment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inline")]
        Inline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentShareEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }

        [Newtonsoft.Json.JsonProperty("addedContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AddedContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentShareEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentShareEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShareType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Embed")]
        Embed = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionRenewalEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SessionRenewalEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SessionRenewalEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharePageViewEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("shareToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SharePageViewEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SharePageViewEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("requestsPerClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> RequestsPerClient { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrafficStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        [Newtonsoft.Json.JsonProperty("requestSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RequestSize { get; set; }

        [Newtonsoft.Json.JsonProperty("responseSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ResponseSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrafficStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrafficStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputRenderedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("outputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("renderingState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete("Replaced by OutputRenderingStateV2")]
        public OutputRenderingState RenderingState { get; set; }

        [Newtonsoft.Json.JsonProperty("renderingStateV2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputRenderingStateV2 RenderingStateV2 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputRenderedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputRenderedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputRenderingState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Skipped")]
        Skipped = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NoLicense")]
        NoLicense = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RerenderRequested")]
        RerenderRequested = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputRenderingStateV2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Renderable")]
        Renderable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigurationChangeEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfigurationChangeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationChangeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerChangeEvent : ConfigurationChangeEvent
    {
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerChangeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerChangeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchReindexCompletedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("searchIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchIndexType SearchIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Items { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan Duration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchReindexCompletedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchReindexCompletedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchIndexType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleFiredEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleFiredEventDetail> Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFiredEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFiredEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleFiredEventDetail
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFiredEventDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFiredEventDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessCancellationRequestedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessCancellationRequestedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessCancellationRequestedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataExtractionRepairEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("contentRepairRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentRepairRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        [Newtonsoft.Json.JsonProperty("hadChanges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HadChanges { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DataExtractionRepairEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataExtractionRepairEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaggerStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("requestsCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RequestsCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("taggerCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TaggerCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("ocrCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OcrCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("taggerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaggerName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaggerStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaggerStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("LiveStreamMessage", typeof(LiveStreamMessage))]
    [JsonInheritanceAttribute("ConsoleMessage", typeof(ConsoleMessage))]
    [JsonInheritanceAttribute("NodeInfoMessage", typeof(NodeInfoMessage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class Message
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }

        [Newtonsoft.Json.JsonProperty("retriesPerformed", Required = Newtonsoft.Json.Required.Always)]
        public int RetriesPerformed { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("deduplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Deduplicate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Message FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsoleMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("command", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Command { get; set; }

        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TupleOfStringAndString> Arguments { get; set; }

        [Newtonsoft.Json.JsonProperty("targetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConsoleMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsoleMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TupleOfStringAndString
    {
        [Newtonsoft.Json.JsonProperty("item1", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Item1 { get; set; }

        [Newtonsoft.Json.JsonProperty("item2", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Item2 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TupleOfStringAndString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TupleOfStringAndString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeInfoMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastResponseTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime LastResponseTime { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("productVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }

        [Newtonsoft.Json.JsonProperty("logLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogLevel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NodeInfoMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NodeInfoMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioStream
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }

        [Newtonsoft.Json.JsonProperty("bitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }

        [Newtonsoft.Json.JsonProperty("channelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }

        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }

        [Newtonsoft.Json.JsonProperty("xmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object XmpMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("exifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExifMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("documentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("characterCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CharacterCount { get; set; }

        [Newtonsoft.Json.JsonProperty("characterCountWithSpaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CharacterCountWithSpaces { get; set; }

        [Newtonsoft.Json.JsonProperty("lineCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LineCount { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("slideCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlideCount { get; set; }

        [Newtonsoft.Json.JsonProperty("paragraphCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParagraphCount { get; set; }

        [Newtonsoft.Json.JsonProperty("revisionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RevisionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Titles { get; set; }

        [Newtonsoft.Json.JsonProperty("imageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImageTitles { get; set; }

        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpsMetadata
    {
        [Newtonsoft.Json.JsonProperty("isRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpsMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInInch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WidthInInch { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInInch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightInInch { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInCm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WidthInCm { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInCm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightInCm { get; set; }

        [Newtonsoft.Json.JsonProperty("colorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }

        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("bitsPerPixel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitsPerPixel { get; set; }

        [Newtonsoft.Json.JsonProperty("bitsPerChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitsPerChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }

        [Newtonsoft.Json.JsonProperty("pixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAlpha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAlpha { get; set; }

        [Newtonsoft.Json.JsonProperty("isIndexed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsIndexed { get; set; }

        [Newtonsoft.Json.JsonProperty("isExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsExtended { get; set; }

        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HorizontalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double VerticalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("totalFrames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalFrames { get; set; }

        [Newtonsoft.Json.JsonProperty("totalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }

        [Newtonsoft.Json.JsonProperty("hasExifData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasExifData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasIptcData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasIptcData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAdobeResourceData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAdobeResourceData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasXmpData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasXmpData { get; set; }

        [Newtonsoft.Json.JsonProperty("uncompressedSizeInBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UncompressedSizeInBytes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("overallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("videoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VideoStream> VideoStreams { get; set; }

        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoStream
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("displayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public float DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("frameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }

        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FrameRate { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("pixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PixelAspectRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Rotation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMeta : DynamicViewFieldMetaBase
    {
        /// <summary>
        /// Filter for the dynamic view field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Sorting information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Target doc type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TargetDocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMeta FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMeta>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class of meta information for a dynamic view field
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DynamicViewFieldMeta", typeof(DynamicViewFieldMeta))]
    [JsonInheritanceAttribute("DynamicViewFieldMetaWithRenderingError", typeof(DynamicViewFieldMetaWithRenderingError))]
    [JsonInheritanceAttribute("DynamicViewFieldMetaWithHasItems", typeof(DynamicViewFieldMetaWithHasItems))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DynamicViewFieldMetaBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field including a flag that indicates if the rendered filter does match some items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMetaWithHasItems : DynamicViewFieldMeta
    {
        /// <summary>
        /// indicates if the rendered filter does match some items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithHasItems FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithHasItems>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field where the filter could not be rendered successfully.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMetaWithRenderingError : DynamicViewFieldMetaWithErrorBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithRenderingError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithRenderingError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DynamicViewFieldMetaWithErrorBase : DynamicViewFieldMetaBase
    {
        /// <summary>
        /// The serialized PictureparkException
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithErrorBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithErrorBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604