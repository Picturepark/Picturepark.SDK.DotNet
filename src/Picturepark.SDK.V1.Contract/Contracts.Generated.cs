//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.Contract
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IContentClient
    {
        /// <summary>Get detail - single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">Content not found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> GetAsync(string contentId, bool resolve, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get detail - many</summary>
        /// <param name="ids">List of contentIds</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <returns>List of ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContentDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids, bool resolve, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create - many</summary>
        /// <param name="contentCreateManyRequest">The content create many request.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> CreateManyAsync(ContentCreateManyRequest contentCreateManyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="contentSearchRequest">The content search request.</param>
        /// <returns>ContentSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentSearchResult> SearchAsync(ContentSearchRequest contentSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="contentAggregationRequest">The aggregation request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ContentAggregationRequest contentAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate on channel</summary>
        /// <param name="contentAggregationOnChannelRequest">The content aggregation on channel request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateOnChannelAsync(ContentAggregationOnChannelRequest contentAggregationOnChannelRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create download link</summary>
        /// <param name="request">The content download link request</param>
        /// <returns>ContentBatchDonloadItem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DownloadLink> CreateDownloadLinkAsync(ContentDownloadLinkCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Download output</summary>
        /// <param name="contentId">The content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="width">Optional width in pixels to resize image</param>
        /// <param name="height">Optional height in pixels to resize image</param>
        /// <param name="range">The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string contentId, string outputFormatId, int? width = null, int? height = null, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Download thumbnail</summary>
        /// <param name="contentId">The Content id</param>
        /// <param name="size">Thumbnail size. Either small, medium or large</param>
        /// <param name="width">Optional width in pixels to resize image</param>
        /// <param name="height">Optional height in pixels to resize image</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<FileResponse> DownloadThumbnailAsync(string contentId, ThumbnailSize size, int? width = null, int? height = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create - single</summary>
        /// <param name="contentCreateRequest">The content create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="allowMissingDependencies">Allow creating list items that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> CreateAsync(ContentCreateRequest contentCreateRequest, bool resolve, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Deactivate - single</summary>
        /// <param name="contentId">the id of the content to deactivate</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> DeactivateAsync(string contentId, System.TimeSpan? timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Deactivate - many</summary>
        /// <param name="deactivateRequest">The deactivate request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> DeactivateManyAsync(ContentDeactivateRequest deactivateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate - single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <param name="allowMissingDependencies">Allow reactivating contents that refer to list items or contents that don't exist in the system.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> ReactivateAsync(string contentId, bool resolve, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, bool? allowMissingDependencies = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate - many</summary>
        /// <param name="reactivateRequest">The content reactivate request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> ReactivateManyAsync(ContentReactivateRequest reactivateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update file - single</summary>
        /// <param name="contentId">The id of the content to replace</param>
        /// <param name="updateRequest">Update request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> UpdateFileAsync(string contentId, ContentFileUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update metadata - single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="allowMissingDependencies">Allow storing references to missing list items</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> UpdateMetadataAsync(string contentId, ContentMetadataUpdateRequest updateRequest, bool resolve, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update permissions - single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content permission update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> UpdatePermissionsAsync(string contentId, ContentPermissionsUpdateRequest updateRequest, bool resolve, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update metadata - many</summary>
        /// <param name="updateRequest">The metadata update requests.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentsNotFoundException">Not all provided contents could be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> UpdateMetadataManyAsync(ContentMetadataUpdateManyRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update permissions - many</summary>
        /// <param name="updateRequest">The permissions update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> UpdatePermissionsManyAsync(System.Collections.Generic.IEnumerable<ContentPermissionsUpdateRequest> updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Transfer ownership - single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content ownership transfer request update request.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentDetail> TransferOwnershipAsync(string contentId, ContentOwnershipTransferRequest updateRequest, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Transfer ownership - many</summary>
        /// <param name="contentsOwnershipTransferRequest">The content ownership transfer request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> TransferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Batch update fields - by ids</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> BatchUpdateFieldsByIdsAsync(ContentFieldsUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Batch update fields - by filter</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> BatchUpdateFieldsByFilterAsync(ContentFieldsFilterUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IBusinessProcessClient
    {
        /// <summary>Search</summary>
        /// <param name="businessProcessSearchRequest">The business process request</param>
        /// <returns>BusinessProcessSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcessSearchResult> SearchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get details</summary>
        /// <param name="processId">The process id</param>
        /// <returns>BusinessProcessDetails</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcessDetails> GetDetailsAsync(string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IDocumentHistoryClient
    {
        /// <summary>Search</summary>
        /// <param name="documentHistorySearchRequest">The document history search request</param>
        /// <returns>DocumentHistorySearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DocumentHistorySearchResult> SearchAsync(DocumentHistorySearchRequest documentHistorySearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get latest</summary>
        /// <param name="id">The id of the document (e.g. ContentId)</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DocumentHistory> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get latest by version</summary>
        /// <param name="id">The id of the document (e.g. ContentId)</param>
        /// <param name="version">The version</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DocumentHistory> GetVersionAsync(string id, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get latest difference</summary>
        /// <param name="id">The id of the document (e.g. ContentId)</param>
        /// <param name="oldVersion">The old version</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DocumentHistoryDifference> GetDifferenceLatestAsync(string id, long oldVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get difference</summary>
        /// <param name="id">The id of the document (e.g. ContentId)</param>
        /// <param name="oldVersion">The old version</param>
        /// <param name="newVersion">The new version</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DocumentHistoryDifference> GetDifferenceAsync(string id, long oldVersion, long newVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IJsonSchemaClient
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IListItemClient
    {
        /// <summary>Get - single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ListItemNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemDetail> GetAsync(string listItemId, bool resolve, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="listItemSearchRequest">The list item search request.</param>
        /// <returns>List item result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemSearchResult> SearchAsync(ListItemSearchRequest listItemSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="listItemAggregationRequest">The list item aggregation request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ListItemAggregationRequest listItemAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create - single</summary>
        /// <param name="listItemCreateRequest">List item create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="allowMissingDependencies">Allow creating list items that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemDetail> CreateAsync(ListItemCreateRequest listItemCreateRequest, bool resolve, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update - many</summary>
        /// <param name="listItemUpdateManyRequest">List item update many request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> UpdateManyAsync(ListItemUpdateManyRequest listItemUpdateManyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Deactivate - single</summary>
        /// <param name="listItemId">the id of the list item to deactivate</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="forceReferenceRemoval">A value indicating whether references to the listitem should be removed.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemDetail> DeactivateAsync(string listItemId, System.TimeSpan? timeout, bool? forceReferenceRemoval = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Deactivate - many</summary>
        /// <param name="deactivateRequest">The list items deactivate request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> DeactivateManyAsync(ListItemDeactivateRequest deactivateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate - single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="timeout">Maximum time to wait for the business process completed state.</param>
        /// <param name="patterns">List of display pattern types. Resolves display values of referenced list items where the display pattern matches.</param>
        /// <param name="allowMissingDependencies">Allow reactivating list items that refer to list items or contents that don't exist in the system.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">The specified wait timeout exceeded</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemDetail> ReactivateAsync(string listItemId, System.TimeSpan? timeout = null, System.Collections.Generic.IEnumerable<DisplayPatternType> patterns = null, bool? allowMissingDependencies = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate - many</summary>
        /// <param name="reactivateRequest">The list items reactivate request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> ReactivateManyAsync(ListItemReactivateRequest reactivateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Batch update fields - by ids</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> BatchUpdateFieldsByIdsAsync(ListItemFieldsUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Batch update fields - by filter</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> BatchUpdateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Gets the references to a list item.</summary>
        /// <param name="listItemId">The ID of the list item.</param>
        /// <returns>MetadataReferences</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ListItemReferences> GetReferencesToListItemAsync(string listItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Gets the references to the specified list items.</summary>
        /// <param name="ids">The IDs of the list items.</param>
        /// <returns>A MetadataReferences per list item id.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListItemReferences>> GetReferencesToListItemsAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ILiveStreamClient
    {
        /// <summary>Search LiveStream</summary>
        /// <param name="liveStreamSearchRequest">The livestream search request</param>
        /// <returns>ObjectSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ObjectSearchResult> SearchAsync(LiveStreamSearchRequest liveStreamSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ISchemaClient
    {
        /// <summary>Get - single</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="SchemaNotFoundException">Requested schema could not be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SchemaDetail> GetAsync(string schemaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update - single</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <param name="schema">The schema update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="SchemaNotFoundException">Schema with this id could not be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaValidationException">The validation exception of schema creation</exception>
        /// <exception cref="SchemaCyclicDependencyException">Schema cannot have cyclic dependencies</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> UpdateAsync(string schemaId, SchemaUpdateRequest schema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete - single</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="SchemaNotFoundException">Schema with this id could not be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaInUseException">Schema is used in other entites and cannot be deleted</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> DeleteAsync(string schemaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get - many</summary>
        /// <param name="ids">Comma separated list of schema ids</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchemaDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create - single</summary>
        /// <param name="schema">The schema create request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="DuplicateSchemaException">Schema with this name already exists</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaValidationException">The validation exception of schema creation</exception>
        /// <exception cref="SchemaCyclicDependencyException">Schema cannot have cyclic dependencies</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(SchemaCreateRequest schema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="schemaSearchRequest">The schema search request.</param>
        /// <returns>Schema result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SchemaSearchResult> SearchAsync(SchemaSearchRequest schemaSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get index fields</summary>
        /// <param name="request">The get request.</param>
        /// <returns>Indexed fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IndexField>> GetIndexFieldsAsync(GetIndexFieldsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IPermissionClient
    {
        /// <summary>Search Content Permissions</summary>
        /// <param name="request">The permission search request.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchContentPermissionSetsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Content Permission - single</summary>
        /// <param name="permissionSetId">The content permission set id.</param>
        /// <returns>ContentPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ContentPermissionSetDetail> GetContentPermissionSetAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search Schema PermissionSets</summary>
        /// <param name="request">The permission search request.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchSchemaPermissionSetsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Schema PermissionSets - single</summary>
        /// <param name="permissionSetId">The schema permission set id.</param>
        /// <returns>SchemaPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SchemaPermissionSetDetail> GetSchemaPermissionSetAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get User rights</summary>
        /// <returns>list of user permissions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRight>> GetUserRightsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Has UserRight</summary>
        /// <param name="userRight">The UserRight to validate</param>
        /// <returns>Boolean - user has permission</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<bool> HasUserRightAsync(UserRight userRight, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IPublicAccessClient
    {
        /// <summary>Get Version</summary>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Share</summary>
        /// <param name="token">The token</param>
        /// <returns>ShareBaseDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ShareDetail> GetShareAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IShareClient
    {
        /// <summary>Get - single</summary>
        /// <param name="id">Share Id (not token, use PublicAccess to get share by token)</param>
        /// <returns>Polymorph share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ShareNotFoundException">Submited share could not be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ShareDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update - single</summary>
        /// <param name="id">The share id.</param>
        /// <param name="updateRequest">The share update request.</param>
        /// <returns>Share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="BusinessProcessWaitTimeoutException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ShareDetail> UpdateAsync(string id, ShareBaseUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="request">Search request</param>
        /// <returns>Share search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ShareSearchResult> SearchAsync(ShareSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="request">Aggregation request</param>
        /// <returns>AggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ShareAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create - single</summary>
        /// <param name="request">Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest</param>
        /// <returns>Create result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">Submited content could not be found</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PermissionValidationException">No permission to share</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CreateShareResult> CreateAsync(ShareBaseCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete - many</summary>
        /// <param name="ids">A list of shareIds to delete.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BulkResponse> DeleteManyAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IServiceProviderClient
    {
        /// <summary>Get configuration</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CustomerServiceProviderConfiguration> GetConfigurationAsync(string serviceProviderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update configuration</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CustomerServiceProviderConfiguration> UpdateConfigurationAsync(string serviceProviderId, ServiceProviderConfigurationUpdateRequest configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ITransferClient
    {
        /// <summary>Get Transferdetail</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <returns>TransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<TransferDetail> GetAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="request">The transfer search request</param>
        /// <returns>TransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<TransferSearchResult> SearchAsync(TransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Cancels a transfer.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelTransferAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create Transfer</summary>
        /// <param name="request">The create transfer request</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Transfer> CreateAsync(CreateTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get File</summary>
        /// <param name="fileTransferId">The filetransfer id</param>
        /// <returns>FileTransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<FileTransferDetail> GetFileAsync(string fileTransferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search for files</summary>
        /// <param name="request">The file transfer search request</param>
        /// <returns>FileTransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<FileTransferSearchResult> SearchFilesAsync(FileTransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Blacklist</summary>
        /// <returns>Blacklist</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Blacklist> GetBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Files</summary>
        /// <param name="request">The filetransfer delete request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteFilesAsync(FileTransferDeleteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Import transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <param name="request">The filetransfer to content create request</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Transfer> ImportTransferAsync(string transferId, FileTransfer2ContentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create a partial import</summary>
        /// <param name="transferId">The transfer id</param>
        /// <param name="request">The filetransfer partial to content create request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Transfer> PartialImportAsync(string transferId, FileTransferPartial2ContentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Upload file</summary>
        /// <param name="formFile">Gets or sets the form file.</param>
        /// <param name="relativePath">Relative path of the uploading file</param>
        /// <param name="chunkNumber">Current chunk number. starts with 1</param>
        /// <param name="currentChunkSize">Size in bytes of the current chunk</param>
        /// <param name="totalSize">Total size in bytes of the uploading file</param>
        /// <param name="totalChunks">Total chunks of the uploading file</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UploadFileAsync(string transferId, string identifier, FileParameter formFile = null, string relativePath = null, long? chunkNumber = null, long? currentChunkSize = null, long? totalSize = null, long? totalChunks = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IUserClient
    {
        /// <summary>Get by id</summary>
        /// <param name="userId">The user id</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UserDetail> GetAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search for users</summary>
        /// <param name="searchRequest">The user search request</param>
        /// <returns>UserSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UserSearchResult> SearchAsync(UserSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get by owner token</summary>
        /// <param name="tokenId">The token id</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UserDetail> GetByOwnerTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get list of channels</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Channel>> GetChannelsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IOutputClient
    {
        /// <summary>Get outputs by contentIds</summary>
        /// <param name="contentsByIdsRequest">Contains the list of contentIds for which the outputs are requested</param>
        /// <returns>The Result containing a list of OutputDetail's</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutputDetail>> GetByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get - single</summary>
        /// <param name="outputId">The output id.</param>
        /// <returns>OutputDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="OutputNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OutputDetail> GetAsync(string outputId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IProfileClient
    {
        /// <summary>Get</summary>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UserProfile> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update</summary>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<UserProfile> UpdateAsync(UserProfile profile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ISchemaTransferClient
    {
        /// <summary>Import schemas</summary>
        /// <param name="schemaImportRequest">The schema import request.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="FileTransferNotFoundException">File transfer not found</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Transfer> ImportAsync(SchemaImportRequest schemaImportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IInfoClient
    {
        /// <summary>Get info</summary>
        /// <returns>CustomerInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflic</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CustomerInfo> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DisplayPatternType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Thumbnail")]
        Thumbnail = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "List")]
        List = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Detail")]
        Detail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Name")]
        Name = 3,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("PictureparkNotFoundException", typeof(PictureparkNotFoundException))]
    [JsonInheritanceAttribute("PictureparkBusinessException", typeof(PictureparkBusinessException))]
    [JsonInheritanceAttribute("ContentNotFoundException", typeof(ContentNotFoundException))]
    [JsonInheritanceAttribute("PictureparkConflictException", typeof(PictureparkConflictException))]
    [JsonInheritanceAttribute("PictureparkValidationException", typeof(PictureparkValidationException))]
    [JsonInheritanceAttribute("BusinessProcessWaitTimeoutException", typeof(BusinessProcessWaitTimeoutException))]
    [JsonInheritanceAttribute("ContentsNotFoundException", typeof(ContentsNotFoundException))]
    [JsonInheritanceAttribute("ListItemNotFoundException", typeof(ListItemNotFoundException))]
    [JsonInheritanceAttribute("SchemaNotFoundException", typeof(SchemaNotFoundException))]
    [JsonInheritanceAttribute("PictureparkArgumentNullException", typeof(PictureparkArgumentNullException))]
    [JsonInheritanceAttribute("SchemaValidationException", typeof(SchemaValidationException))]
    [JsonInheritanceAttribute("SchemaCyclicDependencyException", typeof(SchemaCyclicDependencyException))]
    [JsonInheritanceAttribute("SchemaInUseException", typeof(SchemaInUseException))]
    [JsonInheritanceAttribute("DuplicateSchemaException", typeof(DuplicateSchemaException))]
    [JsonInheritanceAttribute("ShareNotFoundException", typeof(ShareNotFoundException))]
    [JsonInheritanceAttribute("PermissionValidationException", typeof(PermissionValidationException))]
    [JsonInheritanceAttribute("OutputNotFoundException", typeof(OutputNotFoundException))]
    [JsonInheritanceAttribute("FileTransferNotFoundException", typeof(FileTransferNotFoundException))]
    [JsonInheritanceAttribute("UserEmailAlreadyExistsException", typeof(UserEmailAlreadyExistsException))]
    [JsonInheritanceAttribute("UserRoleAssignedException", typeof(UserRoleAssignedException))]
    [JsonInheritanceAttribute("UserNotFoundException", typeof(UserNotFoundException))]
    [JsonInheritanceAttribute("RenderingException", typeof(RenderingException))]
    [JsonInheritanceAttribute("ServiceProviderDeleteException", typeof(ServiceProviderDeleteException))]
    [JsonInheritanceAttribute("ServiceProviderCreateException", typeof(ServiceProviderCreateException))]
    [JsonInheritanceAttribute("ServiceProviderNotFoundException", typeof(ServiceProviderNotFoundException))]
    [JsonInheritanceAttribute("DocumentVersionNotFoundException", typeof(DocumentVersionNotFoundException))]
    [JsonInheritanceAttribute("DefaultChannelDeleteException", typeof(DefaultChannelDeleteException))]
    [JsonInheritanceAttribute("ElasticVersionUpdateException", typeof(ElasticVersionUpdateException))]
    [JsonInheritanceAttribute("InvalidVersionException", typeof(InvalidVersionException))]
    [JsonInheritanceAttribute("EnvironmentNotDeactivatedException", typeof(EnvironmentNotDeactivatedException))]
    [JsonInheritanceAttribute("EnvironmentNotFoundException", typeof(EnvironmentNotFoundException))]
    [JsonInheritanceAttribute("EnvironmentDeactivationException", typeof(EnvironmentDeactivationException))]
    [JsonInheritanceAttribute("ShareByTokenNotFoundException", typeof(ShareByTokenNotFoundException))]
    [JsonInheritanceAttribute("TokenGenerationException", typeof(TokenGenerationException))]
    [JsonInheritanceAttribute("OutputIdNotFoundException", typeof(OutputIdNotFoundException))]
    [JsonInheritanceAttribute("DriveCacheExpiredException", typeof(DriveCacheExpiredException))]
    [JsonInheritanceAttribute("DriveFileNotFoundException", typeof(DriveFileNotFoundException))]
    [JsonInheritanceAttribute("DriveRequestException", typeof(DriveRequestException))]
    [JsonInheritanceAttribute("TokenValidationException", typeof(TokenValidationException))]
    [JsonInheritanceAttribute("LeaseNotAcquiredException", typeof(LeaseNotAcquiredException))]
    [JsonInheritanceAttribute("OperationInProgressException", typeof(OperationInProgressException))]
    [JsonInheritanceAttribute("RetryException", typeof(RetryException))]
    [JsonInheritanceAttribute("OwnerTokenNotFoundException", typeof(OwnerTokenNotFoundException))]
    [JsonInheritanceAttribute("InvalidStateException", typeof(InvalidStateException))]
    [JsonInheritanceAttribute("ObjectTypeMismatchException", typeof(ObjectTypeMismatchException))]
    [JsonInheritanceAttribute("InvalidStateTransitionException", typeof(InvalidStateTransitionException))]
    [JsonInheritanceAttribute("FailedToLockException", typeof(FailedToLockException))]
    [JsonInheritanceAttribute("PictureparkOperationCanceledException", typeof(PictureparkOperationCanceledException))]
    [JsonInheritanceAttribute("PictureparkApplicationException", typeof(PictureparkApplicationException))]
    [JsonInheritanceAttribute("MissingCustomerDefaultLanguageException", typeof(MissingCustomerDefaultLanguageException))]
    [JsonInheritanceAttribute("InvalidArgumentException", typeof(InvalidArgumentException))]
    [JsonInheritanceAttribute("UnknownException", typeof(UnknownException))]
    [JsonInheritanceAttribute("OwnerTokenInUseException", typeof(OwnerTokenInUseException))]
    [JsonInheritanceAttribute("CustomerViolationException", typeof(CustomerViolationException))]
    [JsonInheritanceAttribute("CustomerAliasNotFoundException", typeof(CustomerAliasNotFoundException))]
    [JsonInheritanceAttribute("CustomerAliasInUseException", typeof(CustomerAliasInUseException))]
    [JsonInheritanceAttribute("CustomerNotDeactivatedException", typeof(CustomerNotDeactivatedException))]
    [JsonInheritanceAttribute("CustomerDeactivationException", typeof(CustomerDeactivationException))]
    [JsonInheritanceAttribute("CustomerHostNotFoundException", typeof(CustomerHostNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotFoundException", typeof(CustomerNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotActiveException", typeof(CustomerNotActiveException))]
    [JsonInheritanceAttribute("ConfigurationIndexNotFoundException", typeof(ConfigurationIndexNotFoundException))]
    [JsonInheritanceAttribute("DuplicateSearchIndexDocException", typeof(DuplicateSearchIndexDocException))]
    [JsonInheritanceAttribute("SearchIndexDocNotFoundException", typeof(SearchIndexDocNotFoundException))]
    [JsonInheritanceAttribute("IndexDocumentNotFoundException", typeof(IndexDocumentNotFoundException))]
    [JsonInheritanceAttribute("DuplicateAliasException", typeof(DuplicateAliasException))]
    [JsonInheritanceAttribute("SearchIndexNotFoundException", typeof(SearchIndexNotFoundException))]
    [JsonInheritanceAttribute("DefaultSearchIndexDeleteException", typeof(DefaultSearchIndexDeleteException))]
    [JsonInheritanceAttribute("SearchIndexInUseException", typeof(SearchIndexInUseException))]
    [JsonInheritanceAttribute("IndexException", typeof(IndexException))]
    [JsonInheritanceAttribute("IndexMappingException", typeof(IndexMappingException))]
    [JsonInheritanceAttribute("DuplicatedSearchBehaviourException", typeof(DuplicatedSearchBehaviourException))]
    [JsonInheritanceAttribute("SearchStringLeadingWildcardException", typeof(SearchStringLeadingWildcardException))]
    [JsonInheritanceAttribute("DuplicateAggregatorException", typeof(DuplicateAggregatorException))]
    [JsonInheritanceAttribute("InvalidDateTimeFormatException", typeof(InvalidDateTimeFormatException))]
    [JsonInheritanceAttribute("InvalidSortFieldException", typeof(InvalidSortFieldException))]
    [JsonInheritanceAttribute("DocumentVersionConflictException", typeof(DocumentVersionConflictException))]
    [JsonInheritanceAttribute("RedisDatabaseExceededException", typeof(RedisDatabaseExceededException))]
    [JsonInheritanceAttribute("DuplicateDocumentException", typeof(DuplicateDocumentException))]
    [JsonInheritanceAttribute("ObjectStoreResponseException", typeof(ObjectStoreResponseException))]
    [JsonInheritanceAttribute("ObjectStoreException", typeof(ObjectStoreException))]
    [JsonInheritanceAttribute("QueryException", typeof(QueryException))]
    [JsonInheritanceAttribute("PermissionOwnershipTransferException", typeof(PermissionOwnershipTransferException))]
    [JsonInheritanceAttribute("PermissionSetNotFoundException", typeof(PermissionSetNotFoundException))]
    [JsonInheritanceAttribute("DuplicateRightException", typeof(DuplicateRightException))]
    [JsonInheritanceAttribute("UnsupportedListItemChangeCommandException", typeof(UnsupportedListItemChangeCommandException))]
    [JsonInheritanceAttribute("ListItemLayerException", typeof(ListItemLayerException))]
    [JsonInheritanceAttribute("ListItemCyclicDependencyException", typeof(ListItemCyclicDependencyException))]
    [JsonInheritanceAttribute("DeleteListItemsWithReferencesException", typeof(DeleteListItemsWithReferencesException))]
    [JsonInheritanceAttribute("ListItemUpdateManyException", typeof(ListItemUpdateManyException))]
    [JsonInheritanceAttribute("TransferInfoNotFoundException", typeof(TransferInfoNotFoundException))]
    [JsonInheritanceAttribute("InvalidTransferTypeException", typeof(InvalidTransferTypeException))]
    [JsonInheritanceAttribute("TransferNotFoundException", typeof(TransferNotFoundException))]
    [JsonInheritanceAttribute("WrongChunkSizeException", typeof(WrongChunkSizeException))]
    [JsonInheritanceAttribute("MissingDependenciesException", typeof(MissingDependenciesException))]
    [JsonInheritanceAttribute("RelationSelfReferencingException", typeof(RelationSelfReferencingException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldTypeInvalidException", typeof(InvalidChangeCommandFieldTypeInvalidException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldNotFoundException", typeof(InvalidChangeCommandFieldNotFoundException))]
    [JsonInheritanceAttribute("InvalidChangeCommandSchemaChangeInvalidException", typeof(InvalidChangeCommandSchemaChangeInvalidException))]
    [JsonInheritanceAttribute("InvalidMetadataException", typeof(InvalidMetadataException))]
    [JsonInheritanceAttribute("RelationNotFoundException", typeof(RelationNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeNotFoundException", typeof(RelationTypeNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeTargetDocTypeMismatchException", typeof(RelationTypeTargetDocTypeMismatchException))]
    [JsonInheritanceAttribute("AggregationFilterInvalidException", typeof(AggregationFilterInvalidException))]
    [JsonInheritanceAttribute("AggregationNameInvalidException", typeof(AggregationNameInvalidException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteTypeMismatchException", typeof(SchemaFieldOverwriteTypeMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteIdException", typeof(SchemaFieldOverwriteIdException))]
    [JsonInheritanceAttribute("SchemaFieldIdDuplicatedException", typeof(SchemaFieldIdDuplicatedException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoSimpleSearchNestingException", typeof(SchemaFieldSchemaIndexInfoSimpleSearchNestingException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoNestingException", typeof(SchemaFieldSchemaIndexInfoNestingException))]
    [JsonInheritanceAttribute("SchemaFieldIdUppercaseException", typeof(SchemaFieldIdUppercaseException))]
    [JsonInheritanceAttribute("SchemaIdLowercaseException", typeof(SchemaIdLowercaseException))]
    [JsonInheritanceAttribute("SchemaInfoNotFoundException", typeof(SchemaInfoNotFoundException))]
    [JsonInheritanceAttribute("IndexedFieldThresholdExceededException", typeof(IndexedFieldThresholdExceededException))]
    [JsonInheritanceAttribute("SortableFieldThresholdExceededException", typeof(SortableFieldThresholdExceededException))]
    [JsonInheritanceAttribute("DuplicateSchemaInfoException", typeof(DuplicateSchemaInfoException))]
    [JsonInheritanceAttribute("SchemaFieldNumberRangeException", typeof(SchemaFieldNumberRangeException))]
    [JsonInheritanceAttribute("SchemaInUseContentSchemaException", typeof(SchemaInUseContentSchemaException))]
    [JsonInheritanceAttribute("SchemaInUseListItemException", typeof(SchemaInUseListItemException))]
    [JsonInheritanceAttribute("SchemaInUseContentException", typeof(SchemaInUseContentException))]
    [JsonInheritanceAttribute("SchemaInUseFieldException", typeof(SchemaInUseFieldException))]
    [JsonInheritanceAttribute("SchemaNotFoundInSearchIndexException", typeof(SchemaNotFoundInSearchIndexException))]
    [JsonInheritanceAttribute("DuplicateMetadataDisplayPatternException", typeof(DuplicateMetadataDisplayPatternException))]
    [JsonInheritanceAttribute("SchemaImportEmptyException", typeof(SchemaImportEmptyException))]
    [JsonInheritanceAttribute("SchemaImportVersionMismatchException", typeof(SchemaImportVersionMismatchException))]
    [JsonInheritanceAttribute("SchemaInheritanceFieldIndexDeviationException", typeof(SchemaInheritanceFieldIndexDeviationException))]
    [JsonInheritanceAttribute("SchemaInheritanceTypeDeviationException", typeof(SchemaInheritanceTypeDeviationException))]
    [JsonInheritanceAttribute("SchemaSortFieldException", typeof(SchemaSortFieldException))]
    [JsonInheritanceAttribute("SchemaFieldIdException", typeof(SchemaFieldIdException))]
    [JsonInheritanceAttribute("SchemaFieldTypeChangeException", typeof(SchemaFieldTypeChangeException))]
    [JsonInheritanceAttribute("SchemaFieldIndexException", typeof(SchemaFieldIndexException))]
    [JsonInheritanceAttribute("SchemaFieldNotSortableException", typeof(SchemaFieldNotSortableException))]
    [JsonInheritanceAttribute("SchemaNoContentException", typeof(SchemaNoContentException))]
    [JsonInheritanceAttribute("SchemaParentChangeException", typeof(SchemaParentChangeException))]
    [JsonInheritanceAttribute("SchemaMissingTypeException", typeof(SchemaMissingTypeException))]
    [JsonInheritanceAttribute("SchemaPermissionException", typeof(SchemaPermissionException))]
    [JsonInheritanceAttribute("SchemaNoLayerException", typeof(SchemaNoLayerException))]
    [JsonInheritanceAttribute("SchemaIdException", typeof(SchemaIdException))]
    [JsonInheritanceAttribute("SystemSchemaInvalidModificationException", typeof(SystemSchemaInvalidModificationException))]
    [JsonInheritanceAttribute("DeleteContentsWithRelationsException", typeof(DeleteContentsWithRelationsException))]
    [JsonInheritanceAttribute("ContentMetadataUpdateManyException", typeof(ContentMetadataUpdateManyException))]
    [JsonInheritanceAttribute("ContentLayerInvalidException", typeof(ContentLayerInvalidException))]
    [JsonInheritanceAttribute("BusinessProcessEngineRequestException", typeof(BusinessProcessEngineRequestException))]
    [JsonInheritanceAttribute("BusinessProcessNotFoundException", typeof(BusinessProcessNotFoundException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionNotFoundException", typeof(BusinessProcessDefinitionNotFoundException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionCreateException", typeof(BusinessProcessDefinitionCreateException))]
    [JsonInheritanceAttribute("SchemaFieldImportMismatchException", typeof(SchemaFieldImportMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportRelatedSchemaMismatchException", typeof(SchemaFieldImportRelatedSchemaMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportTypeMismatchException", typeof(SchemaFieldImportTypeMismatchException))]
    [JsonInheritanceAttribute("SnapshotTimeoutException", typeof(SnapshotTimeoutException))]
    [JsonInheritanceAttribute("SnapshotFailedException", typeof(SnapshotFailedException))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkException : System.Exception
    {
        [Newtonsoft.Json.JsonProperty("traceLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLevel TraceLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatusCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkBusinessException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkBusinessException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkBusinessException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TraceLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Critical")]
        Critical = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Information")]
        Information = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkValidationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkValidationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkConflictException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkConflictException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkConflictException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserEmailAlreadyExistsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserEmailAlreadyExistsException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmailAlreadyExistsException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserRoleAssignedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleAssignedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignedException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("missingUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RenderingException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderDeleteException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detailedErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderDeleteException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderDeleteException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderCreateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("virtualHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VirtualHost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detailErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderCreateException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("missingServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingServiceProviderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentVersionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultChannelDeleteException : PictureparkValidationException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DefaultChannelDeleteException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultChannelDeleteException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ElasticVersionUpdateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actualVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ElasticVersionUpdateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElasticVersionUpdateException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidVersionException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidVersionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidVersionException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotDeactivatedException : PictureparkException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EnvironmentNotDeactivatedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotDeactivatedException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotFoundException : PictureparkException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EnvironmentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EnvironmentDeactivationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentDeactivationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareByTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareByTokenNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareByTokenNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TokenGenerationException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Always)]
        public long Retries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TokenGenerationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenGenerationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputIdNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("outputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputIdNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputIdNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DriveCacheExpiredException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveCacheExpiredException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveCacheExpiredException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DriveFileNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveFileNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveFileNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DriveRequestException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveRequestException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveRequestException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TokenValidationException : PictureparkValidationException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TokenValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenValidationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LeaseNotAcquiredException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LeaseNotAcquiredException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeaseNotAcquiredException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OperationInProgressException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("leaseResourceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LeaseResourceType LeaseResourceType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OperationInProgressException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationInProgressException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum LeaseResourceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SchemaEditing")]
        SchemaEditing = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RetryException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerExceptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InnerExceptionDetail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RetryException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetryException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OwnerTokenNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkArgumentNullException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkArgumentNullException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkArgumentNullException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectTypeMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectTypeMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateTransitionException : InvalidStateException
    {
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateTransitionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateTransitionException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FailedToLockException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FailedToLockException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedToLockException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkOperationCanceledException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkOperationCanceledException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkOperationCanceledException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkApplicationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkApplicationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkApplicationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingCustomerDefaultLanguageException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("customerDefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerDefaultLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MissingCustomerDefaultLanguageException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingCustomerDefaultLanguageException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidArgumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("argumentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidArgumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidArgumentException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnknownException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionDetail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnknownException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnknownException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OwnerTokenInUseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenInUseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerViolationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedCustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentCustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerViolationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerViolationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAliasNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasInUseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("existingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingCustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAliasInUseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasInUseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotDeactivatedException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNotDeactivatedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotDeactivatedException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerDeactivationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDeactivationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerHostNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerHostNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotActiveException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNotActiveException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotActiveException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConfigurationIndexNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("configurationIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationIndex { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfigurationIndexNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationIndexNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSearchIndexDocException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateSearchIndexDocException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSearchIndexDocException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexDocNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIndexDocNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexDocNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexDocumentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexDocumentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexDocumentNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAliasException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("indexAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateAliasException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAliasException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIndexNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultSearchIndexDeleteException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DefaultSearchIndexDeleteException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultSearchIndexDeleteException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexInUseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndex { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIndexInUseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexInUseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexMappingException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexMappingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexMappingException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicatedSearchBehaviourException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("duplicatedSearchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DuplicatedSearchBehaviours { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicatedSearchBehaviourException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicatedSearchBehaviourException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchStringLeadingWildcardException : PictureparkValidationException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchStringLeadingWildcardException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchStringLeadingWildcardException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateAggregatorException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAggregatorException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidDateTimeFormatException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedFormat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidDateTimeFormatException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidDateTimeFormatException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidSortFieldException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSortFieldException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionConflictException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentVersionConflictException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionConflictException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RedisDatabaseExceededException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerCount", Required = Newtonsoft.Json.Required.Always)]
        public int CustomerCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxCount", Required = Newtonsoft.Json.Required.Always)]
        public int MaxCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startIndex", Required = Newtonsoft.Json.Required.Always)]
        public int StartIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("redisDatabaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int RedisDatabaseCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RedisDatabaseExceededException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RedisDatabaseExceededException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateDocumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateDocumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateDocumentException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreResponseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreResponseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreResponseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class QueryException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageServerError ServerError { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static QueryException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StorageServerError 
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageError Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageServerError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageServerError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StorageError 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rootCause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StorageRootCause> RootCause { get; set; }
    
        [Newtonsoft.Json.JsonProperty("causedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageCausedBy CausedBy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StorageRootCause 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageRootCause FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageRootCause>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StorageCausedBy 
    {
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerCausedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageCausedBy InnerCausedBy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageCausedBy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageCausedBy>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionOwnershipTransferException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missingUserRight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserRight MissingUserRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionOwnershipTransferException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionOwnershipTransferException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UserRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "ManageContent")]
        ManageContent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSharings")]
        ManageSharings = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageDrives")]
        ManageDrives = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageTransfer")]
        ManageTransfer = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageChannels")]
        ManageChannels = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSchemas")]
        ManageSchemas = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUsers")]
        ManageUsers = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUserRoles")]
        ManageUserRoles = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManagePermissions")]
        ManagePermissions = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSearchIndexes")]
        ManageSearchIndexes = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageRecipients")]
        ManageRecipients = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageCollections")]
        ManageCollections = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageListItems")]
        ManageListItems = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageServiceProviders")]
        ManageServiceProviders = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageEmbeds")]
        ManageEmbeds = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageTemplates")]
        ManageTemplates = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateRightException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateRightException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateRightException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionValidationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnsupportedListItemChangeCommandException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnsupportedListItemChangeCommandException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsupportedListItemChangeCommandException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemLayerException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemLayerException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemCyclicDependencyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemCyclicDependencyException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCyclicDependencyException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteListItemsWithReferencesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("referencesList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencesList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string References { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteListItemsWithReferencesException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteListItemsWithReferencesException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int FailedItemsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItemsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemUpdateManyException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateManyException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferInfoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferInfoId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferInfoNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferInfoNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FileTransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidTransferTypeException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidTransferTypeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidTransferTypeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TransferType
    {
        [System.Runtime.Serialization.EnumMember(Value = "FileUpload")]
        FileUpload = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileUploadAutoImport")]
        FileUploadAutoImport = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveImport")]
        DriveImport = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveExport")]
        DriveExport = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebDownload")]
        WebDownload = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SchemaImport")]
        SchemaImport = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class WrongChunkSizeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.Always)]
        public long Actual { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Always)]
        public long Expected { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WrongChunkSizeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrongChunkSizeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingDependenciesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MissingDependenciesException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingDependenciesException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationSelfReferencingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationSelfReferencingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationSelfReferencingException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldTypeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldActualType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldActualType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldExpectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldExpectedType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidChangeCommandFieldTypeInvalidException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldTypeInvalidException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldNotFoundException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidChangeCommandFieldNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandSchemaChangeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidChangeCommandSchemaChangeInvalidException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandSchemaChangeInvalidException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidMetadataException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("metadataErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataError> MetadataErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidMetadataException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidMetadataException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataError 
    {
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Always)]
        public int LineNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linePosition", Required = Newtonsoft.Json.Required.Always)]
        public int LinePosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationTypeNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeTargetDocTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetDocType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedTargetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedTargetDocType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationTypeTargetDocTypeMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeTargetDocTypeMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationFilterInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationFilterNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationFilterNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilterInvalidException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilterInvalidException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationNameInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationPrefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationNameInvalidException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationNameInvalidException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldOverwriteType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldOverwriteType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldOverwriteTypeMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteTypeMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldOverwriteIdException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteIdException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldIdDuplicatedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdDuplicatedException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoSimpleSearchNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldSchemaIndexInfoSimpleSearchNestingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoSimpleSearchNestingException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldSchemaIndexInfoNestingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoNestingException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdUppercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldIdUppercaseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdUppercaseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdLowercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaIdLowercaseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdLowercaseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInfoNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInfoNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexedFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("indexedFieldCount", Required = Newtonsoft.Json.Required.Always)]
        public double IndexedFieldCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedFieldThreshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexedFieldThresholdExceededException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexedFieldThresholdExceededException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SortableFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sortableFieldCount", Required = Newtonsoft.Json.Required.Always)]
        public double SortableFieldCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int SortableFieldThreshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortableFieldThresholdExceededException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortableFieldThresholdExceededException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaInfoException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateSchemaInfoException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaInfoException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNumberRangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal MinValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal MaxValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldNumberRangeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNumberRangeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInUseContentSchemaException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentSchemaException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseListItemException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listItemCount", Required = Newtonsoft.Json.Required.Always)]
        public long ListItemCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInUseListItemException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseListItemException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentCount", Required = Newtonsoft.Json.Required.Always)]
        public long ContentCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInUseContentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldNamespaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldNamespaces { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInUseFieldException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseFieldException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNotFoundInSearchIndexException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaNotFoundInSearchIndexException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNotFoundInSearchIndexException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateMetadataDisplayPatternException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayPatternId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayPatternId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateMetadataDisplayPatternException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateMetadataDisplayPatternException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateSchemaException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportEmptyException : PictureparkValidationException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaImportEmptyException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportEmptyException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportVersionMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("providedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvidedVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaImportVersionMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportVersionMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaCyclicDependencyException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaCyclicDependencyException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCyclicDependencyException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceFieldIndexDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInheritanceFieldIndexDeviationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceFieldIndexDeviationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceTypeDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInheritanceTypeDeviationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceTypeDeviationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaValidationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaSortFieldException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSortFieldException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldIdException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTypeChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldTypeChangeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTypeChangeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIndexException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldIndexException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIndexException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSortableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldNotSortableException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSortableException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaNoContentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoContentException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaParentChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldSchemaParentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewSchemaParentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaParentChangeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaParentChangeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMissingTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedSchemaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> ExpectedSchemaTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaMissingTypeException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMissingTypeException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Layer")]
        Layer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "List")]
        List = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Struct")]
        Struct = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaPermissionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaNoLayerException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoLayerException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaIdException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaInUseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemSchemaInvalidModificationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SystemSchemaInvalidModificationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemSchemaInvalidModificationException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentsNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteContentsWithRelationsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("relationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RelationList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relations { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteContentsWithRelationsException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteContentsWithRelationsException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentMetadataUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int FailedItemsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItemsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentMetadataUpdateManyException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateManyException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentLayerInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentLayerInvalidException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentLayerInvalidException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessWaitTimeoutException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessWaitTimeoutException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitTimeoutException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessEngineRequestException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("engineError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineError { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessEngineRequestException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessEngineRequestException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionNotFoundException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionCreateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProcessDefinitionIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionCreateException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("importingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("existingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldImportMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportRelatedSchemaMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("importingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingRelatedSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("existingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingRelatedSchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldImportRelatedSchemaMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportRelatedSchemaMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("importingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("existingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaFieldImportTypeMismatchException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportTypeMismatchException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotTimeoutException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotTimeoutException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotTimeoutException>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotFailedException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotFailedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotFailedException>(data);
        }
    
    }
    
    /// <summary>A content detail.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentDetail 
    {
        /// <summary>Audit data with information regarding document creation and modification.</summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The content data</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }
    
        /// <summary>The id of the content schema</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>The type of content</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the content schema's
        ///              display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>An optional list of layer schemas ids</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>The metadata dictionary</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>A list of rendering ouputs for underlying digital file.</summary>
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Output> Outputs { get; set; }
    
        /// <summary>The id of a owner token. Defines the content owner.</summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        /// <summary>The trashed flag.</summary>
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserAudit 
    {
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAudit>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Bitmap")]
        Bitmap = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VectorGraphic")]
        VectorGraphic = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RawImage")]
        RawImage = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InterchangeDocument")]
        InterchangeDocument = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "WordProcessingDocument")]
        WordProcessingDocument = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TextDocument")]
        TextDocument = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "DesktopPublishingDocument")]
        DesktopPublishingDocument = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Presentation")]
        Presentation = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spreadsheet")]
        Spreadsheet = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Archive")]
        Archive = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Audio")]
        Audio = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Video")]
        Video = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "Font")]
        Font = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Multimedia")]
        Multimedia = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SourceCode")]
        SourceCode = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "Database")]
        Database = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cad")]
        Cad = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "Model3d")]
        Model3d = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "ContentItem")]
        ContentItem = 20,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayValueDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayValueDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueDictionary>(data);
        }
    
    }
    
    /// <summary>A custom implementation of Dictionary{string, object}</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DataDictionary : System.Collections.Generic.Dictionary<string, object>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDictionary>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDetail", typeof(OutputDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Output 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDataBase Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Output FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDataImage", typeof(OutputDataImage))]
    [JsonInheritanceAttribute("OutputDataAudio", typeof(OutputDataAudio))]
    [JsonInheritanceAttribute("OutputDataVideo", typeof(OutputDataVideo))]
    [JsonInheritanceAttribute("OutputDataDocument", typeof(OutputDataDocument))]
    [JsonInheritanceAttribute("OutputDataDefault", typeof(OutputDataDefault))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class OutputDataBase 
    {
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDataImage : OutputDataBase
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataImage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataImage>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDataAudio : OutputDataBase
    {
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataAudio FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataAudio>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDataVideo : OutputDataBase
    {
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sprites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sprite> Sprites { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataVideo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataVideo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sprite 
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan End { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sprite FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sprite>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDataDocument : OutputDataBase
    {
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDataDefault : OutputDataBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDataDefault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataDefault>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputDetail : Output
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentSearchRequest 
    {
        /// <summary>Limits the simple search fields to the fields available in the specified channel.</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the display values included in the search response. Defaults to all display values.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DisplayPatternIds { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied in the specified order.</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        /// <summary>Filter the returned contents that have or not have broken references</summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; }
    
        /// <summary>Limits the content document result set to specific ContentRights the user has</summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> RightsFilter { get; set; }
    
        /// <summary>Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.</summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SearchBehaviour
    {
        [System.Runtime.Serialization.EnumMember(Value = "DropInvalidCharactersOnFailure")]
        DropInvalidCharactersOnFailure = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "WildcardOnSingleTerm")]
        WildcardOnSingleTerm = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SortInfo 
    {
        /// <summary>The elastic search index field to sort on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The sort direction (Asc/Desc).</summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SortDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Desc")]
        Desc = 1,
    
    }
    
    /// <summary>The FilterBase is the base class for all filters.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AggregationFilter", typeof(AggregationFilter))]
    [JsonInheritanceAttribute("AndFilter", typeof(AndFilter))]
    [JsonInheritanceAttribute("OrFilter", typeof(OrFilter))]
    [JsonInheritanceAttribute("NotFilter", typeof(NotFilter))]
    [JsonInheritanceAttribute("DateRangeFilter", typeof(DateRangeFilter))]
    [JsonInheritanceAttribute("ExistsFilter", typeof(ExistsFilter))]
    [JsonInheritanceAttribute("GeoBoundingBoxFilter", typeof(GeoBoundingBoxFilter))]
    [JsonInheritanceAttribute("GeoDistanceFilter", typeof(GeoDistanceFilter))]
    [JsonInheritanceAttribute("NestedFilter", typeof(NestedFilter))]
    [JsonInheritanceAttribute("NumericRangeFilter", typeof(NumericRangeFilter))]
    [JsonInheritanceAttribute("PrefixFilter", typeof(PrefixFilter))]
    [JsonInheritanceAttribute("TermFilter", typeof(TermFilter))]
    [JsonInheritanceAttribute("TermsFilter", typeof(TermsFilter))]
    [JsonInheritanceAttribute("ChildFilter", typeof(ChildFilter))]
    [JsonInheritanceAttribute("ParentFilter", typeof(ParentFilter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    
    }
    
    /// <summary>The AndFilter&gt; is a compound filter and returns documents that match all of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    
    }
    
    /// <summary>The OrFilter is a compound filter and returns documents that match any of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    
    }
    
    /// <summary>The NotFilter is a compound filter and returns documents that do not match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    
    }
    
    /// <summary>The DateRangeFilter returns documents with fields that have date values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The date range. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    
    }
    
    /// <summary>The date range class used in aggregators and filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        /// <summary>The to value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    
    }
    
    /// <summary>A custom dictionary type to distinguish language specific class properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    
    }
    
    /// <summary>The ExistsFilter returns documents that have at least one non-null value in the original field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    
    }
    
    /// <summary>The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The top left longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("topLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        /// <summary>The bottom right longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("bottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    
    }
    
    /// <summary>The GeoDistanceFilter returns documents that include only hits that exists within a specific distance from a geo point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The range distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    
    }
    
    /// <summary>The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    
    }
    
    /// <summary>The NumericRangeFilter returns documents with fields that have numeric values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The numeric range with from and to properties.</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NumericRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    
    }
    
    /// <summary>The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The prefix term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    
    }
    
    /// <summary>The TermFilter returns documents that contain the exact term specified in the inverted index.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    
    }
    
    /// <summary>The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of OR combined terms.</summary>
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    
    }
    
    /// <summary>An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>The name of the aggregation this filter is connected to.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        /// <summary>The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter, GeoDistanceFilter and NestedFilter.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("temporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    
    }
    
    /// <summary>The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a child.</summary>
        [Newtonsoft.Json.JsonProperty("childType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChildType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChildFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data);
        }
    
    }
    
    /// <summary>The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a parent.</summary>
        [Newtonsoft.Json.JsonProperty("parentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParentFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum LifeCycleFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = "ActiveOnly")]
        ActiveOnly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InactiveOnly")]
        InactiveOnly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActiveInactiveOnly")]
        ActiveInactiveOnly = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BrokenDependenciesFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NotBrokenOnly")]
        NotBrokenOnly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BrokenOnly")]
        BrokenOnly = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContentRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AccessOriginal")]
        AccessOriginal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Trash")]
        Trash = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContentSearchType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Metadata")]
        Metadata = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FullText")]
        FullText = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataAndFullText")]
        MetadataAndFullText = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfContent 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Content> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfContent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfContent : BaseResultOfContent
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfContent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentSearchResult : SearchBehaviourBaseResultOfContent
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Content 
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The id of the schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with schema type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>Contains display values of the specified language, rendered according to the content schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> DisplayValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>All the ids of the broken references (tagboxes)</summary>
        [Newtonsoft.Json.JsonProperty("brokenReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenReferenceIds { get; set; }
    
        /// <summary>All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)</summary>
        [Newtonsoft.Json.JsonProperty("brokenIndirectReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenIndirectReferenceIds { get; set; }
    
        /// <summary>All the target ids of the broken relations</summary>
        [Newtonsoft.Json.JsonProperty("brokenRelationTargetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenRelationTargetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class QueryDebugInformation 
    {
        [Newtonsoft.Json.JsonProperty("general", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string General { get; set; }
    
        [Newtonsoft.Json.JsonProperty("auditTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuditTrail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static QueryDebugInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryDebugInformation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentAggregationOnChannelRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Special filters used to filter down on a specific aggregated value.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }
    
        /// <summary>Limits the simple search fields to the fields available in the specified channel and retrieve the existing aggregation for it.</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages in configured within the customer's language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        /// <summary>Filter the content document result set to those that have or not have broken references</summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; }
    
        /// <summary>Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.</summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentAggregationOnChannelRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAggregationOnChannelRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentAggregationRequest : ContentAggregationOnChannelRequest
    {
        /// <summary>Defines the aggregation resultset.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAggregationRequest>(data);
        }
    
    }
    
    /// <summary>The AggregatorBase is the base class for all aggregators.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DateRangeAggregator", typeof(DateRangeAggregator))]
    [JsonInheritanceAttribute("GeoDistanceAggregator", typeof(GeoDistanceAggregator))]
    [JsonInheritanceAttribute("NestedAggregator", typeof(NestedAggregator))]
    [JsonInheritanceAttribute("NumericRangeAggregator", typeof(NumericRangeAggregator))]
    [JsonInheritanceAttribute("TermsAggregator", typeof(TermsAggregator))]
    [JsonInheritanceAttribute("TermsRelationAggregator", typeof(TermsRelationAggregator))]
    [JsonInheritanceAttribute("TermsEnumAggregator", typeof(TermsEnumAggregator))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class AggregatorBase 
    {
        /// <summary>The slug name of the aggregation. Must be unique per aggregation request.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The translated names of the aggregation.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>An optional aggregator list for nested aggregations.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregatorBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data);
        }
    
    }
    
    /// <summary>The DateRangeAggregator is a multi-bucket range aggregation dedicated for date values. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of date ranges. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DateRangeForAggregator> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data);
        }
    
    }
    
    /// <summary>The date range class used in aggregators.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateRangeForAggregator 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        /// <summary>The to value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeForAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeForAggregator>(data);
        }
    
    }
    
    /// <summary>The GeoDistanceAggregator is a multi-bucket range aggregation that works on geo_point fields. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The latitude/logitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>A list of numeric ranges in meter.</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GeoDistance> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoDistance 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistance>(data);
        }
    
    }
    
    /// <summary>The NestedAggregator is a special single bucket aggregation that enables aggregating nested documents.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NestedAggregator : AggregatorBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data);
        }
    
    }
    
    /// <summary>The NumericRangeAggregator is a multi-bucket range aggregation. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of numeric ranges.</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NumericRangeForAggregator> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NumericRangeForAggregator 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeForAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeForAggregator>(data);
        }
    
    }
    
    /// <summary>The TermsAggregator is a multi-bucket value aggregation where buckets are dynamically built - one per unique value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TermsAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field (not analyzed) to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The size parameter can be set to define how many term buckets should be returned out of the overall terms list.</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        /// <summary>Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Includes { get; set; }
    
        /// <summary>Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Excludes { get; set; }
    
        /// <summary>Search string to be used to search within possible aggregation values</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used</summary>
        [Newtonsoft.Json.JsonProperty("searchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchFields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data);
        }
    
    }
    
    /// <summary>The TermsRelationAggregator is derived from TermsAggregator and used for aggregations on relation item ids.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        /// <summary>When aggregating on relations ids the DocumentType is needed to resolve the target item translation.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsRelationAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TermsRelationAggregatorDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ListItem")]
        ListItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Schema")]
        Schema = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ContentPermissionSet")]
        ContentPermissionSet = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Owner")]
        Owner = 5,
    
    }
    
    /// <summary>The TermsRelationAggregator is derived from the TermsAggregator and used for aggregations on indexed enum values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        /// <summary>When aggregating on enum fields EnumType is needed to resolve the enum translation.</summary>
        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnumType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsEnumAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ObjectAggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }
    
        /// <summary>The search string used to query the data</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Flag to notify if the SearchString was modified compared to the original requested one</summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectAggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectAggregationResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sumOtherDocCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumOtherDocCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResultItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResultItem> AggregationResultItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AggregationResultItem 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationFilter Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResultItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentDownloadLinkCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentDownloadRequestItem> Contents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDownloadLinkCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadLinkCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentDownloadRequestItem 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDownloadRequestItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadRequestItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DownloadLink 
    {
        [Newtonsoft.Json.JsonProperty("downloadToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadLink>(data);
        }
    
    }
    
    /// <summary>Values that represent thumbnail sizes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ThumbnailSize
    {
        [System.Runtime.Serialization.EnumMember(Value = "Small")]
        Small = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Large")]
        Large = 2,
    
    }
    
    /// <summary>A request structure for creating a content document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentCreateRequest 
    {
        /// <summary>The id of a schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with schema type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>The content data of the content document.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The layer metadata of the content document.</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentCreateRequest>(data);
        }
    
    }
    
    /// <summary>A request structure for creating multiple content documents.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentCreateManyRequest 
    {
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Create requests</summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentCreateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentCreateManyRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentCreateManyRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetails", typeof(BusinessProcessDetails))]
    [JsonInheritanceAttribute("BusinessProcessBulkResponse", typeof(BusinessProcessBulkResponse))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcess 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceDocType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supportsCancellation", Required = Newtonsoft.Json.Required.Always)]
        public bool SupportsCancellation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessScope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessScope BusinessProcessScope { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle LifeCycle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Always)]
        public bool Finished { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessProcessState> StateHistory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processDefinitionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcess>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BusinessProcessScope
    {
        [System.Runtime.Serialization.EnumMember(Value = "System")]
        System = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BusinessProcessLifeCycle
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Succeeded")]
        Succeeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CancellationInProgress")]
        CancellationInProgress = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessState 
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessState>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessBulkResponse : BusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkResponse Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessBulkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBulkResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BulkResponse 
    {
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkResponseRow> Rows { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BulkResponseRow 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponseRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponseRow>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentDeactivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolve", Required = Newtonsoft.Json.Required.Always)]
        public bool Resolve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DisplayPatternIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDeactivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDeactivateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentReactivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolve", Required = Newtonsoft.Json.Required.Always)]
        public bool Resolve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DisplayPatternIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentReactivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentReactivateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentFileUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFileUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentMetadataUpdateRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>An id list of schemas with schema type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>The dynamic data structure matching the field schematics of the content schema (ContentSchemaId).</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        /// <summary>The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>Options to modify the behavior for updating schemas.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemasUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption LayerSchemasUpdateOptions { get; set; }
    
        /// <summary>Options to modify the behavior for updating the values of schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaFieldsUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption SchemaFieldsUpdateOptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UpdateOption
    {
        [System.Runtime.Serialization.EnumMember(Value = "Merge")]
        Merge = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Replace")]
        Replace = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentPermissionsUpdateRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentPermissionsUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionsUpdateRequest>(data);
        }
    
    }
    
    /// <summary>Update many contents metadata</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentMetadataUpdateManyRequest 
    {
        /// <summary>Allow storing references to missing list items</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Update requests</summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentMetadataUpdateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentMetadataUpdateManyRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateManyRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentOwnershipTransferRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        /// <summary>The id of the user to whom the content document has to be transfered to.</summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentOwnershipTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentOwnershipTransferRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentsOwnershipTransferRequest 
    {
        /// <summary>The content ids.</summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        /// <summary>The id of user to whom the content documents have to be transfered to.</summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsOwnershipTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsOwnershipTransferRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ContentFieldsUpdateRequest", typeof(ContentFieldsUpdateRequest))]
    [JsonInheritanceAttribute("ContentFieldsFilterUpdateRequest", typeof(ContentFieldsFilterUpdateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MetadataValuesChangeRequestBase 
    {
        /// <summary>A container for all change commads.</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Create notification and notify on progress</summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeRequestBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeRequestBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentFieldsUpdateRequest : MetadataValuesChangeRequestBase
    {
        /// <summary>The ids of the content documents.</summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFieldsUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFieldsUpdateRequest>(data);
        }
    
    }
    
    /// <summary>The base class for metadata value change commands.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpdateCommand", typeof(MetadataValuesSchemaUpdateCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpsertCommand", typeof(MetadataValuesSchemaUpsertCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaRemoveCommand", typeof(MetadataValuesSchemaRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaReplaceCommand", typeof(MetadataValuesSchemaReplaceCommand))]
    [JsonInheritanceAttribute("MetadataValuesFieldRemoveCommand", typeof(MetadataValuesFieldRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemAddCommand", typeof(MetadataValuesSchemaItemAddCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemRemoveCommand", typeof(MetadataValuesSchemaItemRemoveCommand))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MetadataValuesChangeCommandBase 
    {
        /// <summary>The id of the schema to which the operation scope is addressed.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeCommandBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeCommandBase>(data);
        }
    
    }
    
    /// <summary>Updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaUpdateCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpdateCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpdateCommand>(data);
        }
    
    }
    
    /// <summary>Adds or updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaUpsertCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpsertCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpsertCommand>(data);
        }
    
    }
    
    /// <summary>Removes schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaRemoveCommand : MetadataValuesChangeCommandBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaRemoveCommand>(data);
        }
    
    }
    
    /// <summary>Replaces schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaReplaceCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The metadata values containing the new values for the schema. All old values will be overwritten.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaReplaceCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaReplaceCommand>(data);
        }
    
    }
    
    /// <summary>Removes a field and its value from the schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesFieldRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The path of the field to be removed (within tha data structure), e.g. "data.schemaId.fieldId"</summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesFieldRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesFieldRemoveCommand>(data);
        }
    
    }
    
    /// <summary>Adds a list item id reference to a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaItemAddCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The path of the field relative to the Content or Layer schema values defined by the schemaId property</summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }
    
        /// <summary>The field namespace</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be added.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemAddCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemAddCommand>(data);
        }
    
    }
    
    /// <summary>Removes a list item id reference from a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataValuesSchemaItemRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The path of the field relative to the Content or Layer schema values defined by the schemaId property</summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }
    
        /// <summary>The field namespace</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be removed.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemRemoveCommand>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentFieldsFilterUpdateRequest : MetadataValuesChangeRequestBase
    {
        [Newtonsoft.Json.JsonProperty("contentFilterRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentFilterRequest ContentFilterRequest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFieldsFilterUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFieldsFilterUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentFilterRequest 
    {
        /// <summary>Limits the simple search fields to the fields available in the specified channel.</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.</summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        /// <summary>Limits the content document result set to specific ContentRights the user has</summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> RightsFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFilterRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFilterRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessSearchRequest 
    {
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfBusinessProcess 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessProcess> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfBusinessProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfBusinessProcess>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfBusinessProcess : BaseResultOfBusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfBusinessProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfBusinessProcess>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessSearchResult : SearchBehaviourBaseResultOfBusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessWaitResult 
    {
        [Newtonsoft.Json.JsonProperty("hasStateHit", Required = Newtonsoft.Json.Required.Always)]
        public bool HasStateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stateHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasLifeCycleHit", Required = Newtonsoft.Json.Required.Always)]
        public bool HasLifeCycleHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lifeCycleHit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle LifeCycleHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Always)]
        public bool Finished { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcess BusinessProcess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessWaitResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessDetails : BusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessDetailsDataBase Details { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetails>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataBulkResponse", typeof(BusinessProcessDetailsDataBulkResponse))]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataSchemaImport", typeof(BusinessProcessDetailsDataSchemaImport))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class BusinessProcessDetailsDataBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDetailsDataBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessDetailsDataBulkResponse : BusinessProcessDetailsDataBase
    {
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkResponse Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDetailsDataBulkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBulkResponse>(data);
        }
    
    }
    
    /// <summary>Business process detailed information regarding Schema / ListItems import operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BusinessProcessDetailsDataSchemaImport : BusinessProcessDetailsDataBase
    {
        /// <summary>Result information of a schema import operation</summary>
        [Newtonsoft.Json.JsonProperty("schemaImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaImportResult SchemaImportResult { get; set; }
    
        /// <summary>Result information of a list item import operation</summary>
        [Newtonsoft.Json.JsonProperty("listItemImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemImportResult ListItemImportResult { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDetailsDataSchemaImport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataSchemaImport>(data);
        }
    
    }
    
    /// <summary>Result information of a schema import operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaImportResult 
    {
        /// <summary>Number of schemas imported</summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedSchemaCount { get; set; }
    
        /// <summary>Number of schema skipped during import phase because they were already found in the system</summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedSchemaCount { get; set; }
    
        /// <summary>Total number of schemas requested to be imported</summary>
        [Newtonsoft.Json.JsonProperty("totalSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSchemaCount { get; set; }
    
        /// <summary>Ids of the schemas that were not imported because already found in the system</summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedSchemaIds { get; set; }
    
        /// <summary>Ids of the schemas that were successfully imported</summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaImportResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportResult>(data);
        }
    
    }
    
    /// <summary>Result information of a list item import operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemImportResult 
    {
        /// <summary>Number of list items imported</summary>
        [Newtonsoft.Json.JsonProperty("importedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedListItemCount { get; set; }
    
        /// <summary>Number of list items skipped during import phase because they were already found in the system</summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedListItemCount { get; set; }
    
        /// <summary>Total number of list items requested to be imported</summary>
        [Newtonsoft.Json.JsonProperty("totalListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalListItemCount { get; set; }
    
        /// <summary>Ids of the list items that were not imported because already found in the system</summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedListItemIds { get; set; }
    
        /// <summary>Ids of the list items that were successfully imported</summary>
        [Newtonsoft.Json.JsonProperty("importedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedListItemIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemImportResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemImportResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentHistorySearchRequest 
    {
        /// <summary>Limits the start date of the search request. Default to last 1 year.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime From { get; set; }
    
        /// <summary>Limits the end date of the search request. Default to now.</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime To { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>To get a large amount of data, page token returned from the response can be used to get all data.</summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        /// <summary>Limits the search to a specific document id. E.g. ContentId</summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        /// <summary>The document version to search. Default to -1 to not limit to a specific document version.</summary>
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; } = -1L;
    
        /// <summary>Limits the search to a specifc document type.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortInfo Sort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistorySearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentHistorySearchResult 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentHistory> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistorySearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentHistory 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTypeContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTypeContract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime DocumentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditHistory Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentChangeAction Action { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistory>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserAuditHistory 
    {
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAuditHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuditHistory>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocumentChangeAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Create")]
        Create = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Activate")]
        Activate = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deactivate")]
        Deactivate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentHistoryDifference 
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long OldDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long NewDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OldValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object NewValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistoryDifference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistoryDifference>(data);
        }
    
    }
    
    /// <summary>The detail view item for the list item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemDetail 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the list schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Broadens the search and include all schema descendant list items.</summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }
    
        /// <summary>Limits the search to list items of the provided schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the display values included in the search response. Defaults to all display values.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DisplayPatternIds { get; set; }
    
        /// <summary>Filter the returned list items that have or not have broken references</summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; }
    
        /// <summary>Define the display values included in the search response for the referenced fields. Defaults to no display value.</summary>
        [Newtonsoft.Json.JsonProperty("referencedFieldsDisplayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedFieldsDisplayPatternIds { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        /// <summary>When set to true the content data is included in the result items.</summary>
        [Newtonsoft.Json.JsonProperty("includeContentData", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeContentData { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        /// <summary>Limits the list item document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfListItem 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ListItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfListItem>(data);
        }
    
    }
    
    /// <summary>Encapsulates the result of a list item search.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemSearchResult : BaseResultOfListItem
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchResult>(data);
        }
    
    }
    
    /// <summary>A document stored in the elastic search metadata index, with fields corresponding to the the schemantics of its underlying list schema.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItem 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the list schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemAggregationRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Special filters used to filter down on a specific aggregated value.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }
    
        /// <summary>Defines the aggregation resultset.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }
    
        /// <summary>Broadens the aggregation and include all schema descendant list items.</summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }
    
        /// <summary>Filter the list items document result set to those that have or not have broken references</summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; }
    
        /// <summary>Limits the aggregation to list items of the provided schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        /// <summary>Limits the list item document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemAggregationRequest>(data);
        }
    
    }
    
    /// <summary>A request structure for creating a list item document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemCreateRequest 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>The list item id. When not provided a Guid is generated.</summary>
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateRequest>(data);
        }
    
    }
    
    /// <summary>A request structure for creating multiple list items.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemCreateManyRequest 
    {
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Create requests</summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ListItemCreateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemCreateManyRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateManyRequest>(data);
        }
    
    }
    
    /// <summary>A request structure for updating a list item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemUpdateRequest 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateRequest>(data);
        }
    
    }
    
    /// <summary>A request structure for updating multiple list items.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemUpdateManyRequest 
    {
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Update requests</summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ListItemUpdateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemUpdateManyRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateManyRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemDeactivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemDeactivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDeactivateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemReactivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemReactivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemReactivateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemFieldsUpdateRequest 
    {
        /// <summary>The ids of the list items whose fields need to be updated</summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }
    
        /// <summary>The change commads to be applied to the list items</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Create notification and notify on progress</summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemFieldsUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsUpdateRequest>(data);
        }
    
    }
    
    /// <summary>ListItemFieldsFilterUpdateRequest class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemFieldsFilterUpdateRequest 
    {
        /// <summary>The search request used to filter the list items on which the change commands must be applied</summary>
        [Newtonsoft.Json.JsonProperty("listItemFilterRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemFilterRequest ListItemFilterRequest { get; set; }
    
        /// <summary>The change commads to be applied to the list items</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        /// <summary>Allow storing references to missing list items / contents</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Create notification and notify on progress</summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemFieldsFilterUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsFilterUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemFilterRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Broadens the search and include all schema descendant list items.</summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }
    
        /// <summary>Limits the search to list items of the provided schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to customer default language.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemFilterRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFilterRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ReferencesBase 
    {
        [Newtonsoft.Json.JsonProperty("targetMetadataItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetMetadataItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataReference> References { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isReferencedByRestrictedItem", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReferencedByRestrictedItem { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReferencesBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferencesBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListItemReferences : ReferencesBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemReferences FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemReferences>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataReference 
    {
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetDocType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataReference>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LiveStreamSearchRequest 
    {
        /// <summary>Limits the start date of the search request.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime From { get; set; }
    
        /// <summary>Limits the end date of the search request.</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime To { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>To get a large amount of data, page token returned from the response can be used to get all data.</summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LiveStreamSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfObject 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfObject>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfObject : BaseResultOfObject
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfObject>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ObjectSearchResult : SearchBehaviourBaseResultOfObject
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaDetail 
    {
        /// <summary>The schema id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }
    
        /// <summary>The schema fields overwrite information.</summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>Is true when schema is system provided.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        /// <summary>The owner token id. Defines the schema owner.</summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        /// <summary>Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }
    
        /// <summary>A complete id list of all descendant schemas.</summary>
        [Newtonsoft.Json.JsonProperty("descendantSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DescendantSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The number of fields generated by the schema for the Search operations.</summary>
        [Newtonsoft.Json.JsonProperty("searchFieldCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchFieldCount SearchFieldCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayPattern 
    {
        /// <summary>Defines the template engine for parsing the templates.</summary>
        [Newtonsoft.Json.JsonProperty("templateEngine", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateEngine TemplateEngine { get; set; }
    
        /// <summary>Defines the pattern type of the templates.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatternType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }
    
        /// <summary>Language specific pattern templates.</summary>
        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Templates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPattern>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TemplateEngine
    {
        [System.Runtime.Serialization.EnumMember(Value = "DotLiquid")]
        DotLiquid = 0,
    
    }
    
    /// <summary>The field base class.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FieldBoolean", typeof(FieldBoolean))]
    [JsonInheritanceAttribute("FieldDate", typeof(FieldDate))]
    [JsonInheritanceAttribute("FieldDateTime", typeof(FieldDateTime))]
    [JsonInheritanceAttribute("FieldDateTimeArray", typeof(FieldDateTimeArray))]
    [JsonInheritanceAttribute("FieldDecimal", typeof(FieldDecimal))]
    [JsonInheritanceAttribute("FieldDictionary", typeof(FieldDictionary))]
    [JsonInheritanceAttribute("FieldDictionaryArray", typeof(FieldDictionaryArray))]
    [JsonInheritanceAttribute("FieldGeoPoint", typeof(FieldGeoPoint))]
    [JsonInheritanceAttribute("FieldLong", typeof(FieldLong))]
    [JsonInheritanceAttribute("FieldLongArray", typeof(FieldLongArray))]
    [JsonInheritanceAttribute("FieldSingleFieldset", typeof(FieldSingleFieldset))]
    [JsonInheritanceAttribute("FieldMultiFieldset", typeof(FieldMultiFieldset))]
    [JsonInheritanceAttribute("FieldSingleTagbox", typeof(FieldSingleTagbox))]
    [JsonInheritanceAttribute("FieldMultiTagbox", typeof(FieldMultiTagbox))]
    [JsonInheritanceAttribute("FieldString", typeof(FieldString))]
    [JsonInheritanceAttribute("FieldStringArray", typeof(FieldStringArray))]
    [JsonInheritanceAttribute("FieldTranslatedString", typeof(FieldTranslatedString))]
    [JsonInheritanceAttribute("FieldSingleRelation", typeof(FieldSingleRelation))]
    [JsonInheritanceAttribute("FieldMultiRelation", typeof(FieldMultiRelation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class FieldBase 
    {
        /// <summary>The field id. Can be a slug and must be unique within the schema.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The index id is auto generated by the system.</summary>
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        /// <summary>The namespace is auto generated by the system.</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>Language specific field names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific field descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Defines if a field value is mandatory or not.</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }
    
        /// <summary>Defines if the field can be edited or not.</summary>
        [Newtonsoft.Json.JsonProperty("fixed", Required = Newtonsoft.Json.Required.Always)]
        public bool Fixed { get; set; }
    
        /// <summary>Maps the field in the elastic filter index.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        /// <summary>Includes fields in the simple search.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        /// <summary>Field is stored for sorting.</summary>
        [Newtonsoft.Json.JsonProperty("sortable", Required = Newtonsoft.Json.Required.Always)]
        public bool Sortable { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldBoolean : FieldBase
    {
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBoolean>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDate : FieldBase
    {
        /// <summary>Defines the date format structure.</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDateTime : FieldBase
    {
        /// <summary>Defines the date time format structure.</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTime>(data);
        }
    
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDateTimeArray : FieldDateTime
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTimeArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTimeArray>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDecimal : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the lowest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        /// <summary>Defines the highest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDecimal>(data);
        }
    
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDictionary : FieldBase
    {
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionary>(data);
        }
    
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldDictionaryArray : FieldDictionary
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionaryArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionaryArray>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldGeoPoint : FieldBase
    {
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldGeoPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGeoPoint>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldLong : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the lowest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        /// <summary>Defines the highest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLong FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLong>(data);
        }
    
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldLongArray : FieldLong
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLongArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLongArray>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldSingleFieldset : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleFieldset>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaIndexingInfo 
    {
        /// <summary>A collecction of indexing information for the fields of a schema</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldIndexingInfo> Fields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaIndexingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIndexingInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldIndexingInfo 
    {
        /// <summary>The field Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Maps the field in the elastic search index and its values become searchable.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        /// <summary>Includes fields in the simple search. Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        /// <summary>Include the field for the sort index.</summary>
        [Newtonsoft.Json.JsonProperty("sortable", Required = Newtonsoft.Json.Required.Always)]
        public bool Sortable { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        /// <summary>Indexing information of fields of the schema related to this field (if existing)</summary>
        [Newtonsoft.Json.JsonProperty("relatedSchemaIndexing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo RelatedSchemaIndexing { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldIndexingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldIndexingInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldMultiFieldset : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible fieldset count.</summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Defines the lowest possible fieldset count.</summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiFieldset>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldSingleTagbox : FieldBase
    {
        /// <summary>The id of the schema with type list.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleTagbox>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldMultiTagbox : FieldBase
    {
        /// <summary>The id of the schema with type list.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Defines the lowest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiTagbox>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldString : FieldBase
    {
        /// <summary>It is a DotLiquid template.</summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        /// <summary>If true the Template will only render on item creation otherwise it will render on each update.</summary>
        [Newtonsoft.Json.JsonProperty("keepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        /// <summary>Contains a regex validation pattern.</summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the minimal string length.</summary>
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        /// <summary>Defines the maximal string length.</summary>
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        /// <summary>A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("indexAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> IndexAnalyzers { get; set; }
    
        /// <summary>Analyzers used for the simple search. Only one analyzer per type is allowed. Only considered if SimpleSearch is set to true.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> SimpleSearchAnalyzers { get; set; }
    
        /// <summary>Displays the field value in a multiline component.</summary>
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        /// <summary>Similar to an enumeration valid field values are limited to values of this list.</summary>
        [Newtonsoft.Json.JsonProperty("grantedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GrantedValues { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldString>(data);
        }
    
    }
    
    /// <summary>The analyzer base class.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("EdgeNGramAnalyzer", typeof(EdgeNGramAnalyzer))]
    [JsonInheritanceAttribute("LanguageAnalyzer", typeof(LanguageAnalyzer))]
    [JsonInheritanceAttribute("NGramAnalyzer", typeof(NGramAnalyzer))]
    [JsonInheritanceAttribute("PathHierarchyAnalyzer", typeof(PathHierarchyAnalyzer))]
    [JsonInheritanceAttribute("SimpleAnalyzer", typeof(SimpleAnalyzer))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class AnalyzerBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyzerBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyzerBase>(data);
        }
    
    }
    
    /// <summary>An analyzer using the EdgeNGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EdgeNGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EdgeNGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EdgeNGramAnalyzer>(data);
        }
    
    }
    
    /// <summary>An analyzer using a language analyzer. Restricted to the languages supported by elastic search.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LanguageAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageAnalyzer>(data);
        }
    
    }
    
    /// <summary>An analyzer using the NGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramAnalyzer>(data);
        }
    
    }
    
    /// <summary>An analyzer using the path hierarchy tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PathHierarchyAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PathHierarchyAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PathHierarchyAnalyzer>(data);
        }
    
    }
    
    /// <summary>An analyzer using a custom pattern tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimpleAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimpleAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleAnalyzer>(data);
        }
    
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldStringArray : FieldString
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldStringArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldStringArray>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldTranslatedString : FieldBase
    {
        /// <summary>Contains a regex validation pattern.</summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the minimal string length.</summary>
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        /// <summary>Defines the maximal string length.</summary>
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        /// <summary>A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("indexAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> IndexAnalyzers { get; set; }
    
        /// <summary>Analyzers used for the simple search. Only one analyzer per type is allowed. Only considered if SimpleSearch is set to true.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> SimpleSearchAnalyzers { get; set; }
    
        /// <summary>Displays the field value in a multiline component.</summary>
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        /// <summary>Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.
        /// If Required is true, the field and all its metadata languages are required, including x-default.
        /// If Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory, including x-default.</summary>
        [Newtonsoft.Json.JsonProperty("requiredMetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredMetadataLanguages { get; set; }
    
        /// <summary>It is a DotLiquid template.</summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        /// <summary>If true the Template will only render on item creation otherwise it will render on each update.</summary>
        [Newtonsoft.Json.JsonProperty("keepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldTranslatedString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTranslatedString>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldSingleRelation : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        /// <summary>Defines the relation types supported by the field.</summary>
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelationType> RelationTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleRelation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RelationType 
    {
        /// <summary>The id property.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Language specific relation names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Defines the valid target context.</summary>
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetDocType { get; set; }
    
        /// <summary>An optional search filter. Limits the content or the list item result set depending on the relation's target context.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationType>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldMultiRelation : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Indexing information of fields of the related schema identified by the SchemaId property</summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        /// <summary>Defines the relation types supported by the field.</summary>
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelationType> RelationTypes { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Dfines the lowest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiRelation>(data);
        }
    
    }
    
    /// <summary>Base class for overwritten information on a field.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FieldOverwriteSingleTagbox", typeof(FieldOverwriteSingleTagbox))]
    [JsonInheritanceAttribute("FieldOverwriteMultiTagbox", typeof(FieldOverwriteMultiTagbox))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class FieldOverwriteBase 
    {
        /// <summary>The field id. Can be a slug and must be unique within the schema.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Defines if a field value is mandatory or not.</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }
    
        /// <summary>Defines if the required property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteRequired { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldOverwriteBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteBase>(data);
        }
    
    }
    
    /// <summary>Overwritten information for Single Tagbox field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldOverwriteSingleTagbox : FieldOverwriteBase
    {
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Defines if the Filter property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteFilter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        /// <summary>Defines if the ListItemCreateTemplate property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteListItemCreateTemplate", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldOverwriteSingleTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteSingleTagbox>(data);
        }
    
    }
    
    /// <summary>Overwritten information for Multi Tagbox field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldOverwriteMultiTagbox : FieldOverwriteBase
    {
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Defines if the Filter property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteFilter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        /// <summary>Defines if the ListItemCreateTemplate property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteListItemCreateTemplate", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteListItemCreateTemplate { get; set; }
    
        /// <summary>Defines the highest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Defines if the MaximumItems property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteMaximumItems", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteMaximumItems { get; set; }
    
        /// <summary>Defines the lowest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        /// <summary>Defines if the MinimumItems property of the field is overwritten</summary>
        [Newtonsoft.Json.JsonProperty("overwriteMinimumItems", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteMinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldOverwriteMultiTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteMultiTagbox>(data);
        }
    
    }
    
    /// <summary>Count info of fields for search operations</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchFieldCount 
    {
        /// <summary>The number of indexed fields generated by the schema in the Search index.</summary>
        [Newtonsoft.Json.JsonProperty("indexedField", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedField { get; set; }
    
        /// <summary>The number of fields to be queried in the simple search for the schema.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchField", Required = Newtonsoft.Json.Required.Always)]
        public int SimpleSearchField { get; set; }
    
        /// <summary>The number of fields that have sorting information stored in the search index.</summary>
        [Newtonsoft.Json.JsonProperty("sortableField", Required = Newtonsoft.Json.Required.Always)]
        public int SortableField { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchFieldCount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchFieldCount>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>An optional search filter. Limits the schema result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfSchema 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfSchema>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfSchema : BaseResultOfSchema
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfSchema>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaSearchResult : SearchBehaviourBaseResultOfSchema
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Schema 
    {
        /// <summary>The schema id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>The count of all fields.</summary>
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.Always)]
        public int FieldCount { get; set; }
    
        /// <summary>The count of all schema descendants with a immediate inheritance.</summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Always)]
        public int ChildCount { get; set; }
    
        /// <summary>The descendancy depth of the schema.</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public int Level { get; set; }
    
        /// <summary>Is true when schema is system provided.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Schema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Schema>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetIndexFieldsRequest 
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetIndexFieldsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetIndexFieldsRequest>(data);
        }
    
    }
    
    /// <summary>Contains compiled field information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IndexField 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The field id.</summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }
    
        /// <summary>The field's type name.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Contains all index field name variants of the field.</summary>
        [Newtonsoft.Json.JsonProperty("indexFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> IndexFields { get; set; }
    
        /// <summary>Contains all simple search field name variants of the field.
        /// The amount of simple search fields can be equal or less to the amount of IndexFields, but never more.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SimpleSearchFields { get; set; }
    
        /// <summary>Contains the fields boost value.</summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        /// <summary>Not to be returned for search query, but only used for mapping purposes</summary>
        [Newtonsoft.Json.JsonProperty("ignoreForSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool IgnoreForSearch { get; set; }
    
        /// <summary>The path of the Nested document this property belongs to. If set to null, it means that there is no Nested document</summary>
        [Newtonsoft.Json.JsonProperty("nestedPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NestedPath { get; set; }
    
        /// <summary>Path to the sorting information in the DataSortValuesField sort index.</summary>
        [Newtonsoft.Json.JsonProperty("sortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortField { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexField FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexField>(data);
        }
    
    }
    
    /// <summary>Response that tells if exists</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExistsResponse 
    {
        /// <summary>Gets or sets a value indicating whether it exists</summary>
        [Newtonsoft.Json.JsonProperty("exists", Required = Newtonsoft.Json.Required.Always)]
        public bool Exists { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaCreateRequest 
    {
        /// <summary>The schema id. Can be a slug, but must be unique throughout the whole customer setup.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields. Can be empty.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }
    
        /// <summary>The schema fields overwrite information.</summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Opens list item document accessibility. If true SchemaPermissionSetIds must be empty.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets. Control list item document permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaUpdateRequest 
    {
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }
    
        /// <summary>The schema fields overwrite information.</summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Opens schema accessibility.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }
    
        /// <summary>Types control schema usage. Schema types can only be added, but not removed.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionSetSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rightFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PermissionSetRight? RightFilter { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PermissionSetRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "Apply")]
        Apply = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfPermissionSet 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionSet> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfPermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfPermissionSet>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfPermissionSet : BaseResultOfPermissionSet
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfPermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfPermissionSet>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionSetSearchResult : SearchBehaviourBaseResultOfPermissionSet
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionSet 
    {
        /// <summary>The permission set id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>Language specific permission set names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSet>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class PermissionSetDetailOfContentRight 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfContentRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailOfContentRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfContentRight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentPermissionSetDetail : PermissionSetDetailOfContentRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentPermissionSetDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionUserRoleRightsOfContentRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfContentRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfContentRight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionUserRoleRightsOfPermissionSetRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PermissionSetRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfPermissionSetRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfPermissionSetRight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class PermissionSetDetailOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfMetadataRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfMetadataRight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaPermissionSetDetail : PermissionSetDetailOfMetadataRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaPermissionSetDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PermissionUserRoleRightsOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MetadataRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfMetadataRight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MetadataRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 2,
    
    }
    
    /// <summary>The version view item for the environment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VersionInfo 
    {
        /// <summary>The manual file version of Picturepark.Contract.dll.</summary>
        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }
    
        /// <summary>The GitVersionTask generated file product version of Picturepark.Configuration.dll.</summary>
        [Newtonsoft.Json.JsonProperty("fileProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileProductVersion { get; set; }
    
        /// <summary>The current contract version stored in CustomerDoc / EnvironmentDoc.</summary>
        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        /// <summary>The bamboo release version. Only provided on bamboo deployments.</summary>
        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VersionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareUser Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentSelections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareContentDetail> ContentSelections { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareDataBase Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailTemplateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDetail>(data);
        }
    
    }
    
    /// <summary>Reduced set of user information used for shares</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareUser 
    {
        /// <summary>Name of user</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        /// <summary>MD5 hash of email address. Can be used to display gravatar image</summary>
        [Newtonsoft.Json.JsonProperty("emailHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailHash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareUser>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareContentDetail 
    {
        /// <summary>The id of the schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareOutputBase> Outputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the content schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareContentDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContentDetail>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareOutputBasic", typeof(ShareOutputBasic))]
    [JsonInheritanceAttribute("ShareOutputEmbed", typeof(ShareOutputEmbed))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ShareOutputBase 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        /// <summary>Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDataBase Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareOutputBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareOutputBasic : ShareOutputBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareOutputBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputBasic>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareOutputEmbed : ShareOutputBase
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareOutputEmbed FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputEmbed>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareDataEmbed", typeof(ShareDataEmbed))]
    [JsonInheritanceAttribute("ShareDataBasic", typeof(ShareDataBasic))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ShareDataBase 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareDataBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareDataEmbed : ShareDataBase
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareDataEmbed FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataEmbed>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareDataBasic : ShareDataBase
    {
        [Newtonsoft.Json.JsonProperty("mailRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MailRecipient> MailRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("internalRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InternalRecipient> InternalRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareDataBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataBasic>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MailRecipient 
    {
        [Newtonsoft.Json.JsonProperty("userEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail UserEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MailRecipient FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MailRecipient>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserEmail 
    {
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InternalRecipient 
    {
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Recipient { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InternalRecipient FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternalRecipient>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class User 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CardTemplate", typeof(CardTemplate))]
    [JsonInheritanceAttribute("ListTemplate", typeof(ListTemplate))]
    [JsonInheritanceAttribute("BasicTemplate", typeof(BasicTemplate))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class TemplateBase 
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CardTemplate : TemplateBase
    {
        [Newtonsoft.Json.JsonProperty("showNavigation", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowNavigation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showOverlay", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowOverlay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showLogo", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowLogo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showFooter", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowFooter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CardTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardTemplate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ListTemplate : TemplateBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListTemplate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BasicTemplate : TemplateBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BasicTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicTemplate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OutputAccess
    {
        [System.Runtime.Serialization.EnumMember(Value = "Full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Preview")]
        Preview = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ShareType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Basic")]
        Basic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Embed")]
        Embed = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        /// <summary>An optional search filter. Limits the share document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfShare 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Share> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfShare FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfShare>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfShare : BaseResultOfShare
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfShare FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfShare>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareSearchResult : SearchBehaviourBaseResultOfShare
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Share 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Share FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Share>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareAggregationRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareAggregationRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicCreateRequest", typeof(ShareBasicCreateRequest))]
    [JsonInheritanceAttribute("ShareEmbedCreateRequest", typeof(ShareEmbedCreateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ShareBaseCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareContent> Contents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareContent 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareBasicCreateRequest : ShareBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("recipientsEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserEmail> RecipientsEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipientsUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> RecipientsUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipientsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRole> RecipientsGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailTemplateId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserRole 
    {
        /// <summary>The user role id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>Language specific user role names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>All user rights for this user role.</summary>
        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<UserRight> UserRights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRole>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareEmbedCreateRequest : ShareBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateShareResult 
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShareResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShareResult>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicUpdateRequest", typeof(ShareBasicUpdateRequest))]
    [JsonInheritanceAttribute("ShareEmbedUpdateRequest", typeof(ShareEmbedUpdateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ShareBaseUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shareContentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareContent> ShareContentItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareBasicUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShareEmbedUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomerServiceProviderConfiguration 
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerServiceProviderConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProviderConfiguration>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServiceProviderConfigurationUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderConfigurationUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderConfigurationUpdateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemProgress", Required = Newtonsoft.Json.Required.Always)]
        public long ItemProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCount", Required = Newtonsoft.Json.Required.Always)]
        public long ItemCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsFailed", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsFailed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsCancelled", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsCancelled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastProgressStamp", Required = Newtonsoft.Json.Required.Always)]
        public long LastProgressStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileTransferCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReady")]
        TransferReady = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileDeleteInProgress")]
        FileDeleteInProgress = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferCleanup")]
        TransferCleanup = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfTransfer 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transfer> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfTransfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfTransfer : BaseResultOfTransfer
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfTransfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferSearchResult : SearchBehaviourBaseResultOfTransfer
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Transfer 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileTransferCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Transfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateTransferRequest 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransferUploadFile> Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("driveFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransferDriveFile> DriveFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("webLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransferWebLink> WebLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class TransferFile 
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferFile>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferUploadFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferUploadFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferUploadFile>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferDriveFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("driveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDriveFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDriveFile>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferWebLink : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferWebLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferWebLink>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("driveMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadata DriveMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileTransferOutput> OutputItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FileTransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionInProgress")]
        DataExtractionInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionDone")]
        DataExtractionDone = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadFailed")]
        UploadFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "DeleteInProgress")]
        DeleteInProgress = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupInProgress")]
        CleanupInProgress = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupCompleted")]
        CleanupCompleted = 14,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AudioMetadata", typeof(AudioMetadata))]
    [JsonInheritanceAttribute("DocumentMetadata", typeof(DocumentMetadata))]
    [JsonInheritanceAttribute("ImageMetadata", typeof(ImageMetadata))]
    [JsonInheritanceAttribute("VideoMetadata", typeof(VideoMetadata))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileMetadata 
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object XmpMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExifMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AudioStream 
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("characterCount", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("characterCountWithSpaces", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCountWithSpaces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lineCount", Required = Newtonsoft.Json.Required.Always)]
        public int LineCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("slideCount", Required = Newtonsoft.Json.Required.Always)]
        public int SlideCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("paragraphCount", Required = Newtonsoft.Json.Required.Always)]
        public int ParagraphCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revisionNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RevisionNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImageTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("embeddedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileMetadata> EmbeddedFiles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EpsMetadata 
    {
        [Newtonsoft.Json.JsonProperty("isRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EpsMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInInch", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInInch", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInCm", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInCm", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitsPerPixel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitsPerChannel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerChannel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAlpha", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAlpha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isIndexed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIndexed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExtended", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExtended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalFrames", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasExifData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasExifData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasIptcData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasIptcData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAdobeResourceData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAdobeResourceData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasXmpData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasXmpData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uncompressedSizeInBytes", Required = Newtonsoft.Json.Required.Always)]
        public long UncompressedSizeInBytes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("overallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VideoStream> VideoStreams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VideoStream 
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PixelAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DriveMetadata 
    {
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadataAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DriveMetadataAudit 
    {
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Opened { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadataAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadataAudit>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferOutput 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputSource OutputSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferOutput FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferOutput>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OutputSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rendered")]
        Rendered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Embedded")]
        Embedded = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfFileTransfer 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileTransfer> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfFileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfFileTransfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfFileTransfer : BaseResultOfFileTransfer
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfFileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfFileTransfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferSearchResult : SearchBehaviourBaseResultOfFileTransfer
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransfer 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Blacklist 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BlacklistItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Blacklist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blacklist>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BlacklistItem 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Match { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BlacklistItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlacklistItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferDeleteRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FileTransferIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferDeleteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDeleteRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransfer2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer2ContentCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferPartial2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileTransferCreateItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferPartial2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferPartial2ContentCreateRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FileTransferCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCreateItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserDetail : User
    {
        [Newtonsoft.Json.JsonProperty("userRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("drives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Drive> Drives { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerTokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OwnerToken> OwnerTokens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserAddress 
    {
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("alternativeAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternativeAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Department { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zip { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAddress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAddress>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Drive 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("driveType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DriveType DriveType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Drive FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Drive>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DriveType
    {
        [System.Runtime.Serialization.EnumMember(Value = "GoogleDrive")]
        GoogleDrive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneDrive")]
        OneDrive = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Dropbox")]
        Dropbox = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OwnerToken 
    {
        /// <summary>The ownertoken id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The id of the user to whom this ownertoken currently belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OwnerToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerToken>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AuthorizationState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Review")]
        Review = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Locked")]
        Locked = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Invited")]
        Invited = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>An optional list of search behaviours. All the passed behaviours will be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehaviour> SearchBehaviours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; } = 0;
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<UserRight> UserRightsFilter { get; set; }
    
        /// <summary>Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.</summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfUserWithRoles 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserWithRoles> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryDebugInformation QueryDebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfUserWithRoles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfUserWithRoles>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchBehaviourBaseResultOfUserWithRoles : BaseResultOfUserWithRoles
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchBehaviourBaseResultOfUserWithRoles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviourBaseResultOfUserWithRoles>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserSearchResult : SearchBehaviourBaseResultOfUserWithRoles
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserWithRoles 
    {
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserWithRoles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserWithRoles>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Channel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>The search index id.</summary>
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        /// <summary>An id list of schemas with schema type content whose content documents should be found by the simple search.
        /// The search by filters and aggregations are unaffected.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set on each search and aggregation request.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Language specific names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }
    
        /// <summary>An optional list of aggregators. These aggregations are added by default on each aggregation requests.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.</summary>
        [Newtonsoft.Json.JsonProperty("extendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExtendedSimpleSearchFields { get; set; }
    
        /// <summary>Display pattern to use for rendering details when 0 results are returned</summary>
        [Newtonsoft.Json.JsonProperty("missingResultsDisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary MissingResultsDisplayPatterns { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Channel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Channel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentsByIdsRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsByIdsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsByIdsRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserProfile 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfile>(data);
        }
    
    }
    
    /// <summary>Schema import request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaImportRequest 
    {
        /// <summary>Id of the previously uploaded file transfer</summary>
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        /// <summary>Allow creating list items that refer to list items or contents that don't exist in the system.</summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }
    
        /// <summary>Import the list items for the schema.</summary>
        [Newtonsoft.Json.JsonProperty("importListItems", Required = Newtonsoft.Json.Required.Always)]
        public bool ImportListItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaImportRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomerInfo 
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityServerUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityServerUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfiguration LanguageConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Language> Languages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LanguageConfiguration 
    {
        /// <summary>A list of languages serving as system languages.</summary>
        [Newtonsoft.Json.JsonProperty("systemLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SystemLanguages { get; set; }
    
        /// <summary>A list of languages serving as metadata languages.</summary>
        [Newtonsoft.Json.JsonProperty("metadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MetadataLanguages { get; set; }
    
        /// <summary>The default language. Not the be confused with the metadata fallback language x-default.</summary>
        [Newtonsoft.Json.JsonProperty("defaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfiguration>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.43.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Language 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ietf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ietf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("twoLetterISOLanguageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TwoLetterISOLanguageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("threeLetterISOLanguageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeLetterISOLanguageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Language FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.1.0 (NJsonSchema v9.10.43.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}