//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Picturepark.SDK.V1.Contract
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBusinessProcessClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get business process
        /// </summary>
        /// <param name="id">The business process id.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create business process
        /// </summary>
        /// <param name="request">The business process create request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(BusinessProcessCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change business process state
        /// </summary>
        /// <remarks>
        /// Only available for business processes created through Create. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">The business process id.</param>
        /// <param name="request">The business process state change request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ChangeStateAsync(string id, BusinessProcessStateChangeRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update business process notification
        /// </summary>
        /// <remarks>
        /// Only available for business processes created through Create.
        /// </remarks>
        /// <param name="id">The business process id.</param>
        /// <param name="request">The business process notification update request.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task UpdateNotificationAsync(string id, BusinessProcessNotificationUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel business process
        /// </summary>
        /// <remarks>
        /// Only available if the business process indicates support for cancellation in SupportsCancellation.
        /// </remarks>
        /// <param name="id">The business process id.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task CancelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details
        /// </summary>
        /// <remarks>
        /// Gets details of the given business process.
        /// </remarks>
        /// <param name="id">The business process id.</param>
        /// <returns>BusinessProcessDetails</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<BusinessProcessDetails> GetDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a summary of the business process.
        /// <br/>Depending on the type of the business process, this can be not available at all or contain just a minimal set of information.
        /// <br/>If business process produces a batch based response, page over successful and failed items using respective endpoints.
        /// </summary>
        /// <param name="id">Business process id.</param>
        /// <returns>BusinessProcessSummaryBase</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessSummaryBase> GetSummaryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a page of successful items of a batch based business process.
        /// <br/>Use the page token to fetch next page.
        /// </summary>
        /// <param name="id">Business process id.</param>
        /// <param name="limit">Number of items to fetch.</param>
        /// <param name="pageToken">PageToken for paging.</param>
        /// <returns>BusinessProcessBatch</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessBatch> GetSuccessfulItemsAsync(string id, int limit, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a page of failed items of a batch based business process.
        /// <br/>Use the page token to fetch next page.
        /// </summary>
        /// <param name="id">Business process id.</param>
        /// <param name="limit">Number of items to fetch.</param>
        /// <param name="pageToken">PageToken for paging.</param>
        /// <returns>BusinessProcessBatch</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessBatch> GetFailedItemsAsync(string id, int limit, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search for business processes.
        /// </remarks>
        /// <param name="request">The business process request.</param>
        /// <returns>BusinessProcessSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessSearchResult> SearchAsync(BusinessProcessSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBusinessRuleClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the current business rule configuration
        /// </summary>
        /// <returns>BusinessRuleConfiguration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessRuleConfiguration> GetConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the business rule configuration.
        /// </summary>
        /// <param name="request">Request containing the new configuration.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateConfigurationAsync(BusinessRuleConfigurationUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for trace logs produces by business rule execution.
        /// </summary>
        /// <param name="request">Request</param>
        /// <returns>Holds results of trace log search.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessRuleTraceLogSearchResult> SearchTracesAsync(BusinessRuleTraceLogSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Runs the supplied business rule schedule immediately.
        /// <br/>Allows for testing of schedules.
        /// </summary>
        /// <param name="schedule">BusinessRuleSchedule</param>
        /// <returns>BusinessProcess of the metadata operation triggered by the schedule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RunScheduleAsync(BusinessRuleSchedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IChannelClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all channels
        /// </summary>
        /// <remarks>
        /// Get all channels available for the current user.
        /// </remarks>
        /// <returns>List of channel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Channel>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create channel
        /// </summary>
        /// <remarks>
        /// Creates new channel based on supplied request.
        /// </remarks>
        /// <param name="request">The request containing information needed to create new channel.</param>
        /// <returns>Created channel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Channel> CreateAsync(ChannelCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get channel
        /// </summary>
        /// <remarks>
        /// Gets the channel information by the channel ID.
        /// </remarks>
        /// <param name="id">The channel ID.</param>
        /// <returns>Requested channel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Channel> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update channel
        /// </summary>
        /// <remarks>
        /// Updates the channel specified by the ID and based on supplied request.
        /// </remarks>
        /// <param name="id">ID of channel to update</param>
        /// <param name="request">The request containing information needed to update the channel.</param>
        /// <returns>Updated channel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Channel> UpdateAsync(string id, ChannelUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete channel
        /// </summary>
        /// <remarks>
        /// Deletes the channel specified by the ID.
        /// </remarks>
        /// <param name="id">ID of the channel that should be deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used in an aggregator on any channel.
        /// </summary>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetAggregationFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used as sort fields on any channel.
        /// </summary>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SortFieldInfo>> GetSortFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used as filter fields on any channel.
        /// </summary>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetFilterFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IContentPermissionSetClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content permission set
        /// </summary>
        /// <remarks>
        /// Gets the content permission set detail information by the content permission set ID.
        /// </remarks>
        /// <param name="id">Content permission set ID.</param>
        /// <returns>Detail of a content permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentPermissionSetDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content permission set
        /// </summary>
        /// <remarks>
        /// Updates the content permission set specified by the ID and based on supplied request.
        /// </remarks>
        /// <param name="id">Content permission set ID.</param>
        /// <param name="permissionSet">Permission set</param>
        /// <returns>Detail of a content permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentPermissionSetDetail> UpdateAsync(string id, ContentPermissionSetUpdateRequest permissionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content permission set
        /// </summary>
        /// <remarks>
        /// Deletes the content permission set specified by the ID.
        /// </remarks>
        /// <param name="id">Content permission set ID.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content permission set
        /// </summary>
        /// <remarks>
        /// Creates new content permission set based on supplied request.
        /// </remarks>
        /// <param name="permissionSet">Permission set</param>
        /// <returns>Detail of a content permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentPermissionSetDetail> CreateAsync(ContentPermissionSetCreateRequest permissionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Gets multiple content permission set details by the content permission set IDs.
        /// </remarks>
        /// <param name="ids">Ids</param>
        /// <returns>Array of Detail of a content permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContentPermissionSetDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership of content permission set
        /// </summary>
        /// <remarks>
        /// Transfers ownership of content permission set to supplied user.
        /// </remarks>
        /// <param name="id">Content permission set ID.</param>
        /// <param name="request">Request to transfer the ownership of a permission set.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipAsync(string id, PermissionSetOwnershipTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permissions for content permission set
        /// </summary>
        /// <remarks>
        /// Returns permissions for the content permission set for the current user.
        /// </remarks>
        /// <param name="id">Content permission set ID.</param>
        /// <returns>Array of Permission set rights</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PermissionSetRight>> GetPermissionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Creates new content permission sets based on supplied requests.
        /// </remarks>
        /// <param name="request">Request to create multiple content permission sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> CreateManyAsync(ContentPermissionSetCreateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Updates the content permission sets specified by the IDs and based on supplied request.
        /// </remarks>
        /// <param name="request">Request to update multiple content permission sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> UpdateManyAsync(ContentPermissionSetUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Deletes the content permission sets specified by the IDs.
        /// </remarks>
        /// <param name="request">Request to delete multiple permission sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> DeleteManyAsync(PermissionSetDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership of multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Transfers ownership of multiple content permission sets to respective supplied users.
        /// </remarks>
        /// <param name="request">Request to transfer the ownership of multiple permission sets.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipManyAsync(PermissionSetOwnershipTransferManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permissions for multiple content permission sets
        /// </summary>
        /// <remarks>
        /// Returns permissions for multiple content permission sets for the current user.
        /// </remarks>
        /// <param name="ids">Ids</param>
        /// <returns>Array of Rights that the current user has on a permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PermissionSetUserPermissionRights>> GetPermissionsManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search content permission set
        /// </summary>
        /// <remarks>
        /// Searches content permission sets as specified in the search request.
        /// </remarks>
        /// <param name="request">Request to search permission sets.</param>
        /// <returns>Result of a permission set search operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IContentClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content
        /// </summary>
        /// <remarks>
        /// Gets the content detail by ID.
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <returns>Content detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="ContentNotFoundException">Content not found</exception>
        System.Threading.Tasks.Task<ContentDetail> GetAsync(string id, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content
        /// </summary>
        /// <remarks>
        /// Deletes a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.
        /// </remarks>
        /// <param name="id">The ID of the content to delete.</param>
        /// <param name="forceReferenceRemoval">A value indicating whether references to the content should be removed.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="ReferencesUpdateException">Validation prevents deletion of item</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, bool? forceReferenceRemoval = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download content
        /// </summary>
        /// <remarks>
        /// Download a single content in a specific output format. To resize images on download specify target width &amp; height. To download only a portion of the file, specify the range parameter.
        /// <br/>To use conversion presets on download, e.g. to crop or rotate, please see [EditOutput](#operation/Content_EditOutput).
        /// </remarks>
        /// <param name="contentId">The content ID.</param>
        /// <param name="outputFormatId">The output format ID.</param>
        /// <param name="width">Optional width in pixels to resize image.</param>
        /// <param name="height">Optional height in pixels to resize image.</param>
        /// <param name="range">The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string contentId, string outputFormatId, int? width = null, int? height = null, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit output
        /// </summary>
        /// <remarks>
        /// Edits a single content in a specific output format.
        /// </remarks>
        /// <param name="contentId">The content ID.</param>
        /// <param name="outputFormatId">The output format ID.</param>
        /// <param name="conversionPreset">The conversion preset.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> EditOutputAsync(string contentId, string outputFormatId, string conversionPreset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download thumbnail
        /// </summary>
        /// <remarks>
        /// Provides a lightweight endpoint to download content thumbnails.
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="size">Thumbnail size. Either small, medium or large.</param>
        /// <param name="width">Optional width in pixels to resize image.</param>
        /// <param name="height">Optional height in pixels to resize image.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadThumbnailAsync(string id, ThumbnailSize size, int? width = null, int? height = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content
        /// </summary>
        /// <remarks>
        /// Create a single file-less content item. To import files, see [Transfer](#tag/Transfer).
        /// </remarks>
        /// <param name="request">Content create request.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <param name="allowMissingDependencies">Allows creating contents that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>The content details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="BusinessProcessLifeCycleNotHitException">The specified wait timeout exceeded</exception>
        System.Threading.Tasks.Task<ContentDetail> CreateAsync(ContentCreateRequest request, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple contents
        /// </summary>
        /// <remarks>
        /// Gets multiple content details by IDs.
        /// <br/>Can fetch 100 contents at most.
        /// </remarks>
        /// <param name="ids">List of content IDs</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <returns>List of Content detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="ContentNotFoundException">One or more contents not found</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContentDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content metadata
        /// </summary>
        /// <remarks>
        /// Updates metadata layers of a specified content. For file-less contents, the content itself can be updated as well.
        /// <br/>The update is flexible enough to allow the update of only the fields that are specified in the request (leaving untouched the other existing ones) or to allow
        /// <br/>the entire replacement of all the values of a schema or even of all the schemas.
        /// <br/>See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="request">Content metadata update request.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <param name="allowMissingDependencies">Allows storing references to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Content detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="BusinessProcessLifeCycleNotHitException">The specified wait timeout exceeded</exception>
        System.Threading.Tasks.Task<ContentDetail> UpdateMetadataAsync(string id, ContentMetadataUpdateRequest request, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content permissions
        /// </summary>
        /// <remarks>
        /// Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions)
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="request">Content permissions update request.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Content detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="BusinessProcessLifeCycleNotHitException">The specified wait timeout exceeded</exception>
        System.Threading.Tasks.Task<ContentDetail> UpdatePermissionsAsync(string id, ContentPermissionsUpdateRequest request, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore content
        /// </summary>
        /// <remarks>
        /// Restores a previously deleted content.
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="allowMissingDependencies">Allows restoring contents that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task RestoreAsync(string id, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer content ownership
        /// </summary>
        /// <remarks>
        /// Transfers ownership of a content to another user. The target user must have the ManageContent UserRight.
        /// </remarks>
        /// <param name="id">The content ID.</param>
        /// <param name="request">Content ownership transfer request.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipAsync(string id, ContentOwnershipTransferRequest request, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if given changes of ContentSchemaId are possible without incurring data loss (due to assigned Layers and LayerSchemaIds)
        /// </summary>
        /// <param name="request">Changes to check</param>
        /// <returns>Result indicating if data loss would occur for given requests</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<CheckContentSchemaIdChangeResult> CheckContentSchemaChangeAsync(CheckContentSchemaIdChangeRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if a file update is possible without incurring data loss
        /// </summary>
        /// <param name="id">The ID of the content to replace.</param>
        /// <param name="request">Content file update request</param>
        /// <returns>Information about data loss, if any</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<CheckContentSchemaIdChangeResult> CheckUpdateFileAsync(string id, ContentFileUpdateCheckRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content file
        /// </summary>
        /// <remarks>
        /// Updates binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#tag/Transfer).
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">The ID of the content to replace.</param>
        /// <param name="request">Content file update request</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateFileAsync(string id, ContentFileUpdateRequest request, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content references
        /// </summary>
        /// <remarks>
        /// Gets the references (list items, contents, shares) to a single content.
        /// </remarks>
        /// <param name="id">The content ID whose references to retrieve.</param>
        /// <param name="request">Content references request.</param>
        /// <returns>ContentReferencesResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentReferencesResult> GetReferencesAsync(string id, ContentReferencesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get outputs
        /// </summary>
        /// <remarks>
        /// Retrieves all outputs available for content, also dynamic rendered outputs are returned, if requested.
        /// </remarks>
        /// <param name="id">ID of content.</param>
        /// <returns>Array of Result of output resolution.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutputResolveResult>> GetOutputsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create download link
        /// </summary>
        /// <remarks>
        /// Creates a download link for one or more contents. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content download link request</param>
        /// <returns>Download link</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateDownloadLinkAsync(ContentDownloadLinkCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve download token to Url
        /// </summary>
        /// <param name="token">Token</param>
        /// <returns>Download link information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DownloadLink> GetDownloadLinkAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple contents
        /// </summary>
        /// <remarks>
        /// Deletes multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Delete many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(ContentDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple contents - by filter
        /// </summary>
        /// <remarks>
        /// Deletes multiple contents. A filter must be provided to limit the deletion to specific contents.
        /// <br/>The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.
        /// <br/>The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Delete many by filter request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyByFilterAsync(ContentDeleteManyFilterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore multiple contents
        /// </summary>
        /// <remarks>
        /// Restores previously deleted contents.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content restore many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RestoreManyAsync(ContentRestoreManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get many content references
        /// </summary>
        /// <remarks>
        /// Gets references (list items, contents, shares) to content documents defined by IDs.
        /// </remarks>
        /// <param name="request">Content many references request.</param>
        /// <returns>Content references result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentReferencesResult> GetReferencesManyAsync(ContentManyReferencesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get outputs
        /// </summary>
        /// <remarks>
        /// Retrieves all outputs available for contents, also dynamic rendered outputs are returned, if requested.
        /// <br/>A maximum of 1000 content ids can be specified.
        /// </remarks>
        /// <param name="request">Output resolve many request.</param>
        /// <returns>Array of Result of output resolution.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutputResolveResult>> GetOutputsManyAsync(OutputResolveManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Repair contents by filter
        /// </summary>
        /// <remarks>
        /// A repair operation re-extracts Metadata from the originally uploaded file, applies it and triggers follow-up actions where needed (e.g. Rendering, XmpWriteback)
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content repair request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RepairContentsByFilterAsync(ContentRepairByFilterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Repair contents
        /// </summary>
        /// <remarks>
        /// A repair operation re-extracts Metadata from the originally uploaded file, applies it and triggers follow-up actions where needed (e.g. Rendering, XmpWriteback)
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content repair request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RepairContentsBatchAsync(ContentRepairBatchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer multiple contents ownerships - by filter
        /// </summary>
        /// <remarks>
        /// Transfers ownerships of multiple contents to specified users. The target users must have the ManageContent UserRight.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content ownership transfer many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> TransferOwnershipByFilterAsync(ContentOwnershipBatchTransferFilterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple contents permissions - by filter
        /// </summary>
        /// <remarks>
        /// Updates the content permission sets of multiple contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Content permissions update many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdatePermissionsByFilterAsync(ContentPermissionsBatchUpdateFilterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search contents
        /// </summary>
        /// <remarks>
        /// Searches contents as specified in the search request.
        /// </remarks>
        /// <param name="request">Content search request.</param>
        /// <returns>Result for content search operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentSearchResult> SearchAsync(ContentSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate contents on channel
        /// </summary>
        /// <remarks>
        /// Aggregates content by content fields values as specified in the aggregators saved on a channel.
        /// </remarks>
        /// <param name="request">Content aggregation on channel request.</param>
        /// <returns>Object aggregation result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateOnChannelAsync(ContentAggregationOnChannelRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate contents
        /// </summary>
        /// <remarks>
        /// Aggregates content by content fields values as specified in the aggregation request.
        /// </remarks>
        /// <param name="request">Content aggregation request.</param>
        /// <returns>Object aggregation result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ContentAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get historic versions
        /// </summary>
        /// <param name="id">Content ID.</param>
        /// <param name="request">Request allowing for paging</param>
        /// <returns>Historic versions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<HistoricVersionSearchResult> GetVersionsAsync(string id, HistoricVersionSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get historic version download link
        /// </summary>
        /// <param name="id">Content ID.</param>
        /// <param name="versionId">Version ID.</param>
        /// <returns>Download token to be used with download/{token} endpoint</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<string> CreateVersionDownloadLinkAsync(string id, int versionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete historic version
        /// </summary>
        /// <param name="id">Content ID.</param>
        /// <param name="versionId">Version ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteVersionAsync(string id, int versionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create comment
        /// </summary>
        /// <param name="id">Content ID.</param>
        /// <param name="request">Comment creation request.</param>
        /// <param name="timeout">Operation timeout.</param>
        /// <returns>Created comment</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Comment> CreateCommentAsync(string id, CommentCreateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search comments
        /// </summary>
        /// <param name="id">Content ID.</param>
        /// <param name="request">Search request.</param>
        /// <returns>List of found comments</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<CommentSearchResult> SearchCommentsAsync(string id, CommentSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets/unsets a DisplayContent for a content with an id given in the request
        /// </summary>
        /// <param name="id">Id of the content</param>
        /// <param name="setDisplayContentRequest">Request with DisplayContentId</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the content are resolved and returned.</param>
        /// <param name="timeout">Timeout for the operation</param>
        /// <param name="waitForContinuation">Wait for the creation of the search doc update.</param>
        /// <returns>Result of the operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> SetDisplayContentAsync(string id, SetDisplayContentRequest setDisplayContentRequest, System.Collections.Generic.IEnumerable<ContentResolveBehavior> resolveBehaviors = null, System.TimeSpan? timeout = null, bool? waitForContinuation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Process many requests to set/unset display contents for given contents
        /// </summary>
        /// <param name="setDisplayContentsManyRequest">Set many display contents request</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetManyDisplayContentsAsync(SetDisplayContentsManyRequest setDisplayContentsManyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IConversionPresetTemplateClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search conversion preset templates
        /// </summary>
        /// <param name="request">Conversion preset templates search request.</param>
        /// <returns>Result of the conversion preset templates search</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ConversionPresetTemplateSearchResult> SearchAsync(ConversionPresetTemplateSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create conversion preset template
        /// </summary>
        /// <remarks>
        /// Creates new conversion preset template based on the supplied request.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new conversion preset template.</param>
        /// <param name="timeout">Timeout</param>
        /// <returns>Represents the detail of a conversion preset template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ConversionPresetTemplateDetail> CreateAsync(ConversionPresetTemplateCreateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple conversion preset templates
        /// </summary>
        /// <remarks>
        /// Gets multiple conversion preset template details by the conversion preset template IDs. Can fetch maximum of 100 conversion preset templates at once.
        /// </remarks>
        /// <param name="ids">Conversion preset template IDs to get information about.</param>
        /// <returns>Array of Represents the detail of a conversion preset template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConversionPresetTemplateDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update conversion preset template
        /// </summary>
        /// <remarks>
        /// Updates the conversion preset template specified by the ID and based on supplied request.
        /// </remarks>
        /// <param name="id">Conversion preset template ID.</param>
        /// <param name="request">Request containing information needed to update the conversion preset template.</param>
        /// <param name="timeout">Timeout</param>
        /// <returns>Represents the detail of a conversion preset template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ConversionPresetTemplateDetail> UpdateAsync(string id, ConversionPresetTemplateUpdateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete conversion preset template
        /// </summary>
        /// <remarks>
        /// Deletes the conversion preset template specified by the ID.
        /// </remarks>
        /// <param name="id">Conversion preset template ID.</param>
        /// <param name="timeout">Timeout</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get conversion preset template
        /// </summary>
        /// <remarks>
        /// Gets the conversion preset template by the conversion preset template ID.
        /// </remarks>
        /// <param name="id">Conversion preset template ID.</param>
        /// <returns>Represents the detail of a conversion preset template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ConversionPresetTemplateDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple conversion preset templates
        /// </summary>
        /// <remarks>
        /// Creates new conversion preset templates based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new conversion preset template.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateManyAsync(ConversionPresetTemplateCreateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple conversion preset templates
        /// </summary>
        /// <remarks>
        /// Updates the conversion preset templates specified by the IDs and based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing information needed to update the conversion preset template.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateManyAsync(ConversionPresetTemplateUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple conversion preset templates
        /// </summary>
        /// <remarks>
        /// Deletes the conversion preset templates specified by the IDs. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The request with conversion preset template IDs to delete.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(ConversionPresetTemplateDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDisplayValueClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status
        /// </summary>
        /// <remarks>
        /// Get the status of the display values compared to the schema model.
        /// </remarks>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DisplayValueStatus> GetStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Re-render the display values
        /// </summary>
        /// <remarks>
        /// The re-rendering only work on those display values that are out of date or not created yet. The process is therefore based on the information returned by the "status" endpoint: if the status is red, the display values of the data
        /// <br/>corresponding to the ContentOrLayerSchemaIds and ListSchemaIds are recalculated.
        /// <br/>The operation is executed asynchronously and it is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RerenderAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDocumentHistoryClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current
        /// </summary>
        /// <remarks>
        /// Gets the current version of a document.
        /// </remarks>
        /// <param name="documentType">The type of the document (e.g. Content).</param>
        /// <param name="documentId">The ID of the document (e.g. contentId).</param>
        /// <returns>Document history item</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistory> GetCurrentAsync(string documentType, string documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version
        /// </summary>
        /// <remarks>
        /// Gets a specific version of a document.
        /// </remarks>
        /// <param name="documentType">The type of the document (e.g. Content).</param>
        /// <param name="documentId">The ID of the document (e.g. contentId).</param>
        /// <param name="documentVersion">The version of the document.</param>
        /// <returns>Document history item</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistory> GetVersionAsync(string documentType, string documentId, long documentVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compare with current
        /// </summary>
        /// <remarks>
        /// Compare the current version of a document with the requested version and get the differences.
        /// </remarks>
        /// <param name="documentType">The type of the document (e.g. Content).</param>
        /// <param name="documentId">The ID of the document (e.g. contentId).</param>
        /// <param name="version">The version of the document to compare with.</param>
        /// <returns>Document history difference.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifference> CompareWithCurrentAsync(string documentType, string documentId, long? version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compare with version
        /// </summary>
        /// <remarks>
        /// Compare a specific version of a document with another version and get the differences.
        /// </remarks>
        /// <param name="documentType">The type of the document (e.g. Content).</param>
        /// <param name="documentId">The ID of the document (e.g. contentId).</param>
        /// <param name="documentVersion">The version of the document to use for the comparison.</param>
        /// <param name="version">The version of the document to compare with.</param>
        /// <returns>Document history difference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifference> CompareWithVersionAsync(string documentType, string documentId, long documentVersion, long? version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search the document history as specified in the search request.
        /// </remarks>
        /// <param name="request">The document history search request.</param>
        /// <returns>Document history search result.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistorySearchResult> SearchAsync(DocumentHistorySearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IIdentityProviderClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all identity providers
        /// </summary>
        /// <remarks>
        /// Gets all identity providers configured
        /// </remarks>
        /// <returns>Array of identity providers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProvider>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get basic info for all providers
        /// </summary>
        /// <remarks>
        /// Gets basic information for all identity providers configured
        /// </remarks>
        /// <returns>Array of identity provider basic information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderBasicInfo>> GetAllBasicInfosAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get identity provider
        /// </summary>
        /// <param name="id">Identity provider ID.</param>
        /// <returns>Represents an identity provider defined in IdentityServer and its Picturepark configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<IdentityProvider> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update identity provider
        /// </summary>
        /// <remarks>
        /// Identity provider has to be already created via UI
        /// </remarks>
        /// <param name="id">Identity provider ID.</param>
        /// <param name="provider">Update request</param>
        /// <returns>Represents an identity provider defined in IdentityServer and its Picturepark configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<IdentityProvider> UpdateAsync(string id, IdentityProviderEditable provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get synchronizable attributes
        /// </summary>
        /// <remarks>
        /// Returns names of user attributes that can be synchronized from identity provider claims and therefore can be used in ClaimMapping.
        /// </remarks>
        /// <returns>Names of user attributes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetSynchronizableAttributesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInfoClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version
        /// </summary>
        /// <remarks>
        /// Get the version information of the deployed application.
        /// </remarks>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get info
        /// </summary>
        /// <remarks>
        /// Get the customer specific configuration infos.
        /// </remarks>
        /// <returns>CustomerInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerInfo> GetInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status
        /// </summary>
        /// <remarks>
        /// Get the status of the system data compared to the schema model.
        /// </remarks>
        /// <returns>SystemStatus</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemStatus> GetStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IIngestClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create ingest container.
        /// </summary>
        /// <returns>Ingest container create result containing container name and SAS token for uploading data.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<IngestContainerCreateResult> CreateIngestContainerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import all files from the specified container.
        /// </summary>
        /// <param name="containerName">Container name</param>
        /// <param name="request">Import request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ImportAllAsync(string containerName, ImportAllFromContainerRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import specified files from the specified container.
        /// </summary>
        /// <param name="containerName">Container name</param>
        /// <param name="request">Import request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ImportPartialAsync(string containerName, ImportPartialFromContainerRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import specified urls.
        /// </summary>
        /// <param name="request">Import request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ImportFromUrlsAsync(ImportFromUrlsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IJsonSchemaClient
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IListItemClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list item
        /// </summary>
        /// <remarks>
        /// Gets the list item detail by ID.
        /// </remarks>
        /// <param name="id">The list item ID.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the list item are resolved and returned.</param>
        /// <returns>List item detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemDetail> GetAsync(string id, System.Collections.Generic.IEnumerable<ListItemResolveBehavior> resolveBehaviors = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete list item
        /// </summary>
        /// <remarks>
        /// Deletes a list item. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all related files will be deleted.
        /// </remarks>
        /// <param name="id">The ID of the list item to delete.</param>
        /// <param name="forceReferenceRemoval">A value indicating whether references to the list item should be removed.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="ReferencesUpdateException">Validation prevents deletion of item</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, bool? forceReferenceRemoval = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore list item
        /// </summary>
        /// <remarks>
        /// Restores a previously deleted list item.
        /// </remarks>
        /// <param name="id">The list item ID.</param>
        /// <param name="allowMissingDependencies">Allows restoring list items that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task RestoreAsync(string id, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list item references
        /// </summary>
        /// <remarks>
        /// Gets the references (list items, contents) to a single list item.
        /// </remarks>
        /// <param name="id">The ID of the list item.</param>
        /// <param name="request">Request options to specify how many references to fetch.</param>
        /// <returns>List item references</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemReferencesResult> GetReferencesAsync(string id, ListItemReferencesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create list item
        /// </summary>
        /// <remarks>
        /// Create a new list item.
        /// </remarks>
        /// <param name="request">List item create request.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the list item are resolved and returned.</param>
        /// <param name="allowMissingDependencies">Allows creating list items that refer to list items or contents that don't exist in the system.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <param name="waitSearchDocCreation">Wait for the creation of the search document and the rendered display values.
        /// <br/>            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.</param>
        /// <returns>List item detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemDetail> CreateAsync(ListItemCreateRequest request, System.Collections.Generic.IEnumerable<ListItemResolveBehavior> resolveBehaviors = null, bool? allowMissingDependencies = null, System.TimeSpan? timeout = null, bool? waitSearchDocCreation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple list items
        /// </summary>
        /// <remarks>
        /// Gets multiple list item details by IDs.
        /// <br/>Can fetch 100 list items at most.
        /// </remarks>
        /// <param name="ids">List of list item IDs.</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the list items are resolved and returned.</param>
        /// <returns>List of list item details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListItemDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<ListItemResolveBehavior> resolveBehaviors = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple list items
        /// </summary>
        /// <remarks>
        /// The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">List item delete many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(ListItemDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple list items - by filter
        /// </summary>
        /// <remarks>
        /// Deletes multiple list items. A filter must be provided to limit the deletion to specific list items.
        /// <br/>The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be hard deleted.
        /// <br/>The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Delete many by filter request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyByFilterAsync(ListItemDeleteManyFilterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore multiple list items
        /// </summary>
        /// <remarks>
        /// Restores previously deleted list items.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">List item restore many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RestoreManyAsync(ListItemRestoreManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple list items references
        /// </summary>
        /// <remarks>
        /// Gets the references (list items, contents) to multiple list items.
        /// </remarks>
        /// <param name="request">ListItemManyReferencesRequest</param>
        /// <returns>A list of references per list item.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemReferencesResult> GetReferencesManyAsync(ListItemManyReferencesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search list items
        /// </summary>
        /// <remarks>
        /// Searches list items as specified in the search request.
        /// </remarks>
        /// <param name="request">The list item search request.</param>
        /// <returns>List item search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemSearchResult> SearchAsync(ListItemSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate list items
        /// </summary>
        /// <remarks>
        /// Aggregates list items as specified in the aggregation request.
        /// </remarks>
        /// <param name="request">The list item aggregation request.</param>
        /// <returns>Object aggregation result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ListItemAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILiveStreamClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search for live stream events with optional parameters to limit time, document type or use more complex filtering.
        /// </remarks>
        /// <param name="request">Parameters for the search</param>
        /// <returns>Resulting live stream events</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<LiveStreamSearchResult> SearchAsync(LiveStreamSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMetadataClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status
        /// </summary>
        /// <remarks>
        /// Get the status of the metadata items (contents and list items) compared to the schema model.
        /// </remarks>
        /// <returns>The overall status of the contents and list items in comparison to the actual schemas' structure</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<MetadataStatus> GetStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update outdated
        /// </summary>
        /// <remarks>
        /// Update outdated metadata items (contents and list items). The changes to the schemas are enforced: data related to removed fields are deleted; eventual references to removed fields are dropped; calculated values are recalculated;
        /// <br/>the ids of the schemas' fields the could not be reused become available again.
        /// <br/>The operation can take a long time and it is therefore executed asynchronously and not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateOutdatedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface INotificationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get notification
        /// </summary>
        /// <param name="id">ID of notification</param>
        /// <returns>Notification</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Notification> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark notification as read
        /// </summary>
        /// <param name="id">ID of notification</param>
        /// <returns>Notification</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Notification> MarkAsReadAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search notifications
        /// </summary>
        /// <param name="request">Notification search request</param>
        /// <returns>Notification search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<NotificationCompactResult> SearchAsync(NotificationSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate on notifications
        /// </summary>
        /// <param name="request">Notification aggregation request</param>
        /// <returns>Aggregation result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(NotificationAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark all notifications as read
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task MarkAllAsReadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get email notification settings
        /// </summary>
        /// <returns>Email notification settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<EmailNotificationsSettings> GetEmailNotificationSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update email notification settings
        /// </summary>
        /// <param name="configuration">Email notification settings</param>
        /// <returns>Email notification settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<EmailNotificationsSettings> PutEmailNotificationSettingsAsync(EmailNotificationsSettings configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get notification types available for email settings.
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<NotificationType>>> GetAvailableNotificationTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOutputFormatClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the download file name patterns for an output format
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">ID of the output format.</param>
        /// <param name="patterns">Dictionary containing patterns per metadata language.
        /// <br/>If this is set, at least the customer's default language is required.
        /// <br/>Set any other language to an empty string and a fallback to the default language will occur.
        /// <br/>Set parameter to null to clear any already set patterns.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetDownloadFileNamePatternsAsync(string id, System.Collections.Generic.IDictionary<string, string> patterns, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the download file name patterns for multiple output formats
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The request containing the patterns for each output format.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetDownloadFileNamePatternsManyAsync(OutputFormatDownloadFileNamePatternUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enables or disables XMP writeback for an output format
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats.
        /// <br/>However, enabling XMP writeback for Thumbnail formats or temporary formats is not allowed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">ID of the output format.</param>
        /// <param name="request">The request containing the state to be set for the output format.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetXmpWritebackStateAsync(string id, OutputFormatSetXmpWritebackStateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enables or disables XMP writeback for multiple output formats
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats.
        /// <br/>However, enabling XMP writeback for Thumbnail formats or temporary formats is not allowed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The request containing the state changes for each output format.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetXmpWritebackStateManyAsync(OutputFormatSetXmpWritebackStateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates permission-related settings for an output format
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">ID of the output format.</param>
        /// <param name="request">The request containing the settings for the output format.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetPermissionAsync(string id, OutputFormatSetPermissionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates permission-related settings for multiple output formats
        /// </summary>
        /// <remarks>
        /// This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The request containing the state changes for each output format.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> SetPermissionManyAsync(OutputFormatSetPermissionManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Render output format preview
        /// </summary>
        /// <remarks>
        /// Request rendering of the given OutputFormat for a given content.
        /// </remarks>
        /// <param name="request">Information about the OutputFormat as well as which Content to use for the preview.</param>
        /// <returns>Rendered file</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> RenderFormatPreviewAsync(OutputFormatRenderPreviewRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple output formats
        /// </summary>
        /// <remarks>
        /// Gets multiple output format details by the output format IDs. Can fetch maximum of 100 output formats at once.
        /// </remarks>
        /// <param name="ids">Output format IDs to get information about. If this is omitted, all output formats in the system will be returned.</param>
        /// <returns>Array of Represents an output format.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutputFormatDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get output format
        /// </summary>
        /// <remarks>
        /// Gets the output format by the output format ID.
        /// </remarks>
        /// <param name="id">Output format ID.</param>
        /// <returns>Represents an output format.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<OutputFormatDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOutputClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get output
        /// </summary>
        /// <remarks>
        /// Gets a output document by id.
        /// </remarks>
        /// <param name="id">Output ID.</param>
        /// <returns>Output detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<OutputDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search output documents
        /// </summary>
        /// <remarks>
        /// ContentIds must be mandatory filled.
        /// </remarks>
        /// <param name="request">The output search request.</param>
        /// <returns>Output result set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<OutputSearchResult> SearchAsync(OutputSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resets retry attempt counters.
        /// </summary>
        /// <remarks>
        /// Resets retry attempt counters on failed (optionally also completed) outputs and they will be subsequently picked up for re-rendering.
        /// <br/>The number the counters are reset to is determined by a global configuration value. If OutputIds are specified, the rest of the fields are ignored.
        /// <br/>Can reset 100 outputs at most. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing options to filter which outputs should be reset.</param>
        /// <returns>Business process tracking the resetting</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ResetRetryAttemptsAsync(OutputResetRetryAttemptsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IProfileClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Get profile of currently logged in user.
        /// </remarks>
        /// <returns>User profile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserProfile> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates profile of currently logged in user.
        /// </remarks>
        /// <param name="request">Request to update a user profile..</param>
        /// <returns>Updated user profile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserProfile> UpdateAsync(UserProfileUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request deletion
        /// </summary>
        /// <remarks>
        /// Requests deletion of the current user profile.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task RequestDeletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISchemaPermissionSetClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get schema permission set
        /// </summary>
        /// <remarks>
        /// Gets the schema permission set detail information by the schema permission set ID.
        /// </remarks>
        /// <param name="id">Schema permission set ID.</param>
        /// <returns>Detail of a schema permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaPermissionSetDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update schema permission set
        /// </summary>
        /// <remarks>
        /// Updates the schema permission set specified by the ID and based on supplied request.
        /// </remarks>
        /// <param name="id">Schema permission set ID.</param>
        /// <param name="permissionSet">Permission set</param>
        /// <returns>Detail of a schema permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaPermissionSetDetail> UpdateAsync(string id, SchemaPermissionSetUpdateRequest permissionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete schema permission set
        /// </summary>
        /// <remarks>
        /// Deletes the schema permission set specified by the ID.
        /// </remarks>
        /// <param name="id">Schema permission set ID.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create schema permission set
        /// </summary>
        /// <remarks>
        /// Creates new schema permission set based on supplied request.
        /// </remarks>
        /// <param name="permissionSet">Permission set</param>
        /// <returns>Detail of a schema permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaPermissionSetDetail> CreateAsync(SchemaPermissionSetCreateRequest permissionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Gets multiple schema permission set details by the schema permission set IDs.
        /// </remarks>
        /// <param name="ids">Ids</param>
        /// <returns>Array of Detail of a schema permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchemaPermissionSetDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership of schema permission set
        /// </summary>
        /// <remarks>
        /// Transfers ownership of schema permission set to supplied user.
        /// </remarks>
        /// <param name="id">Schema permission set ID.</param>
        /// <param name="request">Request to transfer the ownership of a permission set.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipAsync(string id, PermissionSetOwnershipTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permissions for schema permission set
        /// </summary>
        /// <remarks>
        /// Returns permissions for the schema permission set for the current user.
        /// </remarks>
        /// <param name="id">Schema permission set ID.</param>
        /// <returns>Array of Permission set rights</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PermissionSetRight>> GetPermissionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Creates new schema permission sets based on supplied requests.
        /// </remarks>
        /// <param name="request">Request to update multiple schema permission sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> CreateManyAsync(SchemaPermissionSetCreateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Updates the schema permission sets specified by the IDs and based on supplied request.
        /// </remarks>
        /// <param name="request">Request to update multiple schema permissions sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> UpdateManyAsync(SchemaPermissionSetUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Deletes the schema permission sets specified by the IDs.
        /// </remarks>
        /// <param name="request">Request to delete multiple permission sets.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> DeleteManyAsync(PermissionSetDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership of multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Transfers ownership of multiple schema permission sets to respective supplied users.
        /// </remarks>
        /// <param name="request">Request to transfer the ownership of multiple permission sets.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipManyAsync(PermissionSetOwnershipTransferManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permissions for multiple schema permission sets
        /// </summary>
        /// <remarks>
        /// Returns permissions for multiple schema permission sets for the current user.
        /// </remarks>
        /// <param name="ids">Ids</param>
        /// <returns>Array of Rights that the current user has on a permission set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PermissionSetUserPermissionRights>> GetPermissionsManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search schema permission set
        /// </summary>
        /// <remarks>
        /// Searches schema permission sets as specified in the search request.
        /// </remarks>
        /// <param name="request">Request to search permission sets.</param>
        /// <returns>Result of a permission set search operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISchemaClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get schema
        /// </summary>
        /// <remarks>
        /// Gets the schema detail by schema ID.
        /// </remarks>
        /// <param name="id">The schema ID.</param>
        /// <returns>Schema detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="SchemaNotFoundException">Requested schema could not be found</exception>
        System.Threading.Tasks.Task<SchemaDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update schema
        /// </summary>
        /// <remarks>
        /// Updates an existing schema.
        /// <br/>Depending on how much the schema is referenced by existing data, the operation can take a lot of time.
        /// </remarks>
        /// <param name="id">The schema ID.</param>
        /// <param name="request">The schema update request.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <returns>Schema update result, containing the updated schema</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaValidationException">The validation exception of schema update</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="SchemaNotFoundException">Schema with this ID could not be found</exception>
        System.Threading.Tasks.Task<SchemaUpdateResult> UpdateAsync(string id, SchemaUpdateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete schema
        /// </summary>
        /// <remarks>
        /// Deletes an existing schema.
        /// <br/>Depending on how much the schema is referenced, the operation can take a lot of time.
        /// </remarks>
        /// <param name="id">The schema ID.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <returns>Schema delete result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaInUseException">Schema is used in other entities and cannot be deleted</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="SchemaNotFoundException">Schema with this ID could not be found</exception>
        System.Threading.Tasks.Task<SchemaDeleteResult> DeleteAsync(string id, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Exists field in schema
        /// </summary>
        /// <remarks>
        /// Checks if the field in the specified schema already exists.
        /// <br/>Also returns a flag indicating if the field was previously deleted and the ID can therefore not be reused.
        /// </remarks>
        /// <param name="schemaId">The schema ID.</param>
        /// <param name="fieldId">The field ID.</param>
        /// <returns>Field Exists response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FieldExistsResponse> FieldExistsAsync(string schemaId, string fieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all schemas referenced by the schema specified in id
        /// </summary>
        /// <remarks>
        /// Can fetch referencing schemas for 100 schemas at most.
        /// </remarks>
        /// <param name="id">The schema ID.</param>
        /// <param name="sourceSchema">If true, the returned schemas contain also the source schema for which the referenced schemas were requested. If false, the source schema is not returned (default behavior).</param>
        /// <returns>Referenced schema details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchemaDetail>> GetReferencedAsync(string id, bool? sourceSchema = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership
        /// </summary>
        /// <remarks>
        /// Transfer ownership of the schema specified in id
        /// </remarks>
        /// <param name="id">The schema ID.</param>
        /// <param name="request">Request detailing which user to transfer to.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task TransferOwnershipAsync(string id, SchemaOwnershipTransferRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create schema
        /// </summary>
        /// <remarks>
        /// Create a new schema.
        /// </remarks>
        /// <param name="request">The schema create request.</param>
        /// <param name="timeout">Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
        /// <br/>            Only the waiting is aborted, and the calls returned.</param>
        /// <returns>Schema create result, containing the created schema</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="DuplicateSchemaException">Schema with this name already exists</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        /// <exception cref="SchemaValidationException">The validation exception of schema creation</exception>
        System.Threading.Tasks.Task<SchemaCreateResult> CreateAsync(SchemaCreateRequest request, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple schemas
        /// </summary>
        /// <remarks>
        /// Gets multiple schema details by given schema IDs.
        /// <br/>Can fetch 100 schema details at most.
        /// </remarks>
        /// <param name="ids">Comma separated list of schema IDs.</param>
        /// <returns>List of schema details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchemaDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all schemas referenced by the schemas specified in ids
        /// </summary>
        /// <param name="ids">The schema IDs.</param>
        /// <param name="sourceSchema">If true, the returned schemas contain also the source schemas for which the referenced schemas were requested. If false, the source schemas are not returned (default behavior).</param>
        /// <returns>Referenced schema details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchemaDetail>> GetManyReferencedAsync(System.Collections.Generic.IEnumerable<string> ids = null, bool? sourceSchema = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer ownership of multiple schemas
        /// </summary>
        /// <remarks>
        /// Transfers ownership of multiple schemas to specified user. The target user must have the ManageSchemas user right.
        /// <br/>The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Schema ownership transfer many request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> TransferOwnershipManyAsync(SchemaOwnershipTransferManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search schemas
        /// </summary>
        /// <remarks>
        /// Searches schemas as specified in the search request.
        /// </remarks>
        /// <param name="request">The schema search request.</param>
        /// <returns>Schema search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaSearchResult> SearchAsync(SchemaSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used in an aggregator on a schema.
        /// </summary>
        /// <param name="id">The ID of the schema.</param>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetAggregationFieldsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used in an aggregator on multiple schemas.
        /// </summary>
        /// <param name="ids">The IDs of the schemas.</param>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetAggregationFieldsManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used in a filter on a schema.
        /// </summary>
        /// <param name="id">The ID of the schema.</param>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetFilterFieldsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used in a filter on multiple schemas.
        /// </summary>
        /// <param name="ids">The IDs of the schemas.</param>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldInfo>> GetFilterFieldsManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the fields that can be used for sorting.
        /// </summary>
        /// <param name="schemaTypes">Schema types to include in search</param>
        /// <returns>The list of fields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SortFieldInfo>> GetSortFieldsBySchemaTypesAsync(System.Collections.Generic.IEnumerable<SchemaType> schemaTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISchemaTransferClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import schemas
        /// </summary>
        /// <remarks>
        /// Imports schemas and list items. The file must already be uploaded before calling this endpoint. See [Transfer](#tag/Transfer).
        /// <br/>The operation is executed asynchronous and it is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The schema import request.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="FileTransferNotFoundException">File transfer not found</exception>
        /// <exception cref="PictureparkArgumentNullException">Argument must not be null</exception>
        System.Threading.Tasks.Task<Transfer> ImportAsync(SchemaImportRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import schemas
        /// </summary>
        /// <remarks>
        /// Maximum uploaded file size is 500Mib The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="body">Body</param>
        /// <param name="name">Name of the schema import</param>
        /// <param name="allowMissingDependencies">Indicates if missing dependencies between imported list items should be allowed</param>
        /// <param name="importListItems">Indicates if list items should be imported</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ImportJsonAsync(System.IO.Stream body = null, string name = null, bool? allowMissingDependencies = null, bool? importListItems = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShareClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get share json
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="lang">Language code</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the share are resolved and returned.</param>
        /// <param name="contentResolveLimit">Optional limit the number of contents to resolve. Use a lower value for higher performance. If nothing is specified, everything is resolved.</param>
        /// <returns>ShareDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareDetail> GetShareJsonAsync(string token, string lang = null, System.Collections.Generic.IEnumerable<ShareResolveBehavior> resolveBehaviors = null, int? contentResolveLimit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get share contents
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="lang">Language code</param>
        /// <param name="limit">Number of contents to return</param>
        /// <param name="pageToken">PageToken to page over contents</param>
        /// <returns>ShareContentDetailResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareContentDetailResult> GetShareContentsAsync(string token, string lang = null, int? limit = null, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get shared outputs
        /// </summary>
        /// <param name="token">Share token</param>
        /// <returns>List of OutputResolveResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareOutputsResult> GetOutputsInShareAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download shared outputs
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="width">Optional width in pixels to resize image</param>
        /// <param name="height">Optional height in pixels to resize image</param>
        /// <param name="range">The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string token, int? width = null, int? height = null, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download selection of a share
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="request">Share download request</param>
        /// <returns>DownloadLink</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DownloadLink> CreateShareSelectionDownloadLinkAsync(string token, ShareDownloadRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download shared output
        /// </summary>
        /// <remarks>
        /// Download single content in a specific output format (or automatically determined format if none is specified). To resize images on download specify target width &amp; height. To download only a portion of the file, specify the range parameter.
        /// </remarks>
        /// <param name="token">Share token</param>
        /// <param name="contentId">The content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="width">Optional width in pixels to resize image</param>
        /// <param name="height">Optional height in pixels to resize image</param>
        /// <param name="range">The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadSingleContentAsync(string token, string contentId, string outputFormatId, int? width = null, int? height = null, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download shared outputs
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="conversionPreset">Image editing specification</param>
        /// <param name="range">The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadWithConversionPresetAsync(string token, string conversionPreset, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download shared display content outputs
        /// </summary>
        /// <param name="token">Share token</param>
        /// <param name="contentId">The content id</param>
        /// <param name="outputFormatId">Id of the output format</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadDisplayContentOutputsAsync(string token, string contentId, string outputFormatId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Get share by id (basic or embed).
        /// </remarks>
        /// <param name="id">Share Id (not token, use [GetShareJson](#operation/Share_GetShareJson) to get share by token)</param>
        /// <param name="resolveBehaviors">List of enums that control which parts of the share are resolved and returned.</param>
        /// <param name="contentResolveLimit">Optional limit the number of contents to resolve. Use a lower value for higher performance. If nothing is specified, everything is resolved.</param>
        /// <returns>Share detail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="ShareNotFoundException">Share could not be found</exception>
        System.Threading.Tasks.Task<ShareDetail> GetAsync(string id, System.Collections.Generic.IEnumerable<ShareResolveBehavior> resolveBehaviors = null, int? contentResolveLimit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates a single share. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">The share id.</param>
        /// <param name="request">The share update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="BusinessProcessLifeCycleNotHitException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateAsync(string id, ShareBaseUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get contents in share
        /// </summary>
        /// <param name="id">Share Id</param>
        /// <param name="limit">Number of contents to return</param>
        /// <param name="pageToken">PageToken to page over contents</param>
        /// <returns>ShareContentDetailResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareContentDetailResult> GetContentsInShareAsync(string id, int? limit = null, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a new share (basic or embed). The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Polymorphic create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PermissionValidationException">No permission to share</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="ContentNotFoundException">Content could not be found</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(ShareBaseCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple shares
        /// </summary>
        /// <remarks>
        /// Deletes multiple shares. Returns a business process which will hold a batch response detail containing information about successful and failed rows. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">A delete many request containing the ids of the shares to delete.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(ShareDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes multiple shares
        /// </summary>
        /// <param name="request">A revoke many request containing the ids of the shares to revoke.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> RevokeAsync(ShareRevokeManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate
        /// </summary>
        /// <remarks>
        /// Aggregates shares either created by or sent to current user.
        /// </remarks>
        /// <param name="request">Aggregation request</param>
        /// <returns>Share aggregation result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ShareAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search shares either created by or sent to current user.
        /// </remarks>
        /// <param name="request">Search request</param>
        /// <returns>Share search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareSearchResult> SearchAsync(ShareSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IStatisticClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve single content statistics
        /// </summary>
        /// <param name="contentId">Id of Content</param>
        /// <param name="timeFrames">Optionally aggregate data for given time frames</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentStatisticsAggregated> GetSingleContentStatisticsAsync(string contentId, System.Collections.Generic.IEnumerable<System.TimeSpan> timeFrames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export content statistics
        /// </summary>
        /// <remarks>
        /// Trigger export of statistical data for contents for further processing. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ExportContentStatisticsAsync(ExportContentStatisticsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve download link
        /// </summary>
        /// <remarks>
        /// Resolve an actual Url to download exported file from referenceId found on completed BusinessProcess.
        /// </remarks>
        /// <param name="referenceId">Reference id</param>
        /// <returns>Download link information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DownloadLink> ResolveDownloadLinkAsync(string referenceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add content events
        /// </summary>
        /// <remarks>
        /// Supply additional events from external sources. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> AddContentEventsAsync(AddContentEventsRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITemplateClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get template
        /// </summary>
        /// <param name="id">ID of template.</param>
        /// <returns>Template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Template> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update template
        /// </summary>
        /// <param name="id">ID of template.</param>
        /// <param name="request">Template</param>
        /// <returns>Template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Template> UpdateAsync(string id, TemplateUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete template
        /// </summary>
        /// <param name="id">ID of template</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create template
        /// </summary>
        /// <param name="request">TemplateCreateRequest</param>
        /// <returns>Template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Template> CreateAsync(TemplateCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all templates
        /// </summary>
        /// <returns>All templates</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Template>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search templates
        /// </summary>
        /// <remarks>
        /// All matching templates are returned. No pagination is implemented.
        /// </remarks>
        /// <param name="searchRequest">The template search request.</param>
        /// <returns>Template search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<TemplateSearchResult> SearchAsync(TemplateSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITransferClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create transfer
        /// </summary>
        /// <remarks>
        /// For transfers of type FileUpload or FileUploadAutoImport, after creating the transfer, wait for the returned BusinessProcess to hit the "Created" state before attempting to upload files.
        /// </remarks>
        /// <param name="request">The create transfer request</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="MaximumTransferSizeException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Transfer> CreateAsync(CreateTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get transfer details
        /// </summary>
        /// <param name="id">ID of transfer.</param>
        /// <returns>TransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransferDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete transfer
        /// </summary>
        /// <remarks>
        /// A transfer cannot be deleted if it's currently in the UploadInProgress or ImportInProgress state.
        /// </remarks>
        /// <param name="id">ID of transfer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import transfer
        /// </summary>
        /// <remarks>
        /// This triggers the import of a Transfer, creating Contents. All items in the Transfer will be enqueued for rendering.
        /// <br/>            
        /// <br/>Wait for completion on the Business process ID that is returned to wait for import completion.
        /// <br/>Note: Before attempting to import a Transfer, the transfer has to be in the TransferReady state.
        /// </remarks>
        /// <param name="id">ID of transfer.</param>
        /// <param name="request">The ImportTransfer request.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Transfer> ImportAsync(string id, ImportTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import transfer partially
        /// </summary>
        /// <remarks>
        /// This triggers the import of selected items in a Transfer, creating contents. All imported items will be enqueued for rendering.
        /// <br/>            
        /// <br/>Wait for completion on the Business process ID that is returned to wait for import completion.
        /// <br/>            
        /// <br/>Transfer will transition to state ImportDone if no files of the transfer remain for import.
        /// <br/>Transfer will transition to state TransferReady if any files of the transfer remain for import.
        /// </remarks>
        /// <param name="id">ID of transfer.</param>
        /// <param name="request">The ImportTransferPartial request.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Transfer> PartialImportAsync(string id, ImportTransferPartialRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel transfer
        /// </summary>
        /// <remarks>
        /// Requests cancellation of transfer.
        /// <br/>Note: Transfers can only be cancelled when state is UploadInProgress.
        /// </remarks>
        /// <param name="id">ID of transfer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task CancelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search
        /// </summary>
        /// <param name="request">The transfer search request</param>
        /// <returns>TransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransferSearchResult> SearchAsync(TransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get file
        /// </summary>
        /// <param name="id">ID of file transfer.</param>
        /// <returns>FileTransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<FileTransferDetail> GetFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for files
        /// </summary>
        /// <param name="request">The file transfer search request</param>
        /// <returns>FileTransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<FileTransferSearchResult> SearchFilesAsync(FileTransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete files
        /// </summary>
        /// <param name="request">The file transfer delete request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteFilesAsync(FileTransferDeleteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blacklist
        /// </summary>
        /// <remarks>
        /// The blacklist is a list of patterns that a filename must not match.
        /// <br/>A filename matching an item on the blacklist will be skipped during uploading.
        /// <br/>            
        /// <br/>The client is responsibly for matching uploaded files against the blacklist
        /// <br/>when creating the transfer. Otherwise, during transfer creation some items might get skipped
        /// <br/>causing issues when uploading later on.
        /// </remarks>
        /// <returns>Blacklist</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Blacklist> GetBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Uploads the specified chunk data.
        /// <br/>            
        /// <br/>Use `Content-Type: application/octet-stream` for uploading chunked data.
        /// <br/>The chunk data should be contained in the body of your request.
        /// <br/>            
        /// <br/>To upload a file, it is recommended to use a single chunk that has the same size as the file. This is only possible if you're using
        /// <br/>the octet-stream upload method. If you choose to use formdata upload or multiple chunks per file, the file must be chunked into
        /// <br/>1MB-100MB chunks. The last chunk may be smaller than 1MB.
        /// </remarks>
        /// <param name="chunkNumber">Information about chunk.</param>
        /// <param name="currentChunkSize">Information about chunk.</param>
        /// <param name="totalSize">Information about chunk.</param>
        /// <param name="totalChunks">Information about chunk.</param>
        /// <param name="transferId">ID of transfer.</param>
        /// <param name="requestId">Identifier of file.</param>
        /// <param name="body">Body</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task UploadFileAsync(long chunkNumber, long currentChunkSize, long totalSize, long totalChunks, string transferId, string requestId, System.IO.Stream body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserRoleClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search user roles
        /// </summary>
        /// <param name="request">User role search request.</param>
        /// <returns>Result of the user role search</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserRoleSearchResult> SearchAsync(UserRoleSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple user roles
        /// </summary>
        /// <remarks>
        /// Gets multiple user role details by the user role IDs. Can fetch maximum of 100 user roles at once.
        /// </remarks>
        /// <param name="ids">User role IDs to get information about.</param>
        /// <returns>Array of Represents a user role, which associates users with user rights.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRoleDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create user role
        /// </summary>
        /// <remarks>
        /// Creates new user role based on the supplied request.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new user role.</param>
        /// <returns>Represents a user role, which associates users with user rights.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserRoleDetail> CreateAsync(UserRoleCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple user roles
        /// </summary>
        /// <remarks>
        /// Creates new user roles based on supplied requests.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new user role.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> CreateManyAsync(UserRoleCreateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple user roles
        /// </summary>
        /// <remarks>
        /// Updates the user roles specified by the IDs and based on supplied requests.
        /// </remarks>
        /// <param name="request">Request containing information needed to update the user role.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> UpdateManyAsync(UserRoleUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple user roles
        /// </summary>
        /// <remarks>
        /// Deletes the user roles specified by the IDs.
        /// </remarks>
        /// <param name="request">The request with user role IDs to delete.</param>
        /// <returns>Response to a bulk operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BulkResponse> DeleteManyAsync(UserRoleDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user role
        /// </summary>
        /// <remarks>
        /// Gets the user role by the user role ID.
        /// </remarks>
        /// <param name="id">User role ID.</param>
        /// <returns>Represents a user role, which associates users with user rights.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserRoleDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update user role
        /// </summary>
        /// <remarks>
        /// Updates the user role specified by the ID and based on supplied request.
        /// </remarks>
        /// <param name="id">User role ID.</param>
        /// <param name="request">Request containing information needed to update the user role.</param>
        /// <returns>Represents a user role, which associates users with user rights.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserRoleDetail> UpdateAsync(string id, UserRoleEditable request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user role
        /// </summary>
        /// <remarks>
        /// Deletes the user role specified by the ID.
        /// </remarks>
        /// <param name="id">User role ID.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user
        /// </summary>
        /// <param name="id">User ID to search for.</param>
        /// <returns>Requested user details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update user
        /// </summary>
        /// <param name="id">User ID to action on.</param>
        /// <param name="request">New user information.</param>
        /// <returns>User details after the update of the user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> UpdateAsync(string id, UserUpdateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lock / unlock user
        /// </summary>
        /// <remarks>
        /// Does not affect AuthorizationState of user.
        /// <br/>If User is already in desired state, this will be returned as error.
        /// </remarks>
        /// <param name="id">User ID to action on.</param>
        /// <param name="request">Request detailing if the user should be locked or unlocked.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task LockAsync(string id, UserLockRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change lock state of multiple users
        /// </summary>
        /// <remarks>
        /// Does not affect AuthorizationState of users
        /// <br/>Users which are already in desired state will be returned as errors. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Information about users to update and the desired lock state</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> LockManyAsync(UserLockManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change user's review state
        /// </summary>
        /// <remarks>
        /// Users with AuthorizationState != ToBeReviewed are considered reviewed.
        /// </remarks>
        /// <param name="id">User ID to action on.</param>
        /// <param name="request">Request detailing if the user should be set as _reviewed_ or _to be reviewed_.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task ReviewAsync(string id, UserReviewRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change Review state of multiple users
        /// </summary>
        /// <remarks>
        /// Users with AuthorizationState != ToBeReviewed are considered reviewed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Information about users to update and the desired review state</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ReviewManyAsync(UserReviewManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite user
        /// </summary>
        /// <remarks>
        /// Formally invites a user, e.g. sends an invitation email. Transitions AuthorizationState to Invited, implicitly reviews user.
        /// </remarks>
        /// <param name="id">User ID to action on.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task InviteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite multiple users
        /// </summary>
        /// <remarks>
        /// Formally invites users, e.g. sends an invitation email. Transitions to Invited, implicitly reviews user. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Information about users to invite</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> InviteManyAsync(UserInviteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reinvite user
        /// </summary>
        /// <remarks>
        /// Formally re-invites a user, e.g. sends an invitation email.
        /// </remarks>
        /// <param name="id">User ID to action on.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task ReinviteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reinvite users
        /// </summary>
        /// <remarks>
        /// Formally re-invites users, e.g. sends an invitation email. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Information about users to reinvite</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ReInviteManyAsync(UserReinviteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign or unassign userRoles
        /// </summary>
        /// <param name="request">Information about users to modify and kind of operation</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> AssignUserRolesAsync(UserRoleAssignManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="id">User ID</param>
        /// <param name="request">Request with details about deletion</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, UserDeleteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Archive user
        /// </summary>
        /// <remarks>
        /// Only deleted users can be archived. If a user, before being deleted, was an owner of contents, schemas or permissions sets, the archiving through this endpoint won't be possible:
        /// <br/>            in such a case the archiving will be executed automatically by the system after the retention time is passed.
        /// </remarks>
        /// <param name="id">User ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task ArchiveAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore user
        /// </summary>
        /// <remarks>
        /// Restores previously deleted user, who was not cleaned up yet.
        /// </remarks>
        /// <param name="id">User ID to action on.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task RestoreAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancels a user triggered deletion request and returns user to _Reviewed_ state.
        /// </summary>
        /// <param name="id">User ID to action on.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task CancelDeletionRequestAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user by owner token
        /// </summary>
        /// <param name="tokenId">ID of the owner token.</param>
        /// <returns>User details of the user referenced by the owner token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> GetByOwnerTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// User will not be invited.
        /// </remarks>
        /// <param name="request">Requested user information.</param>
        /// <returns>Newly created user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> CreateAsync(UserCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple users
        /// </summary>
        /// <remarks>
        /// Can fetch 100 users at most.
        /// </remarks>
        /// <param name="ids">User IDs.</param>
        /// <returns>Details of all the users who were found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search users
        /// </summary>
        /// <param name="request">User search request.</param>
        /// <returns>Result of the user search</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserSearchResult> SearchAsync(UserSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate users
        /// </summary>
        /// <param name="request">User aggregation request.</param>
        /// <returns>Aggregation based on the request</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(UserAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update identity provider on multiple users
        /// </summary>
        /// <param name="request">User update identity provider request.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateIdentityProviderManyAsync(UserUpdateIdentityProviderManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List users, result contains only essential info about user. Requires the `ListUsers` or the `ManageUsers` UserRight.
        /// </summary>
        /// <param name="request">User list request.</param>
        /// <returns>Result of the list users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserListResult> ListAsync(UserListRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IXmpMappingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets fields available for XMP mapping.
        /// </summary>
        /// <returns>XmpMappingTargets containing both XMP fields and metadata fields that are available for mapping.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<XmpMappingTargets> GetAvailableTargetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for XMP mappings
        /// </summary>
        /// <param name="request">Search request for getting configured XMP mappings.</param>
        /// <returns>Holds results of search for XMP mappings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<XmpMappingEntrySearchResult> SearchAsync(XmpMappingEntrySearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create xmp mapping
        /// </summary>
        /// <remarks>
        /// Creates new xmp mapping based on the supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new xmp mapping.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(XmpMappingEntryCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple xmp mappings
        /// </summary>
        /// <remarks>
        /// Gets multiple xmp mapping details by the xmp mapping IDs. Can fetch maximum of 100 xmp mappings at once.
        /// </remarks>
        /// <param name="ids">Xmp mapping IDs to get information about.</param>
        /// <returns>Array of XMP mapping entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="RequestSizeLimitExceededException">List of IDs exceeded maximum size</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<XmpMappingEntry>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update xmp mapping
        /// </summary>
        /// <remarks>
        /// Updates the xmp mapping specified by the ID and based on supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">Xmp mapping ID.</param>
        /// <param name="request">Request containing information needed to update the xmp mapping.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateAsync(string id, XmpMappingEntry request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete xmp mapping
        /// </summary>
        /// <remarks>
        /// Deletes the xmp mapping specified by the ID. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="id">Xmp mapping ID.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get xmp mapping
        /// </summary>
        /// <remarks>
        /// Gets the xmp mapping by the xmp mapping ID.
        /// </remarks>
        /// <param name="id">Xmp mapping ID.</param>
        /// <returns>XMP mapping entry</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<XmpMappingEntry> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple xmp mappings
        /// </summary>
        /// <remarks>
        /// Creates new xmp mappings based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing information needed to create new xmp mapping.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateManyAsync(XmpMappingEntryCreateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple xmp mappings
        /// </summary>
        /// <remarks>
        /// Updates the xmp mappings specified by the IDs and based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">Request containing information needed to update the xmp mapping.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateManyAsync(XmpMappingEntryUpdateManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple xmp mappings
        /// </summary>
        /// <remarks>
        /// Deletes the xmp mappings specified by the IDs. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.
        /// </remarks>
        /// <param name="request">The request with xmp mapping IDs to delete.</param>
        /// <returns>Business process</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkValidationException">Validation exception</exception>
        /// <exception cref="PictureparkForbiddenException">Forbidden</exception>
        /// <exception cref="PictureparkNotFoundException">Entity not found</exception>
        /// <exception cref="PictureparkConflictException">Version conflict</exception>
        /// <exception cref="PictureparkTooManyRequestsException">Too many requests</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(XmpMappingEntryDeleteManyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    /// <summary>
    /// Business process
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetails", typeof(BusinessProcessDetails))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcess
    {
        /// <summary>
        /// ID of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// ID of the business process definition associated to the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// ID of the document that is modified by the running of the business process. Used during the cancellation of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Type of the document that is modified by the running of the business process. Used during the cancellation of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceDocType { get; set; }

        /// <summary>
        /// True if the business process execution can be cancelled. False otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportsCancellation", Required = Newtonsoft.Json.Required.Always)]
        public bool SupportsCancellation { get; set; }

        /// <summary>
        /// Scope of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcessScope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessScope BusinessProcessScope { get; set; }

        /// <summary>
        /// Current life cycle of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// When the business process started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// When the business process finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndDate { get; set; }

        /// <summary>
        /// Is the business process finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Always)]
        public bool Finished { get; set; }

        /// <summary>
        /// List containing the history of all the state transitions of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessProcessState> StateHistory { get; set; }

        /// <summary>
        /// Current state of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Timestamp when the business process last reported progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastReportedProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastReportedProgress { get; set; }

        /// <summary>
        /// Id of the business process that will be automatically started after the completion of the current one, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("continuationBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationBusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Scope of the business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessProcessScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 1,

    }

    /// <summary>
    /// Life cycle of the business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessProcessLifeCycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInProgress")]
        CancellationInProgress = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SucceededWithErrors")]
        SucceededWithErrors = 6,

    }

    /// <summary>
    /// State transition information of a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessState
    {
        /// <summary>
        /// State of the business process
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string State { get; set; }

        /// <summary>
        /// Date and time of when the state transition was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Eventual error associated to the state transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error information with serialized exception
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {
        /// <summary>
        /// Serialized PictureparkBusinessException.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }

        /// <summary>
        /// Trace ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }

        /// <summary>
        /// Trace job ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkValidationException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkBusinessException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkBusinessException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkBusinessException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("PictureparkValidationException", typeof(PictureparkValidationException))]
    [JsonInheritanceAttribute("PictureparkBusinessException", typeof(PictureparkBusinessException))]
    [JsonInheritanceAttribute("ServiceProviderDeleteException", typeof(ServiceProviderDeleteException))]
    [JsonInheritanceAttribute("ServiceProviderCreateException", typeof(ServiceProviderCreateException))]
    [JsonInheritanceAttribute("ServiceProviderNotFoundException", typeof(ServiceProviderNotFoundException))]
    [JsonInheritanceAttribute("ElasticVersionUpdateException", typeof(ElasticVersionUpdateException))]
    [JsonInheritanceAttribute("InvalidVersionException", typeof(InvalidVersionException))]
    [JsonInheritanceAttribute("EnvironmentNotDeactivatedException", typeof(EnvironmentNotDeactivatedException))]
    [JsonInheritanceAttribute("EnvironmentNotFoundException", typeof(EnvironmentNotFoundException))]
    [JsonInheritanceAttribute("EnvironmentDeactivationException", typeof(EnvironmentDeactivationException))]
    [JsonInheritanceAttribute("CustomerViolationException", typeof(CustomerViolationException))]
    [JsonInheritanceAttribute("CustomerAliasNotFoundException", typeof(CustomerAliasNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotDeactivatedException", typeof(CustomerNotDeactivatedException))]
    [JsonInheritanceAttribute("CustomerDeactivationException", typeof(CustomerDeactivationException))]
    [JsonInheritanceAttribute("CustomerHostNotFoundException", typeof(CustomerHostNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotFoundException", typeof(CustomerNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotActiveException", typeof(CustomerNotActiveException))]
    [JsonInheritanceAttribute("ConfigurationIndexNotFoundException", typeof(ConfigurationIndexNotFoundException))]
    [JsonInheritanceAttribute("DuplicateAliasException", typeof(DuplicateAliasException))]
    [JsonInheritanceAttribute("RedisDatabaseExceededException", typeof(RedisDatabaseExceededException))]
    [JsonInheritanceAttribute("MaximumTransferSizeException", typeof(MaximumTransferSizeException))]
    [JsonInheritanceAttribute("EnvironmentNotAvailableException", typeof(EnvironmentNotAvailableException))]
    [JsonInheritanceAttribute("CustomerNotAvailableException", typeof(CustomerNotAvailableException))]
    [JsonInheritanceAttribute("PictureparkForbiddenException", typeof(PictureparkForbiddenException))]
    [JsonInheritanceAttribute("PictureparkNotFoundException", typeof(PictureparkNotFoundException))]
    [JsonInheritanceAttribute("PictureparkConflictException", typeof(PictureparkConflictException))]
    [JsonInheritanceAttribute("PictureparkTooManyRequestsException", typeof(PictureparkTooManyRequestsException))]
    [JsonInheritanceAttribute("ContentNotFoundException", typeof(ContentNotFoundException))]
    [JsonInheritanceAttribute("ReferencesUpdateException", typeof(ReferencesUpdateException))]
    [JsonInheritanceAttribute("ReferenceUpdateException", typeof(ReferenceUpdateException))]
    [JsonInheritanceAttribute("BusinessProcessLifeCycleNotHitException", typeof(BusinessProcessLifeCycleNotHitException))]
    [JsonInheritanceAttribute("PictureparkTimeoutException", typeof(PictureparkTimeoutException))]
    [JsonInheritanceAttribute("RequestSizeLimitExceededException", typeof(RequestSizeLimitExceededException))]
    [JsonInheritanceAttribute("ContentSchemaChangeException", typeof(ContentSchemaChangeException))]
    [JsonInheritanceAttribute("CommentNotFoundException", typeof(CommentNotFoundException))]
    [JsonInheritanceAttribute("SchemaNotFoundException", typeof(SchemaNotFoundException))]
    [JsonInheritanceAttribute("PictureparkArgumentNullException", typeof(PictureparkArgumentNullException))]
    [JsonInheritanceAttribute("SchemaValidationException", typeof(SchemaValidationException))]
    [JsonInheritanceAttribute("SchemaInUseException", typeof(SchemaInUseException))]
    [JsonInheritanceAttribute("DuplicateSchemaException", typeof(DuplicateSchemaException))]
    [JsonInheritanceAttribute("FileTransferNotFoundException", typeof(FileTransferNotFoundException))]
    [JsonInheritanceAttribute("ShareNotFoundException", typeof(ShareNotFoundException))]
    [JsonInheritanceAttribute("PermissionValidationException", typeof(PermissionValidationException))]
    [JsonInheritanceAttribute("PictureparkContradictoryArgumentsException", typeof(PictureparkContradictoryArgumentsException))]
    [JsonInheritanceAttribute("UserEmailAlreadyExistsException", typeof(UserEmailAlreadyExistsException))]
    [JsonInheritanceAttribute("UserRoleAssignedException", typeof(UserRoleAssignedException))]
    [JsonInheritanceAttribute("UnableToDeleteUserRoleException", typeof(UnableToDeleteUserRoleException))]
    [JsonInheritanceAttribute("UserNotFoundException", typeof(UserNotFoundException))]
    [JsonInheritanceAttribute("UserNotDeactivatedException", typeof(UserNotDeactivatedException))]
    [JsonInheritanceAttribute("UserWithOwnerTokensArchiveException", typeof(UserWithOwnerTokensArchiveException))]
    [JsonInheritanceAttribute("UserInactiveOrDeletedException", typeof(UserInactiveOrDeletedException))]
    [JsonInheritanceAttribute("InactiveOrDeletedUserRefusedAccessException", typeof(InactiveOrDeletedUserRefusedAccessException))]
    [JsonInheritanceAttribute("TermsOfServiceNotNewestException", typeof(TermsOfServiceNotNewestException))]
    [JsonInheritanceAttribute("IllegalAuthorizationStateTransitionException", typeof(IllegalAuthorizationStateTransitionException))]
    [JsonInheritanceAttribute("TermsOfServiceConsentRequiredException", typeof(TermsOfServiceConsentRequiredException))]
    [JsonInheritanceAttribute("UserRolesNotFoundException", typeof(UserRolesNotFoundException))]
    [JsonInheritanceAttribute("UnauthorizedException", typeof(UnauthorizedException))]
    [JsonInheritanceAttribute("UserUnlockDisallowedException", typeof(UserUnlockDisallowedException))]
    [JsonInheritanceAttribute("UserAlreadyInRequestedLockStateException", typeof(UserAlreadyInRequestedLockStateException))]
    [JsonInheritanceAttribute("LoginUsingIncorrectIdentityProviderException", typeof(LoginUsingIncorrectIdentityProviderException))]
    [JsonInheritanceAttribute("IdentityProviderNotFoundException", typeof(IdentityProviderNotFoundException))]
    [JsonInheritanceAttribute("UserDoesNotSupportLocalLoginException", typeof(UserDoesNotSupportLocalLoginException))]
    [JsonInheritanceAttribute("UserAttributeNotSynchronizableException", typeof(UserAttributeNotSynchronizableException))]
    [JsonInheritanceAttribute("UnableToMapMultipleClaimTypesIntoSameAttributeException", typeof(UnableToMapMultipleClaimTypesIntoSameAttributeException))]
    [JsonInheritanceAttribute("UnableToChangeMappedUserRolesForFederatedUserException", typeof(UnableToChangeMappedUserRolesForFederatedUserException))]
    [JsonInheritanceAttribute("UnableToDeleteDefaultUserRoleException", typeof(UnableToDeleteDefaultUserRoleException))]
    [JsonInheritanceAttribute("UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException", typeof(UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException))]
    [JsonInheritanceAttribute("UserPropertyChangeNotSupportedException", typeof(UserPropertyChangeNotSupportedException))]
    [JsonInheritanceAttribute("UserNotLinkedWithIdsException", typeof(UserNotLinkedWithIdsException))]
    [JsonInheritanceAttribute("LanguageCodeNotExistingException", typeof(LanguageCodeNotExistingException))]
    [JsonInheritanceAttribute("UserByOwnerTokenNotFoundException", typeof(UserByOwnerTokenNotFoundException))]
    [JsonInheritanceAttribute("InvalidOperationWithAnonymousUserException", typeof(InvalidOperationWithAnonymousUserException))]
    [JsonInheritanceAttribute("InvalidOperationWithAnonymousUserRoleException", typeof(InvalidOperationWithAnonymousUserRoleException))]
    [JsonInheritanceAttribute("RenderingException", typeof(RenderingException))]
    [JsonInheritanceAttribute("FormatNotApplicableForRenderingException", typeof(FormatNotApplicableForRenderingException))]
    [JsonInheritanceAttribute("FocalPointCropSizeMissingException", typeof(FocalPointCropSizeMissingException))]
    [JsonInheritanceAttribute("DocumentVersionNotFoundException", typeof(DocumentVersionNotFoundException))]
    [JsonInheritanceAttribute("DefaultChannelDeleteException", typeof(DefaultChannelDeleteException))]
    [JsonInheritanceAttribute("ChannelsNotFoundException", typeof(ChannelsNotFoundException))]
    [JsonInheritanceAttribute("SuperAdminRolesNotAssignableToChannelException", typeof(SuperAdminRolesNotAssignableToChannelException))]
    [JsonInheritanceAttribute("CustomerClonesNotAcceptedException", typeof(CustomerClonesNotAcceptedException))]
    [JsonInheritanceAttribute("ShareOutputNotFoundException", typeof(ShareOutputNotFoundException))]
    [JsonInheritanceAttribute("ShareByTokenNotFoundException", typeof(ShareByTokenNotFoundException))]
    [JsonInheritanceAttribute("TokenGenerationException", typeof(TokenGenerationException))]
    [JsonInheritanceAttribute("ShareExpiredException", typeof(ShareExpiredException))]
    [JsonInheritanceAttribute("ShareSizeLimitExceededException", typeof(ShareSizeLimitExceededException))]
    [JsonInheritanceAttribute("DuplicateSharedOutputException", typeof(DuplicateSharedOutputException))]
    [JsonInheritanceAttribute("DuplicateEmbedConversionPresetException", typeof(DuplicateEmbedConversionPresetException))]
    [JsonInheritanceAttribute("OutputIdNotFoundException", typeof(OutputIdNotFoundException))]
    [JsonInheritanceAttribute("OutputNotFoundException", typeof(OutputNotFoundException))]
    [JsonInheritanceAttribute("UnableToCreateOrModifyStaticOutputFormatException", typeof(UnableToCreateOrModifyStaticOutputFormatException))]
    [JsonInheritanceAttribute("NotSupportedFileMappingException", typeof(NotSupportedFileMappingException))]
    [JsonInheritanceAttribute("NotSupportedFileMappingForDynamicFormatException", typeof(NotSupportedFileMappingForDynamicFormatException))]
    [JsonInheritanceAttribute("NotSupportedFileExtensionException", typeof(NotSupportedFileExtensionException))]
    [JsonInheritanceAttribute("DuplicateOutputFormatIdException", typeof(DuplicateOutputFormatIdException))]
    [JsonInheritanceAttribute("OutputEditingNotSupportedException", typeof(OutputEditingNotSupportedException))]
    [JsonInheritanceAttribute("OutputBackupNotRequestedException", typeof(OutputBackupNotRequestedException))]
    [JsonInheritanceAttribute("OutputBackupHashMismatchException", typeof(OutputBackupHashMismatchException))]
    [JsonInheritanceAttribute("OutputOperationInProgressException", typeof(OutputOperationInProgressException))]
    [JsonInheritanceAttribute("DownloadLinkExpiredException", typeof(DownloadLinkExpiredException))]
    [JsonInheritanceAttribute("RenderingNotAwaitedException", typeof(RenderingNotAwaitedException))]
    [JsonInheritanceAttribute("DuplicateContentDownloadRequestException", typeof(DuplicateContentDownloadRequestException))]
    [JsonInheritanceAttribute("InvalidContentDownloadRequestException", typeof(InvalidContentDownloadRequestException))]
    [JsonInheritanceAttribute("DownloadNotFoundException", typeof(DownloadNotFoundException))]
    [JsonInheritanceAttribute("EmbedMultiDownloadException", typeof(EmbedMultiDownloadException))]
    [JsonInheritanceAttribute("ImageOptimizationLicensingException", typeof(ImageOptimizationLicensingException))]
    [JsonInheritanceAttribute("LeaseNotAcquiredException", typeof(LeaseNotAcquiredException))]
    [JsonInheritanceAttribute("OperationInProgressException", typeof(OperationInProgressException))]
    [JsonInheritanceAttribute("OwnerTokenNotFoundException", typeof(OwnerTokenNotFoundException))]
    [JsonInheritanceAttribute("InvalidStateException", typeof(InvalidStateException))]
    [JsonInheritanceAttribute("ObjectTypeMismatchException", typeof(ObjectTypeMismatchException))]
    [JsonInheritanceAttribute("InvalidStateTransitionException", typeof(InvalidStateTransitionException))]
    [JsonInheritanceAttribute("FailedToLockException", typeof(FailedToLockException))]
    [JsonInheritanceAttribute("PictureparkOperationCanceledException", typeof(PictureparkOperationCanceledException))]
    [JsonInheritanceAttribute("PictureparkApplicationException", typeof(PictureparkApplicationException))]
    [JsonInheritanceAttribute("MissingCustomerDefaultLanguageException", typeof(MissingCustomerDefaultLanguageException))]
    [JsonInheritanceAttribute("PartialOperationNotSupportedException", typeof(PartialOperationNotSupportedException))]
    [JsonInheritanceAttribute("ContractMismatchException", typeof(ContractMismatchException))]
    [JsonInheritanceAttribute("InvalidArgumentException", typeof(InvalidArgumentException))]
    [JsonInheritanceAttribute("UnknownException", typeof(UnknownException))]
    [JsonInheritanceAttribute("OwnerTokenInUseException", typeof(OwnerTokenInUseException))]
    [JsonInheritanceAttribute("InvalidValueFormatException", typeof(InvalidValueFormatException))]
    [JsonInheritanceAttribute("ItemIdDuplicatedException", typeof(ItemIdDuplicatedException))]
    [JsonInheritanceAttribute("CronExpressionInvalidException", typeof(CronExpressionInvalidException))]
    [JsonInheritanceAttribute("CustomerAliasInUseException", typeof(CustomerAliasInUseException))]
    [JsonInheritanceAttribute("CustomerBoostValuesInvalidException", typeof(CustomerBoostValuesInvalidException))]
    [JsonInheritanceAttribute("SnapshotRetentionTimeTooShortException", typeof(SnapshotRetentionTimeTooShortException))]
    [JsonInheritanceAttribute("ReshardIndexNotAllowedException", typeof(ReshardIndexNotAllowedException))]
    [JsonInheritanceAttribute("ReshardNumberOfShardsInvalidException", typeof(ReshardNumberOfShardsInvalidException))]
    [JsonInheritanceAttribute("ReshardNumberOfRoutingShardsInvalidException", typeof(ReshardNumberOfRoutingShardsInvalidException))]
    [JsonInheritanceAttribute("ReshardNumberOfShardsInvalidForExistingRoutingShardsException", typeof(ReshardNumberOfShardsInvalidForExistingRoutingShardsException))]
    [JsonInheritanceAttribute("DuplicateSearchIndexDocException", typeof(DuplicateSearchIndexDocException))]
    [JsonInheritanceAttribute("SearchIndexDocNotFoundException", typeof(SearchIndexDocNotFoundException))]
    [JsonInheritanceAttribute("IndexDocumentNotFoundException", typeof(IndexDocumentNotFoundException))]
    [JsonInheritanceAttribute("SearchIndexNotFoundException", typeof(SearchIndexNotFoundException))]
    [JsonInheritanceAttribute("DefaultSearchIndexDeleteException", typeof(DefaultSearchIndexDeleteException))]
    [JsonInheritanceAttribute("SearchIndexInUseException", typeof(SearchIndexInUseException))]
    [JsonInheritanceAttribute("IndexException", typeof(IndexException))]
    [JsonInheritanceAttribute("IndexMappingException", typeof(IndexMappingException))]
    [JsonInheritanceAttribute("DuplicatedSearchBehaviorException", typeof(DuplicatedSearchBehaviorException))]
    [JsonInheritanceAttribute("SearchStringLeadingWildcardException", typeof(SearchStringLeadingWildcardException))]
    [JsonInheritanceAttribute("DuplicateAggregatorException", typeof(DuplicateAggregatorException))]
    [JsonInheritanceAttribute("InvalidDateTimeFormatException", typeof(InvalidDateTimeFormatException))]
    [JsonInheritanceAttribute("InvalidSortFieldException", typeof(InvalidSortFieldException))]
    [JsonInheritanceAttribute("InvalidUiBehaviorInNonRootAggregatorException", typeof(InvalidUiBehaviorInNonRootAggregatorException))]
    [JsonInheritanceAttribute("InvalidUiBehaviorConfigurationException", typeof(InvalidUiBehaviorConfigurationException))]
    [JsonInheritanceAttribute("InvalidSearchFieldInAggregatorException", typeof(InvalidSearchFieldInAggregatorException))]
    [JsonInheritanceAttribute("SearchStringTooLongException", typeof(SearchStringTooLongException))]
    [JsonInheritanceAttribute("AggregationNameInvalidException", typeof(AggregationNameInvalidException))]
    [JsonInheritanceAttribute("AggregationNameMissingException", typeof(AggregationNameMissingException))]
    [JsonInheritanceAttribute("AggregationSizeInvalidException", typeof(AggregationSizeInvalidException))]
    [JsonInheritanceAttribute("AggregationFilterNotSupportedException", typeof(AggregationFilterNotSupportedException))]
    [JsonInheritanceAttribute("AggregationFieldMissingException", typeof(AggregationFieldMissingException))]
    [JsonInheritanceAttribute("AggregationPathMissingException", typeof(AggregationPathMissingException))]
    [JsonInheritanceAttribute("DocumentVersionConflictException", typeof(DocumentVersionConflictException))]
    [JsonInheritanceAttribute("DuplicateDocumentException", typeof(DuplicateDocumentException))]
    [JsonInheritanceAttribute("ObjectStoreResponseException", typeof(ObjectStoreResponseException))]
    [JsonInheritanceAttribute("ObjectStoreException", typeof(ObjectStoreException))]
    [JsonInheritanceAttribute("QueryException", typeof(QueryException))]
    [JsonInheritanceAttribute("PermissionOwnershipTransferException", typeof(PermissionOwnershipTransferException))]
    [JsonInheritanceAttribute("PermissionSetNotFoundException", typeof(PermissionSetNotFoundException))]
    [JsonInheritanceAttribute("PermissionSetAggregateException", typeof(PermissionSetAggregateException))]
    [JsonInheritanceAttribute("DuplicateRightException", typeof(DuplicateRightException))]
    [JsonInheritanceAttribute("PermissionSetInUseException", typeof(PermissionSetInUseException))]
    [JsonInheritanceAttribute("ContentPermissionException", typeof(ContentPermissionException))]
    [JsonInheritanceAttribute("ListItemPermissionException", typeof(ListItemPermissionException))]
    [JsonInheritanceAttribute("SchemaPermissionException", typeof(SchemaPermissionException))]
    [JsonInheritanceAttribute("PermissionSetInvalidRightCombinationException", typeof(PermissionSetInvalidRightCombinationException))]
    [JsonInheritanceAttribute("PermissionSetValidationException", typeof(PermissionSetValidationException))]
    [JsonInheritanceAttribute("AmbiguousUserRoleRightsException", typeof(AmbiguousUserRoleRightsException))]
    [JsonInheritanceAttribute("UnsupportedListItemChangeCommandException", typeof(UnsupportedListItemChangeCommandException))]
    [JsonInheritanceAttribute("ListItemLayerException", typeof(ListItemLayerException))]
    [JsonInheritanceAttribute("ListItemNotFoundException", typeof(ListItemNotFoundException))]
    [JsonInheritanceAttribute("ListItemCyclicDependencyException", typeof(ListItemCyclicDependencyException))]
    [JsonInheritanceAttribute("DeleteListItemsWithReferencesException", typeof(DeleteListItemsWithReferencesException))]
    [JsonInheritanceAttribute("ListItemUpdateManyException", typeof(ListItemUpdateManyException))]
    [JsonInheritanceAttribute("ListItemSchemaMismatchException", typeof(ListItemSchemaMismatchException))]
    [JsonInheritanceAttribute("ListItemResolveBehaviorNotSupportedException", typeof(ListItemResolveBehaviorNotSupportedException))]
    [JsonInheritanceAttribute("InvalidLogoFileExtensionException", typeof(InvalidLogoFileExtensionException))]
    [JsonInheritanceAttribute("TransferInfoNotFoundException", typeof(TransferInfoNotFoundException))]
    [JsonInheritanceAttribute("InvalidTransferTypeException", typeof(InvalidTransferTypeException))]
    [JsonInheritanceAttribute("TransferNotFoundException", typeof(TransferNotFoundException))]
    [JsonInheritanceAttribute("WrongChunkSizeException", typeof(WrongChunkSizeException))]
    [JsonInheritanceAttribute("ChunkSizeOutOfRangeException", typeof(ChunkSizeOutOfRangeException))]
    [JsonInheritanceAttribute("FileIdDuplicatedException", typeof(FileIdDuplicatedException))]
    [JsonInheritanceAttribute("UploadFailedException", typeof(UploadFailedException))]
    [JsonInheritanceAttribute("MaximumNumberOfChunksExceededException", typeof(MaximumNumberOfChunksExceededException))]
    [JsonInheritanceAttribute("MaximumFileSizeExceededException", typeof(MaximumFileSizeExceededException))]
    [JsonInheritanceAttribute("MissingDependenciesException", typeof(MissingDependenciesException))]
    [JsonInheritanceAttribute("RelationSelfReferencingException", typeof(RelationSelfReferencingException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldTypeInvalidException", typeof(InvalidChangeCommandFieldTypeInvalidException))]
    [JsonInheritanceAttribute("InvalidChangeCommandFieldNotFoundException", typeof(InvalidChangeCommandFieldNotFoundException))]
    [JsonInheritanceAttribute("InvalidChangeCommandSchemaChangeInvalidException", typeof(InvalidChangeCommandSchemaChangeInvalidException))]
    [JsonInheritanceAttribute("InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException", typeof(InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException))]
    [JsonInheritanceAttribute("InvalidMetadataException", typeof(InvalidMetadataException))]
    [JsonInheritanceAttribute("RelationNotFoundException", typeof(RelationNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeNotFoundException", typeof(RelationTypeNotFoundException))]
    [JsonInheritanceAttribute("RelationTypeTargetDocTypeMismatchException", typeof(RelationTypeTargetDocTypeMismatchException))]
    [JsonInheritanceAttribute("RelationTypeMissingException", typeof(RelationTypeMissingException))]
    [JsonInheritanceAttribute("DuplicatedItemAssignedException", typeof(DuplicatedItemAssignedException))]
    [JsonInheritanceAttribute("InvalidDataTypeException", typeof(InvalidDataTypeException))]
    [JsonInheritanceAttribute("LayerAssignmentInvalidException", typeof(LayerAssignmentInvalidException))]
    [JsonInheritanceAttribute("OutdatedMetadataUpdateInProgressException", typeof(OutdatedMetadataUpdateInProgressException))]
    [JsonInheritanceAttribute("SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException", typeof(SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException))]
    [JsonInheritanceAttribute("SchemasMetadataProtectionException", typeof(SchemasMetadataProtectionException))]
    [JsonInheritanceAttribute("FilterTemplateRenderingException", typeof(FilterTemplateRenderingException))]
    [JsonInheritanceAttribute("ResolvedLinkedItemsThresholdReachedException", typeof(ResolvedLinkedItemsThresholdReachedException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteTypeMismatchException", typeof(SchemaFieldOverwriteTypeMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldOverwriteIdException", typeof(SchemaFieldOverwriteIdException))]
    [JsonInheritanceAttribute("SchemaFieldIdDuplicatedException", typeof(SchemaFieldIdDuplicatedException))]
    [JsonInheritanceAttribute("SchemaFieldIdPreviouslyUsedException", typeof(SchemaFieldIdPreviouslyUsedException))]
    [JsonInheritanceAttribute("SchemaFieldIdAlreadyExistsInSchemaHierarchyException", typeof(SchemaFieldIdAlreadyExistsInSchemaHierarchyException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoSimpleSearchNestingException", typeof(SchemaFieldSchemaIndexInfoSimpleSearchNestingException))]
    [JsonInheritanceAttribute("SchemaFieldSchemaIndexInfoNestingException", typeof(SchemaFieldSchemaIndexInfoNestingException))]
    [JsonInheritanceAttribute("SchemaFieldIdUppercaseException", typeof(SchemaFieldIdUppercaseException))]
    [JsonInheritanceAttribute("SchemaIdLowercaseException", typeof(SchemaIdLowercaseException))]
    [JsonInheritanceAttribute("SchemaInfoNotFoundException", typeof(SchemaInfoNotFoundException))]
    [JsonInheritanceAttribute("IndexedFieldThresholdExceededException", typeof(IndexedFieldThresholdExceededException))]
    [JsonInheritanceAttribute("SortableFieldThresholdExceededException", typeof(SortableFieldThresholdExceededException))]
    [JsonInheritanceAttribute("DuplicateSchemaInfoException", typeof(DuplicateSchemaInfoException))]
    [JsonInheritanceAttribute("SchemaFieldNumberRangeException", typeof(SchemaFieldNumberRangeException))]
    [JsonInheritanceAttribute("SchemaInUseContentSchemaException", typeof(SchemaInUseContentSchemaException))]
    [JsonInheritanceAttribute("LayerAssignmentInUseWithContentsException", typeof(LayerAssignmentInUseWithContentsException))]
    [JsonInheritanceAttribute("SchemaInUseListItemException", typeof(SchemaInUseListItemException))]
    [JsonInheritanceAttribute("SchemaInUseContentException", typeof(SchemaInUseContentException))]
    [JsonInheritanceAttribute("SchemaInUseFieldException", typeof(SchemaInUseFieldException))]
    [JsonInheritanceAttribute("DuplicateMetadataDisplayPatternException", typeof(DuplicateMetadataDisplayPatternException))]
    [JsonInheritanceAttribute("SchemaImportEmptyException", typeof(SchemaImportEmptyException))]
    [JsonInheritanceAttribute("SchemaImportVersionMismatchException", typeof(SchemaImportVersionMismatchException))]
    [JsonInheritanceAttribute("SchemaInheritanceFieldIndexDeviationException", typeof(SchemaInheritanceFieldIndexDeviationException))]
    [JsonInheritanceAttribute("SchemaInheritanceTypeDeviationException", typeof(SchemaInheritanceTypeDeviationException))]
    [JsonInheritanceAttribute("SchemaSortFieldException", typeof(SchemaSortFieldException))]
    [JsonInheritanceAttribute("SchemaFieldIdException", typeof(SchemaFieldIdException))]
    [JsonInheritanceAttribute("SchemaFieldTypeChangeException", typeof(SchemaFieldTypeChangeException))]
    [JsonInheritanceAttribute("SchemaFieldNotFilterableException", typeof(SchemaFieldNotFilterableException))]
    [JsonInheritanceAttribute("SchemaFieldNotSortableException", typeof(SchemaFieldNotSortableException))]
    [JsonInheritanceAttribute("SchemaFieldNotSearchableException", typeof(SchemaFieldNotSearchableException))]
    [JsonInheritanceAttribute("SchemaFieldInvalidBoostException", typeof(SchemaFieldInvalidBoostException))]
    [JsonInheritanceAttribute("SchemaFieldSortableInUseException", typeof(SchemaFieldSortableInUseException))]
    [JsonInheritanceAttribute("SchemaNoContentException", typeof(SchemaNoContentException))]
    [JsonInheritanceAttribute("SchemaParentChangeException", typeof(SchemaParentChangeException))]
    [JsonInheritanceAttribute("SchemaMissingTypeException", typeof(SchemaMissingTypeException))]
    [JsonInheritanceAttribute("SchemaPermissionConfigurationException", typeof(SchemaPermissionConfigurationException))]
    [JsonInheritanceAttribute("SchemaMetadataProtectionSettingsNotSupportedForStructsException", typeof(SchemaMetadataProtectionSettingsNotSupportedForStructsException))]
    [JsonInheritanceAttribute("SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException", typeof(SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException))]
    [JsonInheritanceAttribute("SchemaNoLayerException", typeof(SchemaNoLayerException))]
    [JsonInheritanceAttribute("SchemaIdException", typeof(SchemaIdException))]
    [JsonInheritanceAttribute("SchemaCountLimitReachedException", typeof(SchemaCountLimitReachedException))]
    [JsonInheritanceAttribute("SystemSchemaInvalidModificationException", typeof(SystemSchemaInvalidModificationException))]
    [JsonInheritanceAttribute("SchemaFieldRelationSchemaSystemSchemaException", typeof(SchemaFieldRelationSchemaSystemSchemaException))]
    [JsonInheritanceAttribute("SchemaFieldRelationSchemaTypeUnsupportedException", typeof(SchemaFieldRelationSchemaTypeUnsupportedException))]
    [JsonInheritanceAttribute("SchemaMultipleTypesException", typeof(SchemaMultipleTypesException))]
    [JsonInheritanceAttribute("MissingDisplayPatternForCustomerDefaultLanguageException", typeof(MissingDisplayPatternForCustomerDefaultLanguageException))]
    [JsonInheritanceAttribute("SchemaViewForAllException", typeof(SchemaViewForAllException))]
    [JsonInheritanceAttribute("SystemLayerReferenceInvalidModificationException", typeof(SystemLayerReferenceInvalidModificationException))]
    [JsonInheritanceAttribute("SchemaFieldAnalyzerInvalidException", typeof(SchemaFieldAnalyzerInvalidException))]
    [JsonInheritanceAttribute("SchemaFieldRelationMultipleTypesException", typeof(SchemaFieldRelationMultipleTypesException))]
    [JsonInheritanceAttribute("SchemaFieldNotRequirableException", typeof(SchemaFieldNotRequirableException))]
    [JsonInheritanceAttribute("DisplayPatternTypeNotSupportedException", typeof(DisplayPatternTypeNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldActivityInUseException", typeof(SchemaFieldActivityInUseException))]
    [JsonInheritanceAttribute("SchemaFieldReferencedSchemaChangeNotAllowedException", typeof(SchemaFieldReferencedSchemaChangeNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldReferencedSchemaSystemSchemaException", typeof(SchemaFieldReferencedSchemaSystemSchemaException))]
    [JsonInheritanceAttribute("SchemaFieldRelationRelationTypeIdModificationNotAllowedException", typeof(SchemaFieldRelationRelationTypeIdModificationNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldRelationTargetDocTypeModificationNotAllowedException", typeof(SchemaFieldRelationTargetDocTypeModificationNotAllowedException))]
    [JsonInheritanceAttribute("SchemaFieldImportMismatchException", typeof(SchemaFieldImportMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportRelatedSchemaMismatchException", typeof(SchemaFieldImportRelatedSchemaMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldImportTypeMismatchException", typeof(SchemaFieldImportTypeMismatchException))]
    [JsonInheritanceAttribute("SchemaFieldNotSupportedException", typeof(SchemaFieldNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldDisplayPatternTypeNotSupportedException", typeof(SchemaFieldDisplayPatternTypeNotSupportedException))]
    [JsonInheritanceAttribute("SchemaFieldMarkdownNotMultilineException", typeof(SchemaFieldMarkdownNotMultilineException))]
    [JsonInheritanceAttribute("IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException", typeof(IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException))]
    [JsonInheritanceAttribute("SchemaFieldDynamicViewFieldInvalidFilterTemplateException", typeof(SchemaFieldDynamicViewFieldInvalidFilterTemplateException))]
    [JsonInheritanceAttribute("DeleteContentsWithReferencesException", typeof(DeleteContentsWithReferencesException))]
    [JsonInheritanceAttribute("ContentMetadataUpdateManyException", typeof(ContentMetadataUpdateManyException))]
    [JsonInheritanceAttribute("ContentLayerInvalidException", typeof(ContentLayerInvalidException))]
    [JsonInheritanceAttribute("ContentFileReplaceTypeMismatchException", typeof(ContentFileReplaceTypeMismatchException))]
    [JsonInheritanceAttribute("ContentLayerSameRootException", typeof(ContentLayerSameRootException))]
    [JsonInheritanceAttribute("ContentHistoricVersionNotFoundException", typeof(ContentHistoricVersionNotFoundException))]
    [JsonInheritanceAttribute("ConcurrentFileReplacementDuringRepairException", typeof(ConcurrentFileReplacementDuringRepairException))]
    [JsonInheritanceAttribute("ContentResolveBehaviorNotSupportedException", typeof(ContentResolveBehaviorNotSupportedException))]
    [JsonInheritanceAttribute("BusinessProcessEngineRequestException", typeof(BusinessProcessEngineRequestException))]
    [JsonInheritanceAttribute("BusinessProcessNotFoundException", typeof(BusinessProcessNotFoundException))]
    [JsonInheritanceAttribute("TooManyBusinessProcessesException", typeof(TooManyBusinessProcessesException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionNotFoundException", typeof(BusinessProcessDefinitionNotFoundException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionCreateException", typeof(BusinessProcessDefinitionCreateException))]
    [JsonInheritanceAttribute("BusinessProcessNotExternalException", typeof(BusinessProcessNotExternalException))]
    [JsonInheritanceAttribute("BusinessProcessCancellationNotSupportedException", typeof(BusinessProcessCancellationNotSupportedException))]
    [JsonInheritanceAttribute("BusinessProcessContinuationException", typeof(BusinessProcessContinuationException))]
    [JsonInheritanceAttribute("BusinessProcessSummaryNotBatchBasedException", typeof(BusinessProcessSummaryNotBatchBasedException))]
    [JsonInheritanceAttribute("BusinessProcessSummaryNotFoundException", typeof(BusinessProcessSummaryNotFoundException))]
    [JsonInheritanceAttribute("SnapshotTimeoutException", typeof(SnapshotTimeoutException))]
    [JsonInheritanceAttribute("SnapshotFailedException", typeof(SnapshotFailedException))]
    [JsonInheritanceAttribute("CoreClusterNotProvidedException", typeof(CoreClusterNotProvidedException))]
    [JsonInheritanceAttribute("CrossClusterRestoreException", typeof(CrossClusterRestoreException))]
    [JsonInheritanceAttribute("SnapshotNotFoundException", typeof(SnapshotNotFoundException))]
    [JsonInheritanceAttribute("SnapshotExistingIndicesNotClosedException", typeof(SnapshotExistingIndicesNotClosedException))]
    [JsonInheritanceAttribute("AddMetadataLanguageTimeoutException", typeof(AddMetadataLanguageTimeoutException))]
    [JsonInheritanceAttribute("EnvironmentProcessAlreadyRunningException", typeof(EnvironmentProcessAlreadyRunningException))]
    [JsonInheritanceAttribute("EnvironmentProcessNotFoundException", typeof(EnvironmentProcessNotFoundException))]
    [JsonInheritanceAttribute("EnvironmentProcessWaitTimeoutException", typeof(EnvironmentProcessWaitTimeoutException))]
    [JsonInheritanceAttribute("CustomerBoostValuesUpdateTimeoutException", typeof(CustomerBoostValuesUpdateTimeoutException))]
    [JsonInheritanceAttribute("NoTermsOfServiceDefinedException", typeof(NoTermsOfServiceDefinedException))]
    [JsonInheritanceAttribute("AtLeastOneActiveTermsOfServiceMustExistException", typeof(AtLeastOneActiveTermsOfServiceMustExistException))]
    [JsonInheritanceAttribute("ForbiddenHtmlElementsUsedException", typeof(ForbiddenHtmlElementsUsedException))]
    [JsonInheritanceAttribute("BusinessProcessStateNotHitException", typeof(BusinessProcessStateNotHitException))]
    [JsonInheritanceAttribute("OnlyAccessibleToRecipientException", typeof(OnlyAccessibleToRecipientException))]
    [JsonInheritanceAttribute("NotificationNotFoundException", typeof(NotificationNotFoundException))]
    [JsonInheritanceAttribute("CustomerAliasHeaderMissingException", typeof(CustomerAliasHeaderMissingException))]
    [JsonInheritanceAttribute("BusinessRuleActionInvalidDocumentTypeException", typeof(BusinessRuleActionInvalidDocumentTypeException))]
    [JsonInheritanceAttribute("BusinessRuleActionsMissingException", typeof(BusinessRuleActionsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConditionMissingException", typeof(BusinessRuleConditionMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConditionsMissingException", typeof(BusinessRuleConditionsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleConfigurationValidationException", typeof(BusinessRuleConfigurationValidationException))]
    [JsonInheritanceAttribute("BusinessRuleSchemaIdInvalidException", typeof(BusinessRuleSchemaIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRulePermissionSetIdInvalidException", typeof(BusinessRulePermissionSetIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleRuleIdDuplicationException", typeof(BusinessRuleRuleIdDuplicationException))]
    [JsonInheritanceAttribute("BusinessRuleRuleIdMissingException", typeof(BusinessRuleRuleIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleTriggerPointMissingException", typeof(BusinessRuleTriggerPointMissingException))]
    [JsonInheritanceAttribute("BusinessRuleValidationException", typeof(BusinessRuleValidationException))]
    [JsonInheritanceAttribute("BusinessRuleRegularExpressionInvalidException", typeof(BusinessRuleRegularExpressionInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleConditionInvalidTriggerPointException", typeof(BusinessRuleConditionInvalidTriggerPointException))]
    [JsonInheritanceAttribute("BusinessRuleRefIdsMissingException", typeof(BusinessRuleRefIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRulePathInvalidException", typeof(BusinessRulePathInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleFieldIdInvalidException", typeof(BusinessRuleFieldIdInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleContentPermissionSetIdsMissingException", typeof(BusinessRuleContentPermissionSetIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleFieldPathInvalidException", typeof(BusinessRuleFieldPathInvalidException))]
    [JsonInheritanceAttribute("BusinessRulePolygonInvalidException", typeof(BusinessRulePolygonInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleArrayIndexInvalidException", typeof(BusinessRuleArrayIndexInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleDictionaryKeyInvalidException", typeof(BusinessRuleDictionaryKeyInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleProjectionTransformationsMissingException", typeof(BusinessRuleProjectionTransformationsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleInvalidVariableNameException", typeof(BusinessRuleInvalidVariableNameException))]
    [JsonInheritanceAttribute("BusinessRuleTransformationGroupTransformationsMissingException", typeof(BusinessRuleTransformationGroupTransformationsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleTransformationGroupInputsMissingException", typeof(BusinessRuleTransformationGroupInputsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNamedCacheNameInvalidException", typeof(BusinessRuleNamedCacheNameInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationSizeInvalidException", typeof(BusinessRuleNGramTransformationSizeInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationMinWordLengthInvalidException", typeof(BusinessRuleNGramTransformationMinWordLengthInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNGramTransformationMaxWordLengthInvalidException", typeof(BusinessRuleNGramTransformationMaxWordLengthInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationInvalidIdException", typeof(BusinessRuleNotificationInvalidIdException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationNoRecipientsException", typeof(BusinessRuleNotificationNoRecipientsException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationRecipientUserIdMissingException", typeof(BusinessRuleNotificationRecipientUserIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNotificationRecipientUserRoleIdMissingException", typeof(BusinessRuleNotificationRecipientUserRoleIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleNumberSequenceInvalidIdException", typeof(BusinessRuleNumberSequenceInvalidIdException))]
    [JsonInheritanceAttribute("BusinessRuleNumberSequenceIdDuplicationException", typeof(BusinessRuleNumberSequenceIdDuplicationException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleInvalidCronExpressionException", typeof(BusinessRuleScheduleInvalidCronExpressionException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleFilterMissingException", typeof(BusinessRuleScheduleFilterMissingException))]
    [JsonInheritanceAttribute("BusinessRuleScheduleRulesMissingException", typeof(BusinessRuleScheduleRulesMissingException))]
    [JsonInheritanceAttribute("BusinessRuleStringContainsConditionValuesToMatchMissingException", typeof(BusinessRuleStringContainsConditionValuesToMatchMissingException))]
    [JsonInheritanceAttribute("BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException", typeof(BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException))]
    [JsonInheritanceAttribute("BusinessRuleDateMathTransformationTimeSpanInvalidException", typeof(BusinessRuleDateMathTransformationTimeSpanInvalidException))]
    [JsonInheritanceAttribute("BusinessRuleTransferOwnershipTransferUserIdMissingException", typeof(BusinessRuleTransferOwnershipTransferUserIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleOutputFormatIdMissingException", typeof(BusinessRuleOutputFormatIdMissingException))]
    [JsonInheritanceAttribute("BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException", typeof(BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException))]
    [JsonInheritanceAttribute("NamedCacheConfigurationException", typeof(NamedCacheConfigurationException))]
    [JsonInheritanceAttribute("NamedCacheNameMissingException", typeof(NamedCacheNameMissingException))]
    [JsonInheritanceAttribute("NamedCacheNameDuplicationException", typeof(NamedCacheNameDuplicationException))]
    [JsonInheritanceAttribute("ListItemNamedCacheSchemaIdInvalidException", typeof(ListItemNamedCacheSchemaIdInvalidException))]
    [JsonInheritanceAttribute("ListItemNamedCacheKeyFieldsInvalidException", typeof(ListItemNamedCacheKeyFieldsInvalidException))]
    [JsonInheritanceAttribute("SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException", typeof(SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException))]
    [JsonInheritanceAttribute("NoTagsFoundException", typeof(NoTagsFoundException))]
    [JsonInheritanceAttribute("OutputNotAvailableException", typeof(OutputNotAvailableException))]
    [JsonInheritanceAttribute("ModelNotFoundException", typeof(ModelNotFoundException))]
    [JsonInheritanceAttribute("DisplayValueRerenderingInProgressException", typeof(DisplayValueRerenderingInProgressException))]
    [JsonInheritanceAttribute("OutputFormatNotFoundException", typeof(OutputFormatNotFoundException))]
    [JsonInheritanceAttribute("OutputFormatSourceNotDefinedException", typeof(OutputFormatSourceNotDefinedException))]
    [JsonInheritanceAttribute("OutputFormatRetentionTimeOutOfRangeException", typeof(OutputFormatRetentionTimeOutOfRangeException))]
    [JsonInheritanceAttribute("NotSupportedFileExtensionForFormatException", typeof(NotSupportedFileExtensionForFormatException))]
    [JsonInheritanceAttribute("OutputFormatXmpWritebackNotSupportedException", typeof(OutputFormatXmpWritebackNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException", typeof(OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatsInUseException", typeof(OutputFormatsInUseException))]
    [JsonInheritanceAttribute("OutputFormatOperationInProgressException", typeof(OutputFormatOperationInProgressException))]
    [JsonInheritanceAttribute("StaticOutputFormatModificationNotSupportedException", typeof(StaticOutputFormatModificationNotSupportedException))]
    [JsonInheritanceAttribute("OriginalOutputFormatModificationNotSupportedException", typeof(OriginalOutputFormatModificationNotSupportedException))]
    [JsonInheritanceAttribute("OutputFormatSourceNotValidForRenderingCategoryException", typeof(OutputFormatSourceNotValidForRenderingCategoryException))]
    [JsonInheritanceAttribute("CollectionSizeLimitExceededException", typeof(CollectionSizeLimitExceededException))]
    [JsonInheritanceAttribute("CollectionModificationNotAllowedException", typeof(CollectionModificationNotAllowedException))]
    [JsonInheritanceAttribute("CollectionNotFoundException", typeof(CollectionNotFoundException))]
    [JsonInheritanceAttribute("NonDefaultTemplateNameNotAllowedException", typeof(NonDefaultTemplateNameNotAllowedException))]
    [JsonInheritanceAttribute("SystemTemplateModificationNotAllowedException", typeof(SystemTemplateModificationNotAllowedException))]
    [JsonInheritanceAttribute("TemplateDuplicationException", typeof(TemplateDuplicationException))]
    [JsonInheritanceAttribute("TemplateLanguageCodeNotSupportedException", typeof(TemplateLanguageCodeNotSupportedException))]
    [JsonInheritanceAttribute("TemplateMediaTypesMissingException", typeof(TemplateMediaTypesMissingException))]
    [JsonInheritanceAttribute("TemplateMediaTypesNotSupportedException", typeof(TemplateMediaTypesNotSupportedException))]
    [JsonInheritanceAttribute("TemplateNotFoundException", typeof(TemplateNotFoundException))]
    [JsonInheritanceAttribute("XmpMappingFieldNotSupported", typeof(XmpMappingFieldNotSupported))]
    [JsonInheritanceAttribute("XmpMappingFieldNotFoundException", typeof(XmpMappingFieldNotFoundException))]
    [JsonInheritanceAttribute("XmpMappingSchemaNotAvailableForFileContentSchemaException", typeof(XmpMappingSchemaNotAvailableForFileContentSchemaException))]
    [JsonInheritanceAttribute("XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException", typeof(XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException))]
    [JsonInheritanceAttribute("XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException", typeof(XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException))]
    [JsonInheritanceAttribute("XmpMappingFieldInUseException", typeof(XmpMappingFieldInUseException))]
    [JsonInheritanceAttribute("XmpMappingConfigurationInvalidException", typeof(XmpMappingConfigurationInvalidException))]
    [JsonInheritanceAttribute("ActivityMappingInvalidException", typeof(ActivityMappingInvalidException))]
    [JsonInheritanceAttribute("StatisticsExportNotEnabledException", typeof(StatisticsExportNotEnabledException))]
    [JsonInheritanceAttribute("StatisticsReadNotEnabledException", typeof(StatisticsReadNotEnabledException))]
    [JsonInheritanceAttribute("StatisticsWriteNotEnabledException", typeof(StatisticsWriteNotEnabledException))]
    [JsonInheritanceAttribute("ConversionPresetTemplateNotFoundException", typeof(ConversionPresetTemplateNotFoundException))]
    [JsonInheritanceAttribute("CommentOwnershipFailureException", typeof(CommentOwnershipFailureException))]
    [JsonInheritanceAttribute("CommentReplyDeletionException", typeof(CommentReplyDeletionException))]
    [JsonInheritanceAttribute("CommentReplyParentException", typeof(CommentReplyParentException))]
    [JsonInheritanceAttribute("CommentReplyContentMismatchException", typeof(CommentReplyContentMismatchException))]
    [JsonInheritanceAttribute("VirtualDisplayContentNotSupportedException", typeof(VirtualDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("NestedDisplayContentNotSupportedException", typeof(NestedDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("SelfReferencingDisplayContentNotSupportedException", typeof(SelfReferencingDisplayContentNotSupportedException))]
    [JsonInheritanceAttribute("ConcurrentFileReplacementException", typeof(ConcurrentFileReplacementException))]
    [JsonInheritanceAttribute("ContentSearchQueryInvalidException", typeof(ContentSearchQueryInvalidException))]
    [JsonInheritanceAttribute("IngestContainerCreationFailedException", typeof(IngestContainerCreationFailedException))]
    [JsonInheritanceAttribute("IngestContainerNotFoundException", typeof(IngestContainerNotFoundException))]
    [JsonInheritanceAttribute("IngestContainerEmptyException", typeof(IngestContainerEmptyException))]
    [JsonInheritanceAttribute("IngestFileNotFoundException", typeof(IngestFileNotFoundException))]
    [JsonInheritanceAttribute("IngestContainerImportAlreadyInProgressException", typeof(IngestContainerImportAlreadyInProgressException))]
    [JsonInheritanceAttribute("IngestContainerImportRequestValidationFailedException", typeof(IngestContainerImportRequestValidationFailedException))]
    [JsonInheritanceAttribute("IngestFileInvalidFileNameOverrideExtensionException", typeof(IngestFileInvalidFileNameOverrideExtensionException))]
    [JsonInheritanceAttribute("IngestFileAlreadyImportedException", typeof(IngestFileAlreadyImportedException))]
    [JsonInheritanceAttribute("IngestUrlInvalidException", typeof(IngestUrlInvalidException))]
    [JsonInheritanceAttribute("IngestDownloadFailedException", typeof(IngestDownloadFailedException))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkException : System.Exception
    {
        [Newtonsoft.Json.JsonProperty("traceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLevel TraceLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }

        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HttpStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum TraceLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Verbose")]
        Verbose = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkConflictException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkConflictException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkConflictException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkTimeoutException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkForbiddenException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkForbiddenException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkForbiddenException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkContradictoryArgumentsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ArgumentNames { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkContradictoryArgumentsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkContradictoryArgumentsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserEmailAlreadyExistsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserEmailAlreadyExistsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmailAlreadyExistsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserRoleAssignedException : UnableToDeleteUserRoleException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleAssignedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteUserRoleException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("missingUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotDeactivatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("notDeactivatedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotDeactivatedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserWithOwnerTokensArchiveException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("notArchivedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotArchivedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserWithOwnerTokensArchiveException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserWithOwnerTokensArchiveException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserInactiveOrDeletedException : PictureparkValidationException
    {
        /// <summary>
        /// The ID of the inactive or deleted user in question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserInactiveOrDeletedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInactiveOrDeletedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InactiveOrDeletedUserRefusedAccessException : PictureparkForbiddenException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InactiveOrDeletedUserRefusedAccessException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InactiveOrDeletedUserRefusedAccessException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TermsOfServiceNotNewestException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsOfServiceNotNewestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsOfServiceNotNewestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IllegalAuthorizationStateTransitionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IllegalAuthorizationStateTransitionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IllegalAuthorizationStateTransitionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User authorization state
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reviewed")]
        Reviewed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ToBeReviewed")]
        ToBeReviewed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Invited")]
        Invited = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivation")]
        UserTriggeredDeactivation = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TermsOfServiceConsentRequiredException : PictureparkForbiddenException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsOfServiceConsentRequiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsOfServiceConsentRequiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserRolesNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRolesNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRolesNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnauthorizedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnauthorizedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnauthorizedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserUnlockDisallowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserUnlockDisallowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUnlockDisallowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserAlreadyInRequestedLockStateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("userIsLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UserIsLocked { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAlreadyInRequestedLockStateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAlreadyInRequestedLockStateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LoginUsingIncorrectIdentityProviderException : PictureparkForbiddenException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoginUsingIncorrectIdentityProviderException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginUsingIncorrectIdentityProviderException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IdentityProviderNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("missingIdentityProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingIdentityProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("external", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool External { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentityProviderNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityProviderNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserDoesNotSupportLocalLoginException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDoesNotSupportLocalLoginException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDoesNotSupportLocalLoginException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserAttributeNotSynchronizableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("attributePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributePath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAttributeNotSynchronizableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAttributeNotSynchronizableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToMapMultipleClaimTypesIntoSameAttributeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("attributePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributePath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToMapMultipleClaimTypesIntoSameAttributeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToMapMultipleClaimTypesIntoSameAttributeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToChangeMappedUserRolesForFederatedUserException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToChangeMappedUserRolesForFederatedUserException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToChangeMappedUserRolesForFederatedUserException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteDefaultUserRoleException : UnableToDeleteUserRoleException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteDefaultUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteDefaultUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException : UnableToDeleteUserRoleException
    {
        [Newtonsoft.Json.JsonProperty("identityProviderIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IdentityProviderIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserPropertyChangeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("propertyPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyPath { get; set; }

        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserPropertyChangeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPropertyChangeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserNotLinkedWithIdsException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotLinkedWithIdsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotLinkedWithIdsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LanguageCodeNotExistingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("existingLanguageCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExistingLanguageCodes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageCodeNotExistingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageCodeNotExistingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UserByOwnerTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("ownerToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserByOwnerTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserByOwnerTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidOperationWithAnonymousUserException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidOperationWithAnonymousUserException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidOperationWithAnonymousUserException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidOperationWithAnonymousUserRoleException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("affectedUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedUserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidOperationWithAnonymousUserRoleException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidOperationWithAnonymousUserRoleException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RenderingException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FormatNotApplicableForRenderingException : RenderingException
    {
        [Newtonsoft.Json.JsonProperty("contentRenderingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RenderingCategory ContentRenderingType { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatNotApplicableForRenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatNotApplicableForRenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RenderingCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Document")]
        Document = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Video")]
        Video = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Audio")]
        Audio = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Vector")]
        Vector = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FocalPointCropSizeMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("focalPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPointId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FocalPointCropSizeMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FocalPointCropSizeMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderDeleteException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("detailedErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderCreateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("detailErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderCreateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderCreateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ServiceProviderNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("missingServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingServiceProviderId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceProviderNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentVersionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultChannelDeleteException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultChannelDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultChannelDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ChannelsNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChannelsNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelsNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SuperAdminRolesNotAssignableToChannelException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SuperAdminRolesNotAssignableToChannelException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SuperAdminRolesNotAssignableToChannelException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ElasticVersionUpdateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ElasticVersionUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElasticVersionUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidVersionException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidVersionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidVersionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotDeactivatedException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotFoundException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentDeactivationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentDeactivationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerClonesNotAcceptedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerClonesNotAcceptedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerClonesNotAcceptedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareOutputNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareByTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareByTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareByTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TokenGenerationException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Retries { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TokenGenerationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenGenerationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareExpiredException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareExpiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareExpiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ShareSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSharedOutputException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSharedOutputException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSharedOutputException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateEmbedConversionPresetException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateEmbedConversionPresetException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateEmbedConversionPresetException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputIdNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("outputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputIdNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputIdNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnableToCreateOrModifyStaticOutputFormatException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnableToCreateOrModifyStaticOutputFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnableToCreateOrModifyStaticOutputFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileMappingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("inputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("targetFormatKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetFormatKind { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileMappingForDynamicFormatException : NotSupportedFileMappingException
    {
        [Newtonsoft.Json.JsonProperty("formatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileMappingForDynamicFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileMappingForDynamicFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateOutputFormatIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateOutputFormatIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateOutputFormatIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputEditingNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputEditingNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputEditingNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputBackupNotRequestedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputBackupNotRequestedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputBackupNotRequestedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputBackupHashMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requestedHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedHash { get; set; }

        [Newtonsoft.Json.JsonProperty("documentHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHash { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputBackupHashMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputBackupHashMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputOperationInProgressException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputOperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputOperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DownloadLinkExpiredException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadLinkExpiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadLinkExpiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RenderingNotAwaitedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RenderingNotAwaitedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingNotAwaitedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateContentDownloadRequestException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateContentDownloadRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateContentDownloadRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidContentDownloadRequestException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidContentDownloadRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidContentDownloadRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DownloadNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EmbedMultiDownloadException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EmbedMultiDownloadException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedMultiDownloadException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ImageOptimizationLicensingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageOptimizationLicensingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageOptimizationLicensingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LeaseNotAcquiredException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeaseNotAcquiredException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeaseNotAcquiredException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OperationInProgressException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("leaseResourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LeaseResourceType LeaseResourceType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeaseResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaEditing")]
        SchemaEditing = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OwnerTokenUserIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerTokenNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidStateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkArgumentNullException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkArgumentNullException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkArgumentNullException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidStateTransitionException : InvalidStateException
    {
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidStateTransitionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateTransitionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FailedToLockException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FailedToLockException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedToLockException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkOperationCanceledException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkOperationCanceledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkOperationCanceledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkApplicationException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkApplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkApplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingCustomerDefaultLanguageException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("customerDefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerDefaultLanguage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingCustomerDefaultLanguageException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingCustomerDefaultLanguageException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PartialOperationNotSupportedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartialOperationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartialOperationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContractMismatchException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContractMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PictureparkTooManyRequestsException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PictureparkTooManyRequestsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkTooManyRequestsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidArgumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("argumentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidArgumentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidArgumentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public abstract partial class ArgumentRangeException : InvalidArgumentException
    {
        [Newtonsoft.Json.JsonProperty("minAcceptableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinAcceptableValue { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAcceptableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxAcceptableValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArgumentRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArgumentRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnknownException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnknownException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnknownException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OwnerTokenInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("ownerTokenUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerTokenInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerTokenInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidValueFormatException : InvalidArgumentException
    {
        [Newtonsoft.Json.JsonProperty("expectedFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidValueFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidValueFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ItemIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RequestSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RequestedAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RequestSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CronExpressionInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("cronExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CronExpression { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CronExpressionInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CronExpressionInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerViolationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("expectedCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedCustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("currentCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentCustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerViolationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerViolationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("existingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingCustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotDeactivatedException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotDeactivatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotDeactivatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerDeactivationException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("deactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerDeactivationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDeactivationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerHostNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerHostNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotActiveException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotActiveException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotActiveException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerBoostValuesInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValuesInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValuesInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotRetentionTimeTooShortException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("snapshotRetentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan SnapshotRetentionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumRetentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan MinimumRetentionTime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotRetentionTimeTooShortException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRetentionTimeTooShortException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardIndexNotAllowedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardIndexNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardIndexNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfShardsInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfShardsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfShardsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfRoutingShardsInvalidException : ReshardNumberOfShardsInvalidException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfRoutingShardsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfRoutingShardsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReshardNumberOfShardsInvalidForExistingRoutingShardsException : ReshardNumberOfShardsInvalidException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReshardNumberOfShardsInvalidForExistingRoutingShardsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReshardNumberOfShardsInvalidForExistingRoutingShardsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConfigurationIndexNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("configurationIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfigurationIndexNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationIndexNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSearchIndexDocException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSearchIndexDocException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSearchIndexDocException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexDocNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexDocId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexDocId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexDocNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexDocNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexDocumentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexDocumentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexDocumentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAliasException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("indexAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexAlias { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateAliasException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAliasException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DefaultSearchIndexDeleteException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultSearchIndexDeleteException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultSearchIndexDeleteException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchIndexInUseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("searchIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchIndexInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }

        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexMappingException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }

        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexMappingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexMappingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicatedSearchBehaviorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("duplicatedSearchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DuplicatedSearchBehaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicatedSearchBehaviorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicatedSearchBehaviorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchStringLeadingWildcardException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchStringLeadingWildcardException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchStringLeadingWildcardException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidDateTimeFormatException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string ExpectedFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidDateTimeFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidDateTimeFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSortFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSortFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidUiBehaviorInNonRootAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidUiBehaviorInNonRootAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUiBehaviorInNonRootAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidUiBehaviorConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidUiBehaviorConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUiBehaviorConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidSearchFieldInAggregatorException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSearchFieldInAggregatorException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSearchFieldInAggregatorException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SearchStringTooLongException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchStringTooLongException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchStringTooLongException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationNameInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        [Newtonsoft.Json.JsonProperty("aggregationPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationPrefix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationNameInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationNameInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationNameMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationNameMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationNameMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Size of the aggregation is invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationSizeInvalidException : PictureparkValidationException
    {
        /// <summary>
        /// The name identifying the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        /// <summary>
        /// The invalid size of the aggregation: size must be equal or greater than 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AggregationSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationSizeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationSizeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationFilterNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        [Newtonsoft.Json.JsonProperty("notSupportedFilterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotSupportedFilterType { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedFilterTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedFilterTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFilterNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilterNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationFieldMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFieldMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFieldMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AggregationPathMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationPathMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationPathMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DocumentVersionConflictException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DocumentVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentVersionConflictException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionConflictException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RedisDatabaseExceededException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerCount { get; set; }

        [Newtonsoft.Json.JsonProperty("maxCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxCount { get; set; }

        [Newtonsoft.Json.JsonProperty("startIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("redisDatabaseCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RedisDatabaseCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RedisDatabaseExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RedisDatabaseExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateDocumentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateDocumentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateDocumentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreResponseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectStoreResponseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreResponseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ObjectStoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectStoreException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class QueryException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueryException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionOwnershipTransferException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("missingUserRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserRight MissingUserRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionOwnershipTransferException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionOwnershipTransferException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ManageContent")]
        ManageContent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSharings")]
        ManageSharings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTransfer")]
        ManageTransfer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageChannels")]
        ManageChannels = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSchemas")]
        ManageSchemas = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageUsers")]
        ManageUsers = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageUserRoles")]
        ManageUserRoles = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagePermissions")]
        ManagePermissions = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSearchIndexes")]
        ManageSearchIndexes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageListItems")]
        ManageListItems = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageServiceProviders")]
        ManageServiceProviders = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageEmbeds")]
        ManageEmbeds = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTemplates")]
        ManageTemplates = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageTermsOfService")]
        ManageTermsOfService = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageLiveStream")]
        ManageLiveStream = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageDocumentHistory")]
        ManageDocumentHistory = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageAllShares")]
        ManageAllShares = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageOutputFormats")]
        ManageOutputFormats = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageBusinessProcesses")]
        ManageBusinessProcesses = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageIdentityProviders")]
        ManageIdentityProviders = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageXmpMappings")]
        ManageXmpMappings = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatistics")]
        ReadStatistics = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"WriteStatistics")]
        WriteStatistics = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ExportStatistics")]
        ExportStatistics = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"EditImages")]
        EditImages = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageConversionPresetTemplates")]
        ManageConversionPresetTemplates = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageComments")]
        ManageComments = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageAllComments")]
        ManageAllComments = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ListUsers")]
        ListUsers = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageIngest")]
        ManageIngest = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetAggregateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetAggregateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetAggregateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateRightException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateRightException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateRightException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ReferenceCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> ContentRights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content rights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccessOriginal")]
        AccessOriginal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EditMetadata")]
        EditMetadata = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EditContent")]
        EditContent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagePermissions")]
        ManagePermissions = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageHistoricVersions")]
        ManageHistoricVersions = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadataRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataRight MetadataRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata rights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetadataRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageItems")]
        ManageItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ManageSchema")]
        ManageSchema = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaPermissionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadataRight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataRight MetadataRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetInvalidRightCombinationException : PermissionSetValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetInvalidRightCombinationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetInvalidRightCombinationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This exception is an abstract base for permission set validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class PermissionSetValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AmbiguousUserRoleRightsException : PermissionSetValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AmbiguousUserRoleRightsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AmbiguousUserRoleRightsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UnsupportedListItemChangeCommandException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnsupportedListItemChangeCommandException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsupportedListItemChangeCommandException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemLayerException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemLayerException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemCyclicDependencyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemCyclicDependencyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCyclicDependencyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteListItemsWithReferencesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("numberOfReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfReferences { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeleteListItemsWithReferencesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteListItemsWithReferencesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedItemsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItemsCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemUpdateManyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateManyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemSchemaMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemSchemaMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSchemaMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemResolveBehaviorNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ListItemResolveBehavior> Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemResolveBehaviorNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemResolveBehaviorNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ListItemResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedListItems")]
        LinkedListItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueThumbnail")]
        InnerDisplayValueThumbnail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueList")]
        InnerDisplayValueList = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueDetail")]
        InnerDisplayValueDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueName")]
        InnerDisplayValueName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueThumbnail")]
        OuterDisplayValueThumbnail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueList")]
        OuterDisplayValueList = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueDetail")]
        OuterDisplayValueDetail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueName")]
        OuterDisplayValueName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFields")]
        DynamicViewFields = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFieldsWithHasItems")]
        DynamicViewFieldsWithHasItems = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidLogoFileExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedExtensions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidLogoFileExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidLogoFileExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferInfoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferInfoId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferInfoNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferInfoNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FileTransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidTransferTypeException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidTransferTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidTransferTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of the transfer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FileUpload")]
        FileUpload = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FileUploadAutoImport")]
        FileUploadAutoImport = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WebDownload")]
        WebDownload = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImport")]
        SchemaImport = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TransferNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class WrongChunkSizeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Actual { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Expected { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WrongChunkSizeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrongChunkSizeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ChunkSizeOutOfRangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Actual { get; set; }

        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Minimum { get; set; }

        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Maximum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChunkSizeOutOfRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChunkSizeOutOfRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumTransferSizeException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("transferSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransferSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumTransferSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumTransferSize { get; set; }

        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumTransferSizeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumTransferSizeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FileIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class UploadFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UploadFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumNumberOfChunksExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfChunks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfChunks { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumNumberOfChunks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumNumberOfChunks { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumNumberOfChunksExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumNumberOfChunksExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MaximumFileSizeExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DeclaredFileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MaximumFileSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MaximumFileSizeExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumFileSizeExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingDependenciesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingDependenciesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingDependenciesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationSelfReferencingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationSelfReferencingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationSelfReferencingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldTypeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldActualType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldActualType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldExpectedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldExpectedType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandFieldTypeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldTypeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandFieldNotFoundException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandFieldNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandFieldNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidChangeCommandSchemaChangeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commandTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidChangeCommandSchemaChangeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidChangeCommandSchemaChangeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidContentSchemaForMetadataValuesSchemaRemoveCommandException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidMetadataException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("metadataErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataError> MetadataErrors { get; set; }

        [Newtonsoft.Json.JsonProperty("validationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> ValidationErrors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidMetadataException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidMetadataException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataError
    {
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorType { get; set; }

        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Always)]
        public int LineNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("linePosition", Required = Newtonsoft.Json.Required.Always)]
        public int LinePosition { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeTargetDocTypeMismatchException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }

        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetDocType { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedTargetDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedTargetDocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeTargetDocTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeTargetDocTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class RelationTypeMissingException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationTypeMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationTypeMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReferencesUpdateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReferenceUpdateException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReferencesUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferencesUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ReferenceUpdateException : PictureparkBusinessException
    {
        /// <summary>
        /// This is the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceItemId { get; set; }

        /// <summary>
        /// This is the DocType of the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// These exceptions describe why the source metadata item could not be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReferenceUpdateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceUpdateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicatedItemAssignedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("itemPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicatedItemAssignedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicatedItemAssignedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class InvalidDataTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidDataTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidDataTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LayerAssignmentInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerAssignmentInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerAssignmentInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutdatedMetadataUpdateInProgressException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutdatedMetadataUpdateInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutdatedMetadataUpdateInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortingSupportedOnlyOnTermsAndTermsRelationAggregatorsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemasMetadataProtectionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemasMetadataProtectionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemasMetadataProtectionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class FilterTemplateRenderingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterTemplateRenderingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterTemplateRenderingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ResolvedLinkedItemsThresholdReachedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("metadataItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataItemId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResolvedLinkedItemsThresholdReachedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolvedLinkedItemsThresholdReachedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldOverwriteType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldOverwriteType { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldOverwriteTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldOverwriteIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldOverwriteIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldOverwriteIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdDuplicatedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdDuplicatedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdDuplicatedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdPreviouslyUsedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsedInSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdPreviouslyUsedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdPreviouslyUsedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdAlreadyExistsInSchemaHierarchyException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("existingInSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingInSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdAlreadyExistsInSchemaHierarchyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdAlreadyExistsInSchemaHierarchyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoSimpleSearchNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSchemaIndexInfoSimpleSearchNestingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoSimpleSearchNestingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSchemaIndexInfoNestingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedOuterFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedOuterFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSchemaIndexInfoNestingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSchemaIndexInfoNestingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdUppercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdUppercaseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdUppercaseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdLowercaseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaIdLowercaseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdLowercaseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInfoNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInfoNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInfoNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexedFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double IndexedFieldCount { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedFieldThreshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IndexedFieldThreshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexedFieldThresholdExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexedFieldThresholdExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SortableFieldThresholdExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SortableFieldCount { get; set; }

        [Newtonsoft.Json.JsonProperty("sortableFieldThreshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SortableFieldThreshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortableFieldThresholdExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortableFieldThresholdExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaInfoException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSchemaInfoException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaInfoException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNumberRangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MinValue { get; set; }

        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MaxValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNumberRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNumberRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseContentSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class LayerAssignmentInUseWithContentsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("usedAssignmentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UsedAssignmentSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerAssignmentInUseWithContentsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerAssignmentInUseWithContentsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseListItemException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ListItemCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseListItemException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseListItemException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ContentCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseContentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseContentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldNamespaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldNamespaces { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateMetadataDisplayPatternException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayPatternId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateMetadataDisplayPatternException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateMetadataDisplayPatternException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DuplicateSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DuplicateSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportEmptyException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportEmptyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportEmptyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaImportVersionMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("providedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvidedVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportVersionMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportVersionMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceFieldIndexDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInheritanceFieldIndexDeviationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceFieldIndexDeviationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInheritanceTypeDeviationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInheritanceTypeDeviationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInheritanceTypeDeviationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaSortFieldException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaSortFieldException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSortFieldException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldTypeChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("newTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewTypeName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldTypeChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldTypeChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotFilterableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotFilterableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotFilterableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSortableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSortableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSortableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSearchableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSearchableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSearchableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldInvalidBoostException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedBoostValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> AllowedBoostValues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldInvalidBoostException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldInvalidBoostException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldSortableInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("channelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ChannelIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldSortableInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldSortableInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoContentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNoContentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoContentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaParentChangeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldSchemaParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("newSchemaParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewSchemaParentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaParentChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaParentChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMissingTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedSchemaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> ExpectedSchemaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMissingTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMissingTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of the schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SchemaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Layer")]
        Layer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Struct")]
        Struct = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaPermissionConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMetadataProtectionSettingsNotSupportedForStructsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMetadataProtectionSettingsNotSupportedForStructsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMetadataProtectionSettingsNotSupportedForStructsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMetadataProtectionSettingsChangeNotAllowedForXmpMappedLayersException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNoLayerException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNoLayerException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNoLayerException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkBusinessException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaCountLimitReachedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaCountLimitReachedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCountLimitReachedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemSchemaInvalidModificationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemSchemaInvalidModificationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemSchemaInvalidModificationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationSchemaSystemSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relationSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationSchemaSystemSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationSchemaSystemSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationSchemaTypeUnsupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relationSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationSchemaTypeUnsupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationSchemaTypeUnsupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaMultipleTypesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaMultipleTypesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaMultipleTypesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class MissingDisplayPatternForCustomerDefaultLanguageException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("missingTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DisplayPatternType> MissingTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MissingDisplayPatternForCustomerDefaultLanguageException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissingDisplayPatternForCustomerDefaultLanguageException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The display pattern type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisplayPatternType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Thumbnail")]
        Thumbnail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Detail")]
        Detail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DownloadFileName")]
        DownloadFileName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaViewForAllException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaViewForAllException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaViewForAllException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemLayerReferenceInvalidModificationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemLayerReferenceInvalidModificationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemLayerReferenceInvalidModificationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldAnalyzerInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Analyzer> Analyzers { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Analyzer> AllowedAnalyzers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldAnalyzerInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldAnalyzerInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Analyzer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Language")]
        Language = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PathHierarchy")]
        PathHierarchy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EdgeNGram")]
        EdgeNGram = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NGram")]
        NGram = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoDiacritics")]
        NoDiacritics = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"KeywordLowercase")]
        KeywordLowercase = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationMultipleTypesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationMultipleTypesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationMultipleTypesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotRequirableException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotRequirableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotRequirableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DisplayPatternTypeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayPatternId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayPatternTypeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPatternTypeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldActivityInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldActivityInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldActivityInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldReferencedSchemaChangeNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldReferencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldReferencedSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("newReferencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewReferencedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldReferencedSchemaChangeNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldReferencedSchemaChangeNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldReferencedSchemaSystemSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("referencedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferencedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldReferencedSchemaSystemSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldReferencedSchemaSystemSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationRelationTypeIdModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationRelationTypeIdModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationRelationTypeIdModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldRelationTargetDocTypeModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldRelationTargetDocTypeModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldRelationTargetDocTypeModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldIds { get; set; }

        [Newtonsoft.Json.JsonProperty("existingFieldIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportRelatedSchemaMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingRelatedSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("existingRelatedSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingRelatedSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportRelatedSchemaMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportRelatedSchemaMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldImportTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("importingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImportingFieldType { get; set; }

        [Newtonsoft.Json.JsonProperty("existingFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistingFieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldImportTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldImportTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldDisplayPatternTypeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayPatternType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedDisplayPatternTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DisplayPatternType> SupportedDisplayPatternTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldDisplayPatternTypeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldDisplayPatternTypeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldMarkdownNotMultilineException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldMarkdownNotMultilineException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldMarkdownNotMultilineException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexingDisplayValueInFilterOnlySupportedForIndexedTagboxFieldsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaFieldDynamicViewFieldInvalidFilterTemplateException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaFieldDynamicViewFieldInvalidFilterTemplateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaFieldDynamicViewFieldInvalidFilterTemplateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DeleteContentsWithReferencesException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("numberOfReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShares", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfShares { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeleteContentsWithReferencesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteContentsWithReferencesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentMetadataUpdateManyException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("failedItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedItemsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItemsCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataUpdateManyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateManyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentLayerInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentLayerInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentLayerInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentFileReplaceTypeMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("originalContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType OriginalContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("newContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType NewContentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFileReplaceTypeMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileReplaceTypeMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Bitmap")]
        Bitmap = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VectorGraphic")]
        VectorGraphic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RawImage")]
        RawImage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InterchangeDocument")]
        InterchangeDocument = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WordProcessingDocument")]
        WordProcessingDocument = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TextDocument")]
        TextDocument = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DesktopPublishingDocument")]
        DesktopPublishingDocument = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Presentation")]
        Presentation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Spreadsheet")]
        Spreadsheet = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Archive")]
        Archive = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Audio")]
        Audio = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Video")]
        Video = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Font")]
        Font = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Multimedia")]
        Multimedia = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceCode")]
        SourceCode = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Database")]
        Database = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Cad")]
        Cad = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Model3d")]
        Model3d = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Virtual")]
        Virtual = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentLayerSameRootException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerIdsByRootSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LayerIdsByRootSchema> LayerIdsByRootSchema { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentLayerSameRootException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentLayerSameRootException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerIdsByRootSchema
    {
        [Newtonsoft.Json.JsonProperty("rootSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootSchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerIdsByRootSchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerIdsByRootSchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentHistoricVersionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentHistoricVersionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentHistoricVersionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentSchemaChangeException : PictureparkValidationException
    {
        /// <summary>
        /// Content for which a change to RequestedContentSchemaId would cause data loss
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// ContentSchemaId to which the Content would have been changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedContentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedContentSchemaId { get; set; }

        /// <summary>
        /// Layers assigned to this Content which are not allowed for contents of type RequestedContentSchemaId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incompatibleLayerAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IncompatibleLayerAssignments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSchemaChangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSchemaChangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConcurrentFileReplacementDuringRepairException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedOriginalFileVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExpectedOriginalFileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualOriginalFileVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ActualOriginalFileVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConcurrentFileReplacementDuringRepairException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConcurrentFileReplacementDuringRepairException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentResolveBehaviorNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentResolveBehavior> Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentResolveBehaviorNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentResolveBehaviorNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedListItems")]
        LinkedListItems = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Metadata")]
        Metadata = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Outputs")]
        Outputs = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueThumbnail")]
        InnerDisplayValueThumbnail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueList")]
        InnerDisplayValueList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueDetail")]
        InnerDisplayValueDetail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"InnerDisplayValueName")]
        InnerDisplayValueName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Permissions")]
        Permissions = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueThumbnail")]
        OuterDisplayValueThumbnail = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueList")]
        OuterDisplayValueList = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueDetail")]
        OuterDisplayValueDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"OuterDisplayValueName")]
        OuterDisplayValueName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoricVersionCount")]
        HistoricVersionCount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFields")]
        DynamicViewFields = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DynamicViewFieldsWithHasItems")]
        DynamicViewFieldsWithHasItems = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DisplayContentOutputs")]
        DisplayContentOutputs = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessEngineRequestException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("engineError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineError { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessEngineRequestException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessEngineRequestException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TooManyBusinessProcessesException : PictureparkTooManyRequestsException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TooManyBusinessProcessesException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TooManyBusinessProcessesException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDefinitionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessDefinitionCreateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProcessDefinitionIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDefinitionCreateException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionCreateException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessNotExternalException : PictureparkForbiddenException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotExternalException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotExternalException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessCancellationNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessCancellationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessCancellationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessContinuationException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("continuationBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationBusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("precedingBusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrecedingBusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("precedingBusinessProcessException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PictureparkException PrecedingBusinessProcessException { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessContinuationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessContinuationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessSummaryNotBatchBasedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryNotBatchBasedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryNotBatchBasedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessSummaryNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotTimeoutException : PictureparkTimeoutException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CoreClusterNotProvidedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CoreClusterNotProvidedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoreClusterNotProvidedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CrossClusterRestoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CrossClusterRestoreException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CrossClusterRestoreException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SnapshotExistingIndicesNotClosedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("existingNotClosedIndicesInCluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ExistingNotClosedIndicesInCluster { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SnapshotExistingIndicesNotClosedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotExistingIndicesNotClosedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AddMetadataLanguageTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddMetadataLanguageTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddMetadataLanguageTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessAlreadyRunningException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentProcessType EnvironmentProcessType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessAlreadyRunningException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessAlreadyRunningException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EnvironmentProcessType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AddMetadataLanguage")]
        AddMetadataLanguage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerUpdate")]
        CustomerUpdate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnvironmentUpdate")]
        EnvironmentUpdate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerBoostValuesUpdate")]
        CustomerBoostValuesUpdate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerReshard")]
        CustomerReshard = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentProcessWaitTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("waitedLifecycles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WaitedLifecycles { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentProcessWaitTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentProcessWaitTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerBoostValuesUpdateTimeoutException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("environmentProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerBoostValuesUpdateTimeoutException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerBoostValuesUpdateTimeoutException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NoTermsOfServiceDefinedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NoTermsOfServiceDefinedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoTermsOfServiceDefinedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class AtLeastOneActiveTermsOfServiceMustExistException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AtLeastOneActiveTermsOfServiceMustExistException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AtLeastOneActiveTermsOfServiceMustExistException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ForbiddenHtmlElementsUsedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ForbiddenHtmlElementsUsedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForbiddenHtmlElementsUsedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessStateNotHitException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Expected { get; set; }

        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Actual { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessStateNotHitException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessStateNotHitException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessProcessLifeCycleNotHitException : PictureparkTimeoutException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessProcessLifeCycle> Expected { get; set; }

        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle Actual { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessLifeCycleNotHitException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessLifeCycleNotHitException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OnlyAccessibleToRecipientException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OnlyAccessibleToRecipientException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OnlyAccessibleToRecipientException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotificationNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class EnvironmentNotAvailableException : PictureparkException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnvironmentNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerNotAvailableException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CustomerAliasHeaderMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerAliasHeaderMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAliasHeaderMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleActionInvalidDocumentTypeException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("allowedDocumentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerDocType> AllowedDocumentTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleActionInvalidDocumentTypeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleActionInvalidDocumentTypeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleTriggerDocType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleActionsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleActionsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleActionsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConfigurationValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConfigurationValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConfigurationValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePermissionSetIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePermissionSetIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePermissionSetIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRuleIdDuplicationException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRuleIdDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRuleIdDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRuleIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRuleIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRuleIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTriggerPointMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTriggerPointMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTriggerPointMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleValidationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleValidationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleValidationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRegularExpressionInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("regex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRegularExpressionInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRegularExpressionInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleConditionInvalidTriggerPointException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("allowedDocTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerDocType> AllowedDocTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerAction> AllowedActions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConditionInvalidTriggerPointException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConditionInvalidTriggerPointException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleTriggerAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FileReplacement")]
        FileReplacement = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Schedule")]
        Schedule = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleRefIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleRefIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleRefIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePathInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePathInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePathInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleFieldIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFieldIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFieldIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleContentPermissionSetIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleContentPermissionSetIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleContentPermissionSetIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleFieldPathInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFieldPathInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFieldPathInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRulePolygonInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRulePolygonInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRulePolygonInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleArrayIndexInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleArrayIndexInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleArrayIndexInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleDictionaryKeyInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleDictionaryKeyInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleDictionaryKeyInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleProjectionTransformationsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleProjectionTransformationsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleProjectionTransformationsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleInvalidVariableNameException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleInvalidVariableNameException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleInvalidVariableNameException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransformationGroupTransformationsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformationGroupTransformationsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformationGroupTransformationsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransformationGroupInputsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformationGroupInputsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformationGroupInputsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNamedCacheNameInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("cacheName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNamedCacheNameInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNamedCacheNameInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationSizeInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("minSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinSize { get; set; }

        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationSizeInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationSizeInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationMinWordLengthInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("minWordLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinWordLength { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationMinWordLengthInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationMinWordLengthInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNGramTransformationMaxWordLengthInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("maxWordLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxWordLength { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNGramTransformationMaxWordLengthInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNGramTransformationMaxWordLengthInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationInvalidIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationInvalidIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationInvalidIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationNoRecipientsException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationNoRecipientsException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationNoRecipientsException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationRecipientUserIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationRecipientUserIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationRecipientUserIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNotificationRecipientUserRoleIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotificationRecipientUserRoleIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotificationRecipientUserRoleIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNumberSequenceInvalidIdException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNumberSequenceInvalidIdException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNumberSequenceInvalidIdException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleNumberSequenceIdDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNumberSequenceIdDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNumberSequenceIdDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleInvalidCronExpressionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleInvalidCronExpressionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleInvalidCronExpressionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleFilterMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleFilterMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleFilterMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleScheduleRulesMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScheduleRulesMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScheduleRulesMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleStringContainsConditionValuesToMatchMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleStringContainsConditionValuesToMatchMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleStringContainsConditionValuesToMatchMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleUserInUserRolesConditionUserRoleIdsMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleDateMathTransformationTimeSpanInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpan { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleDateMathTransformationTimeSpanInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleDateMathTransformationTimeSpanInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleTransferOwnershipTransferUserIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransferOwnershipTransferUserIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransferOwnershipTransferUserIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleOutputFormatIdMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleOutputFormatIdMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleOutputFormatIdMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleEnqueueCreateEmbedActionExpirationDateInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheConfigurationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("innerExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PictureparkValidationException> InnerExceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheConfigurationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheConfigurationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheNameMissingException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheNameMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheNameMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NamedCacheNameDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheNameDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheNameDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNamedCacheSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNamedCacheSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNamedCacheSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ListItemNamedCacheKeyFieldsInvalidException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNamedCacheKeyFieldsInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNamedCacheKeyFieldsInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NoTagsFoundException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NoTagsFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoTagsFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputNotAvailableException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputNotAvailableException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotAvailableException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ModelNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ModelNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class DisplayValueRerenderingInProgressException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayValueRerenderingInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueRerenderingInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatSourceNotDefinedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSourceNotDefinedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSourceNotDefinedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatRetentionTimeOutOfRangeException : ArgumentRangeException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatRetentionTimeOutOfRangeException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatRetentionTimeOutOfRangeException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NotSupportedFileExtensionForFormatException : NotSupportedFileExtensionException
    {
        [Newtonsoft.Json.JsonProperty("formatKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatKind { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotSupportedFileExtensionForFormatException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotSupportedFileExtensionForFormatException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatXmpWritebackNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatXmpWritebackNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatXmpWritebackNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException : OutputFormatXmpWritebackNotSupportedException
    {
        [Newtonsoft.Json.JsonProperty("derivingCopyFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DerivingCopyFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatXmpWritebackDerivedFromCopyFormatNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatsInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        [Newtonsoft.Json.JsonProperty("dependentOutputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DependentOutputFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatsInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatsInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatOperationInProgressException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatOperationInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatOperationInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StaticOutputFormatModificationNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StaticOutputFormatModificationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaticOutputFormatModificationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OriginalOutputFormatModificationNotSupportedException : PictureparkValidationException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OriginalOutputFormatModificationNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalOutputFormatModificationNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class OutputFormatSourceNotValidForRenderingCategoryException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("renderingCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RenderingCategory RenderingCategory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSourceNotValidForRenderingCategoryException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSourceNotValidForRenderingCategoryException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionSizeLimitExceededException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionSizeLimitExceededException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionSizeLimitExceededException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CollectionNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CollectionNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NonDefaultTemplateNameNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonDefaultTemplateNameNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonDefaultTemplateNameNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SystemTemplateModificationNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemTemplateModificationNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemTemplateModificationNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateDuplicationException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("duplicatedTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DuplicatedTemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateDuplicationException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateDuplicationException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateLanguageCodeNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("supportedLanguageCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SupportedLanguageCodes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateLanguageCodeNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateLanguageCodeNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateMediaTypesMissingException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("requiredMediaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredMediaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateMediaTypesMissingException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateMediaTypesMissingException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateMediaTypesNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("unsupportedMediaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UnsupportedMediaTypes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateMediaTypesNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateMediaTypesNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class TemplateNotFoundException : PictureparkNotFoundException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldNotSupported : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldNotSupported FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldNotSupported>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldNotFoundException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingSchemaNotAvailableForFileContentSchemaException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingSchemaNotAvailableForFileContentSchemaException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingSchemaNotAvailableForFileContentSchemaException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldToLayerWithMetadataProtectionForCreateOrUpdateNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingFieldInUseException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingFieldInUseException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingFieldInUseException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class XmpMappingConfigurationInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedConfiguration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingConfigurationInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingConfigurationInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ActivityMappingInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("activityMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityMapping { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ActivityMappingInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityMappingInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsExportNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsExportNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsExportNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public abstract partial class StatisticsFeatureNotEnabledException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsFeatureNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsFeatureNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsReadNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsReadNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsReadNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class StatisticsWriteNotEnabledException : StatisticsFeatureNotEnabledException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsWriteNotEnabledException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsWriteNotEnabledException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConversionPresetTemplateNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("conversionPresetTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionPresetTemplateId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentOwnershipFailureException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentOwnershipFailureException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentOwnershipFailureException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyDeletionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("commentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyDeletionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyDeletionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyParentException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyParentException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyParentException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class CommentReplyContentMismatchException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentReplyContentMismatchException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentReplyContentMismatchException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class VirtualDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VirtualDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VirtualDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class NestedDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class SelfReferencingDisplayContentNotSupportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SelfReferencingDisplayContentNotSupportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SelfReferencingDisplayContentNotSupportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ConcurrentFileReplacementException : PictureparkConflictException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedOriginalFileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpectedOriginalFileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("actualOriginalFileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActualOriginalFileVersion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConcurrentFileReplacementException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConcurrentFileReplacementException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class ContentSearchQueryInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSearchQueryInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchQueryInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentSearchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Metadata")]
        Metadata = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FullText")]
        FullText = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataAndFullText")]
        MetadataAndFullText = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerCreationFailedException : PictureparkBusinessException
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerCreationFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerCreationFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerEmptyException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerEmptyException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerEmptyException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileNotFoundException : PictureparkNotFoundException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileNotFoundException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileNotFoundException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerImportAlreadyInProgressException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerImportAlreadyInProgressException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerImportAlreadyInProgressException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestContainerImportRequestValidationFailedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, InvalidMetadataException> Exceptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerImportRequestValidationFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerImportRequestValidationFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileInvalidFileNameOverrideExtensionException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedExtension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileInvalidFileNameOverrideExtensionException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileInvalidFileNameOverrideExtensionException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestFileAlreadyImportedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFileAlreadyImportedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFileAlreadyImportedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestUrlInvalidException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestUrlInvalidException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestUrlInvalidException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Newtonsoft.Json.JsonObjectAttribute]
    public partial class IngestDownloadFailedException : PictureparkValidationException
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestDownloadFailedException FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestDownloadFailedException>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Create request to create a BusinessProcess.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessCreateRequest
    {
        /// <summary>
        /// Indicates if the system starting the business process supports cancellation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportsCancellation", Required = Newtonsoft.Json.Required.Always)]
        public bool SupportsCancellation { get; set; }

        /// <summary>
        /// Notification data to send to the user when creating the business process.
        /// <br/>Set to null to not create a notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessNotificationUpdate Notification { get; set; }

        /// <summary>
        /// Initial state of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InitialState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Notification update for a business process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessNotificationUpdate
    {
        /// <summary>
        /// The title the message that is shown to the user should have.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Title { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// The message shown to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Message { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// An optional navigation link that allows the user to jump to a page giving more information
        /// <br/>about the process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navigationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NavigationLink { get; set; }

        /// <summary>
        /// The event type of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationEventType EventType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotificationUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotificationUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A custom dictionary type to distinguish language specific class properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TranslatedStringDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 5,

    }

    /// <summary>
    /// Transitions the business process to a new state and/or life cycle.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessStateChangeRequest
    {
        /// <summary>
        /// The new state of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string State { get; set; }

        /// <summary>
        /// The new life cycle of the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// An optional notification update to be posted together with the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessNotificationUpdate Notification { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessStateChangeRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessStateChangeRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Updates the notification of a business process without changing the state or the life cycle.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessNotificationUpdateRequest : BusinessProcessNotificationUpdate
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessNotificationUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotificationUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result from waiting for state(s) on a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessWaitForStateResult
    {
        /// <summary>
        /// The state that was hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateHit { get; set; }

        /// <summary>
        /// The business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BusinessProcess BusinessProcess { get; set; } = new BusinessProcess();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessWaitForStateResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitForStateResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result from waiting for life cycle(s) on a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessWaitForLifeCycleResult
    {
        /// <summary>
        /// The life cycle that was hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle? LifeCycleHit { get; set; }

        /// <summary>
        /// The business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BusinessProcess BusinessProcess { get; set; } = new BusinessProcess();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessWaitForLifeCycleResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitForLifeCycleResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detailed representation of a business process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetails : BusinessProcess
    {
        /// <summary>
        /// Details for the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessDetailsDataBase Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for the details of a business process
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataBatchResponse", typeof(BusinessProcessDetailsDataBatchResponse))]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataSchemaImport", typeof(BusinessProcessDetailsDataSchemaImport))]
    [JsonInheritanceAttribute("BusinessProcessDetailsDataContentImport", typeof(BusinessProcessDetailsDataContentImport))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessProcessDetailsDataBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business process detailed information regarding a batch operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataBatchResponse : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// The DocType on which the operation was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DocType { get; set; }

        /// <summary>
        /// The response of the batch operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BatchResponse Response { get; set; } = new BatchResponse();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataBatchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataBatchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response from a batch operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchResponse
    {
        /// <summary>
        /// Rows in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BatchResponseRow> Rows { get; set; } = new System.Collections.Generic.List<BatchResponseRow>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Row in a batch operation response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchResponseRow
    {
        /// <summary>
        /// Id of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the operation succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }

        /// <summary>
        /// Status code of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// New version of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }

        /// <summary>
        /// If the operation did not succeed, this contains error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatchResponseRow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchResponseRow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business process detailed information regarding Schema / ListItems import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataSchemaImport : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// Result information of a schema import operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaImportResult SchemaImportResult { get; set; }

        /// <summary>
        /// Result information of a list item import operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemImportResult ListItemImportResult { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataSchemaImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataSchemaImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result information of a schema import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaImportResult
    {
        /// <summary>
        /// Number of schemas imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedSchemaCount { get; set; }

        /// <summary>
        /// Number of schema skipped during import phase because they were already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedSchemaCount { get; set; }

        /// <summary>
        /// Total number of schemas requested to be imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSchemaCount { get; set; }

        /// <summary>
        /// Ids of the schemas that were not imported because already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedSchemaIds { get; set; }

        /// <summary>
        /// Ids of the schemas that were successfully imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedSchemaIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result information of a list item import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemImportResult
    {
        /// <summary>
        /// Number of list items imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImportedListItemCount { get; set; }

        /// <summary>
        /// Number of list items skipped during import phase because they were already found in the system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int SkippedListItemCount { get; set; }

        /// <summary>
        /// Total number of list items requested to be imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalListItemCount { get; set; }

        /// <summary>
        /// Ids of the list items that were not imported because already found in the system or due to errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skippedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkippedListItemIds { get; set; }

        /// <summary>
        /// Ids of the list items that were successfully imported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importedListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImportedListItemIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessDetailsDataContentImport : BusinessProcessDetailsDataBase
    {
        /// <summary>
        /// Items that were imported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentImportResult> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessDetailsDataContentImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDetailsDataContentImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an item imported during a content import
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentImportResult
    {
        /// <summary>
        /// ID of the file transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileTransferId { get; set; }

        /// <summary>
        /// ID of the resulting content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// State of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Indicates if the operation succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }

        /// <summary>
        /// If the operation did not succeeded, this contains error related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentImportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentImportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessSummarySchemaImport", typeof(BusinessProcessSummarySchemaImport))]
    [JsonInheritanceAttribute("BusinessProcessSummaryBatchBased", typeof(BusinessProcessSummaryBatchBased))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSummaryBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSummarySchemaImport : BusinessProcessSummaryBase
    {
        /// <summary>
        /// The result of the import schema operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaImportResult SchemaImportResult { get; set; }

        /// <summary>
        /// The result of the import list item operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemImportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemImportResult ListItemImportResult { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummarySchemaImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummarySchemaImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSummaryBatchBased : BusinessProcessSummaryBase
    {
        /// <summary>
        /// Succeeded item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeededItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SucceededItemCount { get; set; }

        /// <summary>
        /// Failed item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failedItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FailedItemCount { get; set; }

        /// <summary>
        /// Document type that was changed in the business process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSummaryBatchBased FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSummaryBatchBased>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessBatch
    {
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessBatchItemBase Data { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessBatch FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBatch>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessBatchItemBatchResponse", typeof(BusinessProcessBatchItemBatchResponse))]
    [JsonInheritanceAttribute("BusinessProcessBatchItemContentImport", typeof(BusinessProcessBatchItemContentImport))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessProcessBatchItemBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessBatchItemBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBatchItemBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessBatchItemBatchResponse : BusinessProcessBatchItemBase
    {
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocType { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatchResponseRow> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessBatchItemBatchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBatchItemBatchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessBatchItemContentImport : BusinessProcessBatchItemBase
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentImportResult> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessBatchItemContentImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBatchItemContentImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search result from a search for business processes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSearchResult : SearchBehaviorWithAggregationBaseResultOfBusinessProcess
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfBusinessProcess : SearchBehaviorBaseResultOfBusinessProcess
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of an aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationResult
    {
        /// <summary>
        /// Name of the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// When there are lots of unique terms, Elastic Search only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sumOtherDocCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumOtherDocCount { get; set; }

        /// <summary>
        /// Items returned for the aggregation. Each item consists of a bucket with the matched value and the number of matches.
        /// <br/>Optionally inner aggregations for further drill down can be available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResultItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResultItem> AggregationResultItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Aggregation result item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationResultItem
    {
        /// <summary>
        /// Value matched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Number of items matched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }

        /// <summary>
        /// Ready to use filter to filter the data based on the aggregation result values.
        /// <br/>It can be passed as one of the aggregation filters of an aggregation query: it returns documents meeting the aggregation condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationFilter Filter { get; set; }

        /// <summary>
        /// True if the current result item matches on of the aggregation filters sent in the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// Inner aggregation results, if inner aggregations were provided in the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationResultItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters aggregations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>
        /// The name of the aggregation this filter is connected to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }

        /// <summary>
        /// The filter to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Autogenerated Guid at request time, for precise aggregation result mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregationFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The filters' base class
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AndFilter", typeof(AndFilter))]
    [JsonInheritanceAttribute("OrFilter", typeof(OrFilter))]
    [JsonInheritanceAttribute("NotFilter", typeof(NotFilter))]
    [JsonInheritanceAttribute("DateRangeFilter", typeof(DateRangeFilter))]
    [JsonInheritanceAttribute("ExistsFilter", typeof(ExistsFilter))]
    [JsonInheritanceAttribute("GeoBoundingBoxFilter", typeof(GeoBoundingBoxFilter))]
    [JsonInheritanceAttribute("GeoDistanceFilter", typeof(GeoDistanceFilter))]
    [JsonInheritanceAttribute("NestedFilter", typeof(NestedFilter))]
    [JsonInheritanceAttribute("NumericRangeFilter", typeof(NumericRangeFilter))]
    [JsonInheritanceAttribute("PrefixFilter", typeof(PrefixFilter))]
    [JsonInheritanceAttribute("TermFilter", typeof(TermFilter))]
    [JsonInheritanceAttribute("TermsFilter", typeof(TermsFilter))]
    [JsonInheritanceAttribute("ChildFilter", typeof(ChildFilter))]
    [JsonInheritanceAttribute("ParentFilter", typeof(ParentFilter))]
    [JsonInheritanceAttribute("AggregationFilter", typeof(AggregationFilter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FilterBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to put filters in "and"
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>
        /// The filters to put in "and". All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AndFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Put filters in "or"
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>
        /// The filters to put in "or". All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterBase> Filters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Negates the specified filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>
        /// The filter to be negated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over a range of date time values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The date time range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DateRange Range { get; set; } = new DateRange();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The date time range class used in filters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRange
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over the existence of a field's value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ExistsFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters geo point values based on a bounding box
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The top left corner of the bounding box's geo location (latitude and longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("topLeft", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation TopLeft { get; set; } = new GeoLocation();

        /// <summary>
        /// The bottom right corner of the bounding box's geo location (latitude and longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bottomRight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation BottomRight { get; set; } = new GeoLocation();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoBoundingBoxFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// It stores geo location information (latitude and longitude)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoLocation
    {
        /// <summary>
        /// The latitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lat { get; set; }

        /// <summary>
        /// The longitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lon { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoLocation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters within the radius of the distance from a location
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The point of origin to calculate the distance from (latitude/longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation Location { get; set; } = new GeoLocation();

        /// <summary>
        /// The distance in meters from the point of origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistanceFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on nested documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>
        /// The path pointing to the nested document (i.e. personLayer.nestedAddress).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        /// <summary>
        /// The filter to be applied on the nested documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters over a range of numeric values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The numeric range on which filtering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NumericRange Range { get; set; } = new NumericRange();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The numeric range class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRange
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }

        /// <summary>
        /// The to value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters field's values based on a prefix
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The value to be used as prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prefix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrefixFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters values exactly containing a term
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The value to use to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Term { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters values containing at least one of the terms
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>
        /// The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
        /// <br/>(i.e. personLayer.address.street).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The list of values to be filtered on. At least one must match to return results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Terms { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on child documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>
        /// The type of the child document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ChildType { get; set; }

        /// <summary>
        /// The filter to be applied on the child document. All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChildFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filters on parent documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>
        /// The type of the parent document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ParentType { get; set; }

        /// <summary>
        /// The filter to be applied on the child document. All kinds of filters are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ParentFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfBusinessProcess : BaseResultOfBusinessProcess
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryDebugInformation
    {
        [Newtonsoft.Json.JsonProperty("general", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string General { get; set; }

        [Newtonsoft.Json.JsonProperty("auditTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuditTrail { get; set; }

        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QueryDebugInformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryDebugInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfBusinessProcess
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessProcess> Results { get; set; } = new System.Collections.Generic.List<BusinessProcess>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search request to search for business processes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessSearchRequest
    {
        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search behaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DropInvalidCharactersOnFailure")]
        DropInvalidCharactersOnFailure = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WildcardOnSingleTerm")]
        WildcardOnSingleTerm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SimplifiedSearch")]
        SimplifiedSearch = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WildcardOnEveryTerm")]
        WildcardOnEveryTerm = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SimplifiedSearchOr")]
        SimplifiedSearchOr = 4,

    }

    /// <summary>
    /// It is the base class for all aggregators.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DateRangeAggregator", typeof(DateRangeAggregator))]
    [JsonInheritanceAttribute("GeoDistanceAggregator", typeof(GeoDistanceAggregator))]
    [JsonInheritanceAttribute("NestedAggregator", typeof(NestedAggregator))]
    [JsonInheritanceAttribute("NumericRangeAggregator", typeof(NumericRangeAggregator))]
    [JsonInheritanceAttribute("TermsAggregator", typeof(TermsAggregator))]
    [JsonInheritanceAttribute("TermsRelationAggregator", typeof(TermsRelationAggregator))]
    [JsonInheritanceAttribute("TermsEnumAggregator", typeof(TermsEnumAggregator))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AggregatorBase
    {
        /// <summary>
        /// The slug name of the aggregation. It must be unique per aggregation request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Language specific field names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// An optional aggregator list for nested aggregations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// An optional filter to limit the data set the aggregation is operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Optional behavior that the UI should keep in regards to the aggregation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UiAggregatorBehavior UiBehavior { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregatorBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Behavior that the UI should keep in regards to the aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiAggregatorBehavior
    {
        /// <summary>
        /// Filters should be enabled in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableFilter { get; set; }

        /// <summary>
        /// Suggestions should be enabled in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableSuggestions", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSuggestions { get; set; }

        /// <summary>
        /// Search functionality should be enabled in the filters in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableSearchInFilter", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSearchInFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiAggregatorBehavior FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiAggregatorBehavior>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator dedicated for date values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// A list of date time ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DateRangeForAggregator> Ranges { get; set; } = new System.Collections.Generic.List<DateRangeForAggregator>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The date range class used in aggregators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeForAggregator
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeForAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeForAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator that works on geo_point fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// The point of origin to calculate the distance from (latitude/longitude).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoLocation Location { get; set; } = new GeoLocation();

        /// <summary>
        /// A list of distance ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GeoDistance> Ranges { get; set; } = new System.Collections.Generic.List<GeoDistance>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistanceAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Stores geo distance information for gei distance aggregation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDistance
    {
        /// <summary>
        /// Language specific geo distance names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The distance in meters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoDistance FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistance>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A special single bucket aggregation that enables aggregating on nested documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedAggregator : AggregatorBase
    {
        /// <summary>
        /// The path pointing to the nested object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket range aggregator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// A list of numeric ranges on which aggregate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NumericRangeForAggregator> Ranges { get; set; } = new System.Collections.Generic.List<NumericRangeForAggregator>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The numeric range for aggregator class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericRangeForAggregator
    {
        /// <summary>
        /// Language specific range names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// The from value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }

        /// <summary>
        /// The to value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumericRangeForAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeForAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A multi-bucket value aggregator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsAggregator : AggregatorBase
    {
        /// <summary>
        /// The field's ID to execute the aggregation on. Only not analyzed fields are supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Field { get; set; }

        /// <summary>
        /// It defines how many term buckets should be returned out of the overall terms list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        /// <summary>
        /// Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Includes { get; set; }

        /// <summary>
        /// Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Excludes { get; set; }

        /// <summary>
        /// Limits the possible returned aggregation values by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchFields { get; set; }

        /// <summary>
        /// Sort settings for the aggregation results. If no sort is specified, aggregation is sorted on the item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortInfo Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sorting information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortInfo
    {
        /// <summary>
        /// The field's ID to sort on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// The sort direction (ascending/descending).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; } = Picturepark.SDK.V1.Contract.SortDirection.Asc;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The sort direction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    /// <summary>
    /// A multi-bucket value aggregator used for aggregations on relation item ids.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        /// <summary>
        /// Type of the item target of the relation. It is used to resolve the target ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsRelationAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TermsRelationAggregatorDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Schema")]
        Schema = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionSet")]
        ContentPermissionSet = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserRole")]
        UserRole = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaPermissionSet")]
        SchemaPermissionSet = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCustomerAlias")]
        IndexCustomerAlias = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCustomerId")]
        IndexCustomerId = 9,

    }

    /// <summary>
    /// A multi-bucket value aggregator used for aggregations on indexed enum values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        /// <summary>
        /// Type of the enum target of the relation. It is used to resolve the enum translation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EnumType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsEnumAggregator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents the business rule configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleConfiguration
    {
        /// <summary>
        /// Disables the rule engine completely.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableRuleEngine", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableRuleEngine { get; set; }

        /// <summary>
        /// Rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessRule> Rules { get; set; } = new System.Collections.Generic.List<BusinessRule>();

        /// <summary>
        /// Named caches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caches", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NamedCacheConfigurationBase> Caches { get; set; } = new System.Collections.Generic.List<NamedCacheConfigurationBase>();

        /// <summary>
        /// Notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessRuleNotification> Notifications { get; set; } = new System.Collections.Generic.List<BusinessRuleNotification>();

        /// <summary>
        /// Numbers sequences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberSequences", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessRuleNumberSequence> NumberSequences { get; set; } = new System.Collections.Generic.List<BusinessRuleNumberSequence>();

        /// <summary>
        /// Schedules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessRuleSchedule> Schedules { get; set; } = new System.Collections.Generic.List<BusinessRuleSchedule>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A business rule
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessRuleConfigurable", typeof(BusinessRuleConfigurable))]
    [JsonInheritanceAttribute("BusinessRuleScript", typeof(BusinessRuleScript))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessRule
    {
        /// <summary>
        /// User defined ID of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Trigger point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTriggerPoint> TriggerPoints { get; set; }

        /// <summary>
        /// Enable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Language specific rule names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        /// <summary>
        /// Enable trace logs for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTracing", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTracing { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a trigger point for a business rule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTriggerPoint
    {
        /// <summary>
        /// Execution scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("executionScope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleExecutionScope ExecutionScope { get; set; }

        /// <summary>
        /// Document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleTriggerDocType DocumentType { get; set; }

        /// <summary>
        /// Action performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleTriggerAction Action { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTriggerPoint FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTriggerPoint>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleExecutionScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MainDoc")]
        MainDoc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SearchDoc")]
        SearchDoc = 1,

    }

    /// <summary>
    /// A business rule configurable by specific actions and conditions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleConfigurable : BusinessRule
    {
        /// <summary>
        /// The condition that makes this rule trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessRuleCondition Condition { get; set; }

        /// <summary>
        /// Optional transformations to apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformationGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTransformationGroup> TransformationGroups { get; set; }

        /// <summary>
        /// The actions that are performed when this rule triggers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleAction> Actions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConfigurable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConfigurable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Conditions on which a business rule is executed
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AndCondition", typeof(AndCondition))]
    [JsonInheritanceAttribute("OrCondition", typeof(OrCondition))]
    [JsonInheritanceAttribute("LayerAssignedCondition", typeof(LayerAssignedCondition))]
    [JsonInheritanceAttribute("LayerUnassignedCondition", typeof(LayerUnassignedCondition))]
    [JsonInheritanceAttribute("ContentPermissionSetAssignedCondition", typeof(ContentPermissionSetAssignedCondition))]
    [JsonInheritanceAttribute("ContentPermissionSetUnassignedCondition", typeof(ContentPermissionSetUnassignedCondition))]
    [JsonInheritanceAttribute("FieldValueChangedCondition", typeof(FieldValueChangedCondition))]
    [JsonInheritanceAttribute("FieldValueCondition", typeof(FieldValueCondition))]
    [JsonInheritanceAttribute("MatchRegexCondition", typeof(MatchRegexCondition))]
    [JsonInheritanceAttribute("StringContainsCondition", typeof(StringContainsCondition))]
    [JsonInheritanceAttribute("UserInUserRolesCondition", typeof(UserInUserRolesCondition))]
    [JsonInheritanceAttribute("TagboxItemAssignedCondition", typeof(TagboxItemAssignedCondition))]
    [JsonInheritanceAttribute("TagboxItemUnassignedCondition", typeof(TagboxItemUnassignedCondition))]
    [JsonInheritanceAttribute("ContentSchemaCondition", typeof(ContentSchemaCondition))]
    [JsonInheritanceAttribute("NumberCompareCondition", typeof(NumberCompareCondition))]
    [JsonInheritanceAttribute("ContentRelationItemAssignedCondition", typeof(ContentRelationItemAssignedCondition))]
    [JsonInheritanceAttribute("ContentRelationItemUnassignedCondition", typeof(ContentRelationItemUnassignedCondition))]
    [JsonInheritanceAttribute("GeoPointWithinPolygonCondition", typeof(GeoPointWithinPolygonCondition))]
    [JsonInheritanceAttribute("ContentPermissionSetsChangedCondition", typeof(ContentPermissionSetsChangedCondition))]
    [JsonInheritanceAttribute("ContentRelationItemsChangedCondition", typeof(ContentRelationItemsChangedCondition))]
    [JsonInheritanceAttribute("LayersChangedCondition", typeof(LayersChangedCondition))]
    [JsonInheritanceAttribute("TagboxItemsChangedCondition", typeof(TagboxItemsChangedCondition))]
    [JsonInheritanceAttribute("FieldEmptyCondition", typeof(FieldEmptyCondition))]
    [JsonInheritanceAttribute("NotCondition", typeof(NotCondition))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessRuleCondition
    {
        /// <summary>
        /// Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Language specific condition names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific condition description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Links conditions with AND
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AndCondition : BooleanCondition
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AndCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Links multiple conditions with a boolean operator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BooleanCondition : BusinessRuleCondition
    {
        /// <summary>
        /// The conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleCondition> Conditions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BooleanCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BooleanCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Links conditions with OR
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrCondition : BooleanCondition
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a layer was assigned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerAssignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Layer id to match on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerAssignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerAssignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a layer was unassigned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerUnassignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Layer id to match on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayerUnassignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerUnassignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a permission set was assigned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetAssignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Permission set id to match on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetAssignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetAssignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a permission set was unassigned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetUnassignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Permission set id to match on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetUnassignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetUnassignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a field matching the field path string (JSON path) changes to the expected value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldValueChangedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Expected value for the field to have to satisfy the condition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExpectedValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldValueChangedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldValueChangedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a field matching the field path string (JSON path) has the expected value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldValueCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Expected value for the field to have to satisfy the condition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExpectedValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldValueCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldValueCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a field matching the field path string (JSON Path) changes and matches the given regular expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatchRegexCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Regular expression
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regex { get; set; }

        /// <summary>
        /// Optional variable name to store the matched regex groups in
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreIn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchRegexCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchRegexCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a field matching the field path string (JSON Path) changes and matches one of the specified values in ValuesToMatch
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringContainsCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// A list of string value that will checked if at least one of them is contained in the string value identified by the FieldPath.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valuesToMatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ValuesToMatch { get; set; }

        /// <summary>
        /// Optional value to be stored in the variable identified by StoreIn. It can be simple value or a complex object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueToStore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ValueToStore { get; set; }

        /// <summary>
        /// Decide if the StringContains condition should be processed case sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caseSensitive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CaseSensitive { get; set; }

        /// <summary>
        /// Optional variable name to store the ValueToStore in
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreIn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StringContainsCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StringContainsCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when one or all the user roles specified in UserRoleIds are assigned to the user retrieved from the path UserIdPath
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInUserRolesCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field containing the id of the user that needs to be checked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userIdPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserIdPath { get; set; }

        /// <summary>
        /// A static list of user role ids that will checked: depending on MatchMode all the user roles or only one of them must be assigned to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        /// <summary>
        /// Decide if all the user roles must be assigned to the user or only one of them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matchMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionMatchMode MatchMode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserInUserRolesCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInUserRolesCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// How a list of values in the condition should be matched during the comparison.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConditionMatchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 1,

    }

    /// <summary>
    /// Matches when a tag in a tagbox matching the field path string (JSON path) is newly assigned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagboxItemAssignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Ref Id of the list item that was assigned in the tagbox
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TagboxItemAssignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagboxItemAssignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a tag in a tagbox matching the field path string (JSON path) is removed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagboxItemUnassignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Ref Id of the list item that was unassigned from the tagbox
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TagboxItemUnassignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagboxItemUnassignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when the content schema of a metadata item equals the one set in the condition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentSchemaCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Content schema id to match on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSchemaCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSchemaCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumberCompareCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Mode to use for comparison.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleNumberCompareConditionMode Mode { get; set; }

        /// <summary>
        /// Value to compare to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumberCompareCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumberCompareCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessRuleNumberCompareConditionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LessThanEqual")]
        LessThanEqual = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Equal")]
        Equal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanEqual")]
        GreaterThanEqual = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 4,

    }

    /// <summary>
    /// Matches when a relationship entry in a relationship field matching the field path string (JSON path) is newly assigned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRelationItemAssignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Content id that should be matched against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRelationItemAssignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRelationItemAssignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a relationship entry in a relationship field matching the field path string (JSON path) is removed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRelationItemUnassignedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Content id that should be matched against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRelationItemUnassignedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRelationItemUnassignedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when the geo point from the field specified by the field path is inside the specified polygon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoPointWithinPolygonCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        /// <summary>
        /// List of points that form the polygon for the geo fence.
        /// <br/>Must include at least 3 points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("polygon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LatLon> Polygon { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeoPointWithinPolygonCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoPointWithinPolygonCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Stores a coordinate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatLon
    {
        /// <summary>
        /// Latitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LatLon FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LatLon>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches whenever the assigned content permission sets changed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetsChangedCondition : BusinessRuleCondition
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetsChangedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetsChangedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches whenever the assigned content(s) in a relationship field changed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRelationItemsChangedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRelationItemsChangedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRelationItemsChangedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches whenever the assigned layers of a content changed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayersChangedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Optional list of layer schema ids that must be added during the current content update operation in order for the condition to match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addedLayerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AddedLayerIds { get; set; }

        /// <summary>
        /// Optional list of layer schema ids that must be removed during the current content update operation in order for the condition to match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("removedLayerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RemovedLayerIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LayersChangedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LayersChangedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches whenever the assigned item(s) in a tagbox changed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagboxItemsChangedCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TagboxItemsChangedCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagboxItemsChangedCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when a field matching the field path string (JSON path) is empty.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldEmptyCondition : BusinessRuleCondition
    {
        /// <summary>
        /// JSON path to the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldEmptyCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldEmptyCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Matches when the inner condition is not matching.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotCondition : BusinessRuleCondition
    {
        /// <summary>
        /// Inner condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessRuleCondition Condition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business rule transformation group:
    /// <br/>A group of transformations to run for the specified inputs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTransformationGroup
    {
        /// <summary>
        /// The inputs of the transformation group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Inputs { get; set; }

        /// <summary>
        /// A list of transformations to apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTransformation> Transformations { get; set; }

        /// <summary>
        /// Variable name where the final result should be stored in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreIn { get; set; }

        /// <summary>
        /// Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Language specific transformation group names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific transformation group description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformationGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformationGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Business rule transformation
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("TakeDictionaryValueTransformation", typeof(TakeDictionaryValueTransformation))]
    [JsonInheritanceAttribute("TakeArrayValueTransformation", typeof(TakeArrayValueTransformation))]
    [JsonInheritanceAttribute("JoinByTransformation", typeof(JoinByTransformation))]
    [JsonInheritanceAttribute("LookupCacheTransformation", typeof(LookupCacheTransformation))]
    [JsonInheritanceAttribute("NGramTransformation", typeof(NGramTransformation))]
    [JsonInheritanceAttribute("ProjectionTransformation", typeof(ProjectionTransformation))]
    [JsonInheritanceAttribute("SplitTransformation", typeof(SplitTransformation))]
    [JsonInheritanceAttribute("DateMathTransformation", typeof(DateMathTransformation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessRuleTransformation
    {
        /// <summary>
        /// Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Language specific transformation names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific transformation description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Takes an item from a dictionary by its key.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TakeDictionaryValueTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Key of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TakeDictionaryValueTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TakeDictionaryValueTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Takes an item from an array by its index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TakeArrayValueTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Index of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TakeArrayValueTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TakeArrayValueTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Joins the input by a configurable separator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JoinByTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Separator to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("separator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Separator { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JoinByTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JoinByTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Uses a named cache to lookup a value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LookupCacheTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Name of the cache to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namedCache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedCache { get; set; }

        /// <summary>
        /// Choose what should be returned.
        /// <br/>Found: return the value of the found item in the lookup cache, null if not found.
        /// <br/>NotFound: return the input key value of the not found item, null if found.
        /// <br/>All: return the value of the found item in the lookup cache or the input key value of the not found item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupReturnedItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LookupItemsMatch LookupReturnedItems { get; set; } = Picturepark.SDK.V1.Contract.LookupItemsMatch.Found;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LookupCacheTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupCacheTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// How should happen the match on a lookup cache
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LookupItemsMatch
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Found")]
        Found = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    /// <summary>
    /// Produces N-grams based on splitting a text on whitespace characters.
    /// <br/>Removes punctuation as well.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NGramTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Maximum size of n-grams to produce.
        /// <br/>Settings this to 3 will produce unigrams, bigrams, trigrams.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// Minimum length of a word to be considered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minWordLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinWordLength { get; set; }

        /// <summary>
        /// Maximum length of a word to be considered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxWordLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxWordLength { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NGramTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Transforms a list by applying a set of transformation for each item in the list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectionTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Transformations to apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTransformation> Transformations { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectionTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectionTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Splits the input by separators, optionally trimming the entries afterwards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SplitTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// Separators to use, supports variables, an array of strings including escape sequences or null to split on any white space character.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("separators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Separators { get; set; }

        /// <summary>
        /// Keeps empty items. Empty items will be returned as empty strings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keepEmpty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool KeepEmpty { get; set; }

        /// <summary>
        /// Trims each entry for punctuation and white space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Trim { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SplitTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SplitTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Add / remove a time span to a date time
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateMathTransformation : BusinessRuleTransformation
    {
        /// <summary>
        /// String representation of a time span.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpan { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateMathTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateMathTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Action to be performed by a business rule
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AssignLayerAction", typeof(AssignLayerAction))]
    [JsonInheritanceAttribute("UnassignLayerAction", typeof(UnassignLayerAction))]
    [JsonInheritanceAttribute("AssignValueAction", typeof(AssignValueAction))]
    [JsonInheritanceAttribute("AssignTagboxItemsAction", typeof(AssignTagboxItemsAction))]
    [JsonInheritanceAttribute("UnassignTagboxItemsAction", typeof(UnassignTagboxItemsAction))]
    [JsonInheritanceAttribute("AssignContentPermissionSetsAction", typeof(AssignContentPermissionSetsAction))]
    [JsonInheritanceAttribute("UnassignContentPermissionSetsAction", typeof(UnassignContentPermissionSetsAction))]
    [JsonInheritanceAttribute("ProduceMessageAction", typeof(ProduceMessageAction))]
    [JsonInheritanceAttribute("AssignTagboxItemsInLayerAction", typeof(AssignTagboxItemsInLayerAction))]
    [JsonInheritanceAttribute("EnqueueTaggingAction", typeof(EnqueueTaggingAction))]
    [JsonInheritanceAttribute("ProduceNotificationAction", typeof(ProduceNotificationAction))]
    [JsonInheritanceAttribute("GetNumberFromNumberSequenceAction", typeof(GetNumberFromNumberSequenceAction))]
    [JsonInheritanceAttribute("EnqueueTransferOwnershipAction", typeof(EnqueueTransferOwnershipAction))]
    [JsonInheritanceAttribute("EnqueueCreateEmbedAction", typeof(EnqueueCreateEmbedAction))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class BusinessRuleAction
    {
        /// <summary>
        /// Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Language specific action names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific action description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Assigns a layer, adding the default values to the data dictionary
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignLayerAction : BusinessRuleAction
    {
        /// <summary>
        /// The ID of the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        /// <summary>
        /// An object containing default values (used for example to populate required fields).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssignLayerAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignLayerAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes a layer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnassignLayerAction : BusinessRuleAction
    {
        /// <summary>
        /// The ID of the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnassignLayerAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnassignLayerAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Assign a value to all fields matching the FieldPath (JSON path).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignValueAction : BusinessRuleAction
    {
        /// <summary>
        /// Path to the object the value should be inserted in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// ID of the field, the value should be inserted in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// Value to assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>
        /// Indicates whether existing values should be replaced.
        /// <br/>Note: for multi fieldsets and relations, this setting controls, if the value is added
        /// <br/>to the already existing values or if the existing values shall be overwritten.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Replace { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssignValueAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignValueAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Assigns one or multiple tag box items to the multi tagbox identified by the path (JSON path).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignTagboxItemsAction : BusinessRuleAction
    {
        /// <summary>
        /// Path to the object the tagbox is contained in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// ID of the tagbox field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// List of refIds of the items that should be assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RefIds { get; set; }

        /// <summary>
        /// Indicates whether all the already assigned tags get replaced by the set specified in the action.
        /// <br/>If false, the not already assigned tags get added, the rest is left as is.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Replace { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssignTagboxItemsAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignTagboxItemsAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes one or multiple tag box items from the multi tagbox identified by the path (JSON path).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnassignTagboxItemsAction : BusinessRuleAction
    {
        /// <summary>
        /// Path to the object the tagbox is contained in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// ID of the tagbox field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// List of refIds of the items that should be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RefIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnassignTagboxItemsAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnassignTagboxItemsAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Assigns one or more permission sets to a content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignContentPermissionSetsAction : BusinessRuleAction
    {
        /// <summary>
        /// IDs of the permission sets to assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PermissionSetIds { get; set; }

        /// <summary>
        /// Indicates whether the already assigned permissions should be replaced or merged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Replace { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssignContentPermissionSetsAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignContentPermissionSetsAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes one or more permission sets from a content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnassignContentPermissionSetsAction : BusinessRuleAction
    {
        /// <summary>
        /// IDs of the permission sets to unassign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnassignContentPermissionSetsAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnassignContentPermissionSetsAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Produces a message that is enqueued to the integration bus for a service provider to consume
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProduceMessageAction : BusinessRuleAction
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProduceMessageAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProduceMessageAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Assigns a set of list item ids to all multi tag boxes in a layer where the
    /// <br/>filter defined on the tagbox does allow assignment of the ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignTagboxItemsInLayerAction : BusinessRuleAction
    {
        /// <summary>
        /// Named cache to use for lookup, should be of type SchemaTagboxFilterLookupNamedCacheConfiguration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namedCache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Use LayerId property directly instead")]
        public string NamedCache { get; set; }

        /// <summary>
        /// ID of layer to assign items in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerId { get; set; }

        /// <summary>
        /// List of refIds of the items that should be assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RefIds { get; set; }

        /// <summary>
        /// Indicates where the assignment should be additive to the already assigned tags
        /// <br/>or if existing tags should be replaced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Replace { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssignTagboxItemsInLayerAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignTagboxItemsInLayerAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Enqueue content for tagging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnqueueTaggingAction : BusinessRuleAction
    {
        /// <summary>
        /// Options to use while tagging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaggingOptionsBase Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnqueueTaggingAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnqueueTaggingAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Options for tagging
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ClarifaiTaggingOptions", typeof(ClarifaiTaggingOptions))]
    [JsonInheritanceAttribute("SimulatedTaggingOptions", typeof(SimulatedTaggingOptions))]
    [JsonInheritanceAttribute("AzureTaggingOptions", typeof(AzureTaggingOptions))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class TaggingOptionsBase
    {
        /// <summary>
        /// Override for the output format ID to tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tagOutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagOutputFormatId { get; set; }

        /// <summary>
        /// Override for the cache to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywordLookupCacheName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeywordLookupCacheName { get; set; }

        /// <summary>
        /// Override for the layer to assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taggingLayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaggingLayerId { get; set; }

        /// <summary>
        /// Override for the field id where found tags are stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundTagsFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FoundTagsFieldId { get; set; }

        /// <summary>
        /// Override for the field id where not found tags are stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingKeywordsFieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingKeywordsFieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaggingOptionsBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaggingOptionsBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Options for clarifai tagging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClarifaiTaggingOptions : TaggingOptionsBase
    {
        /// <summary>
        /// Override for the model to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        /// <summary>
        /// Override for the language to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// Minimum value a concept must have to be considered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClarifaiTaggingOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClarifaiTaggingOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimulatedTaggingOptions : TaggingOptionsBase
    {
        /// <summary>
        /// Number of keywords to assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfKeywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfKeywords { get; set; }

        /// <summary>
        /// Enables/disables ocr feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableOcr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableOcr { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimulatedTaggingOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulatedTaggingOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Options for Azure tagging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureTaggingOptions : TaggingOptionsBase
    {
        /// <summary>
        /// Url to Azure Computer Vision Service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiUrl { get; set; }

        /// <summary>
        /// API Key to Azure Computer Vision Service (needed for connection)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Determines the language, list of supported language codes: https://aka.ms/cv-languages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Minimum value of confidence to accept the service result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumValue { get; set; }

        /// <summary>
        /// Specifies if tagging feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTagging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTagging { get; set; }

        /// <summary>
        /// Specifies if object detection feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableObjectDetection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableObjectDetection { get; set; }

        /// <summary>
        /// Specifies if OCR feature should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableOcr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableOcr { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AzureTaggingOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AzureTaggingOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Produces a notification that is enqueued to users, user groups or owners recipients
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProduceNotificationAction : BusinessRuleAction
    {
        /// <summary>
        /// ID of the notification to produce.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Recipients of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationRecipientBase> Recipients { get; set; } = new System.Collections.Generic.List<NotificationRecipientBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProduceNotificationAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProduceNotificationAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("UserNotificationRecipient", typeof(UserNotificationRecipient))]
    [JsonInheritanceAttribute("UserRoleNotificationRecipient", typeof(UserRoleNotificationRecipient))]
    [JsonInheritanceAttribute("UserRightNotificationRecipient", typeof(UserRightNotificationRecipient))]
    [JsonInheritanceAttribute("OwnerNotificationRecipient", typeof(OwnerNotificationRecipient))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationRecipientBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationRecipientBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationRecipientBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserNotificationRecipient : NotificationRecipientBase
    {
        /// <summary>
        /// User ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserNotificationRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotificationRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleNotificationRecipient : NotificationRecipientBase
    {
        /// <summary>
        /// User role ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleNotificationRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleNotificationRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRightNotificationRecipient : NotificationRecipientBase
    {
        /// <summary>
        /// User right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserRight UserRight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRightNotificationRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRightNotificationRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerNotificationRecipient : NotificationRecipientBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerNotificationRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerNotificationRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Action to get a number from a configured number sequence and store it in a variable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNumberFromNumberSequenceAction : BusinessRuleAction
    {
        /// <summary>
        /// ID of the sequence number to get number from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberSequenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberSequenceId { get; set; }

        /// <summary>
        /// Variable name to store number in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreIn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetNumberFromNumberSequenceAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetNumberFromNumberSequenceAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Enqueue content for transfer ownership
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnqueueTransferOwnershipAction : BusinessRuleAction
    {
        /// <summary>
        /// Id of the user to whom the ownership should be transferred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnqueueTransferOwnershipAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnqueueTransferOwnershipAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Enqueue creation of an embed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnqueueCreateEmbedAction : BusinessRuleAction
    {
        /// <summary>
        /// Name of the embed. If empty, it will be automatically initialized with the 'Embed_{RuleId}'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmbedName { get; set; }

        /// <summary>
        /// Optional description of the embed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embedDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmbedDescription { get; set; }

        /// <summary>
        /// Output format of the content to be embedded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        /// <summary>
        /// Optional conversion to apply to the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionString { get; set; }

        /// <summary>
        /// Indicates if the conversion is locked and therefore cannot be changed by the caller of the embed URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lockDeliveryOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockDeliveryOptions { get; set; } = true;

        /// <summary>
        /// Optional date when embed expires and cannot be accessed anymore: It must be in ISO format, with or without milliseconds 'yyyy-MM-ddTHH:mm:ss(.fffffff)K'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Optional variable name to store in the url of the embed that will be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreIn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EnqueueCreateEmbedAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnqueueCreateEmbedAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A business rule expressed as a script
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleScript : BusinessRule
    {
        /// <summary>
        /// Script
        /// </summary>
        [Newtonsoft.Json.JsonProperty("script", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Script { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleScript FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleScript>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Named cache configuration
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ListItemNamedCacheConfiguration", typeof(ListItemNamedCacheConfiguration))]
    [JsonInheritanceAttribute("SchemaTagboxFilterLookupNamedCacheConfiguration", typeof(SchemaTagboxFilterLookupNamedCacheConfiguration))]
    [JsonInheritanceAttribute("InverseListItemNamedCacheConfiguration", typeof(InverseListItemNamedCacheConfiguration))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NamedCacheConfigurationBase
    {
        /// <summary>
        /// Name of named cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the lookup should be case sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caseSensitive", Required = Newtonsoft.Json.Required.Always)]
        public bool CaseSensitive { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NamedCacheConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedCacheConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List item named cache
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemNamedCacheConfiguration : NamedCacheConfigurationBase
    {
        /// <summary>
        /// ID of the schema to cache (should have SchemaType = List)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        /// <summary>
        /// List of IDs of fields to lookup value in.
        /// <br/>Fields need to be marked with SimpleSearch = true in schema configuration. Additionally, if case insensitive lookup should be used, the
        /// <br/>simple analyzer must be added to the field as well.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KeyFields { get; set; }

        /// <summary>
        /// An optional filter to narrow down the cached list items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Include child schemas when caching list items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeAllSchemaChildren { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemNamedCacheConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemNamedCacheConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Creates a cache for all multi tag boxes in a schema
    /// <br/>Lookup key is then in the format [ fieldId, refId ], returns the refId if matched by the filter
    /// <br/>Obsolete: Directly set SchemaId property on action AssignTagboxItemsInLayerAction instead
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaTagboxFilterLookupNamedCacheConfiguration : NamedCacheConfigurationBase
    {
        /// <summary>
        /// The layer id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaTagboxFilterLookupNamedCacheConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaTagboxFilterLookupNamedCacheConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InverseListItemNamedCacheConfiguration : NamedCacheConfigurationBase
    {
        /// <summary>
        /// ID of the schema to cache (should have SchemaType = List)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        /// <summary>
        /// ID of the field that yields the value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueField { get; set; }

        /// <summary>
        /// An optional filter to narrow down the cached list items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Include child schemas when caching list items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeAllSchemaChildren { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InverseListItemNamedCacheConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverseListItemNamedCacheConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Configuration for a notification sent by ProduceNotificationAction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleNotification
    {
        /// <summary>
        /// ID of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Title of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Title { get; set; }

        /// <summary>
        /// Message of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Message { get; set; }

        /// <summary>
        /// Indicates if a collection of the items affected should be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }

        /// <summary>
        /// Name of the template to use when converting the notification to an item in the email notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNotification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNotification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Configuration for a number sequence.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleNumberSequence
    {
        /// <summary>
        /// ID of number sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Format.
        /// <br/>Refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings for guidance.
        /// <br/>Note: formatting of numbers use invariant culture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Starting number of the sequence.
        /// <br/>Note: When changing this, existing sequence number will be reset to new starting number and might produce duplicate numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public long Start { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleNumberSequence FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleNumberSequence>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Schedules business rules to run on a regular time frame.
    /// <br/>Note: If schedules do not complete within 15 minutes, next execution will be skipped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleSchedule
    {
        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        /// <summary>
        /// Cron expression to specify run time.
        /// <br/>Refer to https://github.com/HangfireIO/Cronos#cron-format for reference.
        /// <br/>Minimum interval supported is 15 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cronExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CronExpression { get; set; }

        /// <summary>
        /// IDs of business rules to run during schedule, regardless of trigger point
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuleIds { get; set; }

        /// <summary>
        /// Doc type of items that should be loaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleTriggerDocType DocType { get; set; }

        /// <summary>
        /// Search string to apply when searching for items to load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Filter to apply when searching for items to load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Indicates if schedule is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEnabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleSchedule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleSchedule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Update request for changing business rule configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleConfigurationUpdateRequest : BusinessRuleConfiguration
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleConfigurationUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleConfigurationUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds results of trace log search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTraceLogSearchResult : SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTraceLogSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTraceLogSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog : SearchBehaviorBaseResultOfBusinessRuleTraceLog
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfBusinessRuleTraceLog : BaseResultOfBusinessRuleTraceLog
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfBusinessRuleTraceLog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfBusinessRuleTraceLog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfBusinessRuleTraceLog
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BusinessRuleTraceLog> Results { get; set; } = new System.Collections.Generic.List<BusinessRuleTraceLog>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfBusinessRuleTraceLog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfBusinessRuleTraceLog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains a trace for a single document affected by potentially multiple business rules being evaluated and executed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTraceLog
    {
        /// <summary>
        /// ID of the trace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Type of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessRuleTriggerDocType DocumentType { get; set; }

        /// <summary>
        /// IDs of rules that were traced for this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuleIds { get; set; }

        /// <summary>
        /// Detailed information about rules traced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedRule> Rules { get; set; }

        /// <summary>
        /// Validation errors occuring after all rules have ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorResponse> ValidationErrors { get; set; }

        /// <summary>
        /// General errors occuring when saving the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generalErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorResponse> GeneralErrors { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTraceLog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTraceLog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Traced Business rule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedRule
    {
        /// <summary>
        /// Configuration of the rule as it was running. Enriched with trace ref IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessRule Configuration { get; set; }

        /// <summary>
        /// Evaluations performed for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evaluations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedEvaluation> Evaluations { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Evaluation trace of a business rule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedEvaluation
    {
        /// <summary>
        /// Indicates if the rule was found to be executable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionSatisfied", Required = Newtonsoft.Json.Required.Always)]
        public bool ConditionSatisfied { get; set; }

        /// <summary>
        /// Detailed evaluation results for each condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedEvaluationCondition> Conditions { get; set; }

        /// <summary>
        /// Detailed results for transformation groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformationGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedTransformationGroup> TransformationGroups { get; set; }

        /// <summary>
        /// Detailed steps performed by actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedAction> Actions { get; set; }

        /// <summary>
        /// State of variables after all transformation groups were ran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Variables { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedEvaluation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedEvaluation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail trace for business rule condition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedEvaluationCondition
    {
        /// <summary>
        /// Trace reference ID of condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Indicates if this condition evaluated to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("satisfied", Required = Newtonsoft.Json.Required.Always)]
        public bool Satisfied { get; set; }

        /// <summary>
        /// Additional reason why condition evaluated to given result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedEvaluationCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedEvaluationCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Trace of transformation group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedTransformationGroup
    {
        /// <summary>
        /// Trace reference ID of transformation group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Serialized JSON of input for group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }

        /// <summary>
        /// Serialized JSON of output for group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Output { get; set; }

        /// <summary>
        /// Detailed traces for each step performed by transformations in group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleTracedTransformation> Transformations { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedTransformationGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedTransformationGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Trace of single transformation step
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedTransformation
    {
        /// <summary>
        /// Trace reference ID of transformation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Serialized JSON of input of transformation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }

        /// <summary>
        /// Serialized JSON of output of transformation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Output { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedTransformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedTransformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detailed trace for business rule action
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTracedAction
    {
        /// <summary>
        /// Trace reference ID of action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceRefId { get; set; }

        /// <summary>
        /// Indicates if the action modified the document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentModified", Required = Newtonsoft.Json.Required.Always)]
        public bool DocumentModified { get; set; }

        /// <summary>
        /// Additional information provided by the trace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTracedAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTracedAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Audit information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAudit
    {
        /// <summary>
        /// The date on which the document was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CreationDate { get; set; }

        /// <summary>
        /// The last date on which the document was modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ModificationDate { get; set; }

        /// <summary>
        /// ID of the user who created the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// ID of the last user who modified the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAudit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAudit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleTraceLogSearchRequest
    {
        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleTraceLogSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleTraceLogSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Channel
    {
        /// <summary>
        /// ID of channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Numeric sort order of the channel. Channels are returned ordered by this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }

        /// <summary>
        /// The search index ID where the channel requests the content from. Only RootContentSearchIndex is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SearchIndexId { get; set; }

        /// <summary>
        /// An optional search filter. Limits the content document result set on each search and aggregation request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Default sort order specified for the channel to sort the results of a content search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; } = new System.Collections.Generic.List<SortInfo>();

        /// <summary>
        /// Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SortField> SortFields { get; set; } = new System.Collections.Generic.List<SortField>();

        /// <summary>
        /// An optional list of aggregators. These aggregations are added by default on each aggregation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        /// <summary>
        /// An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ExtendedSimpleSearchFields { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// User roles granted access to the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grantedUserRoleIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> GrantedUserRoleIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Display pattern to use for rendering details when 0 results are returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingResultsDisplayPatterns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary MissingResultsDisplayPatterns { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAudit Audit { get; set; } = new UserAudit();

        /// <summary>
        /// Grants rights to all the users to view the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Channel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Channel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortField
    {
        /// <summary>
        /// The path of the field ({schemaId}.{fieldId})
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        /// <summary>
        /// The translated name of the field to be shown in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelCreateRequest
    {
        /// <summary>
        /// ID of the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Default sort order specified for the channel to sort the results of a content search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Order in which the channels should be displayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SortField> SortFields { get; set; } = new System.Collections.Generic.List<SortField>();

        /// <summary>
        /// Language specific channel names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }

        /// <summary>
        /// User roles granted access to the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grantedUserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GrantedUserRoleIds { get; set; }

        /// <summary>
        /// An optional list of aggregators. These aggregations are added by default on each aggregation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }

        /// <summary>
        /// An optional search filter. Limits the content document result set on each search and aggregation request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExtendedSimpleSearchFields { get; set; }

        /// <summary>
        /// Display pattern to use for rendering details when 0 results are returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingResultsDisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary MissingResultsDisplayPatterns { get; set; }

        /// <summary>
        /// Grants rights to all the users to view the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChannelCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelUpdateRequest
    {
        /// <summary>
        /// Default sort order specified for the channel to sort the results of a content search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Order in which the channels should be displayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SortField> SortFields { get; set; } = new System.Collections.Generic.List<SortField>();

        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }

        /// <summary>
        /// User roles granted access to the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grantedUserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GrantedUserRoleIds { get; set; }

        /// <summary>
        /// An optional list of aggregators. These aggregations are added by default on each aggregation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }

        /// <summary>
        /// An optional search filter. Limits the content document result set on each search and aggregation request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExtendedSimpleSearchFields { get; set; }

        /// <summary>
        /// Display pattern to use for rendering details when 0 results are returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingResultsDisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary MissingResultsDisplayPatterns { get; set; }

        /// <summary>
        /// Grants rights to all the users to view the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChannelUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldInfo
    {
        /// <summary>
        /// The path of the field ({schemaId}.{fieldId})
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// The type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Flag indicating if the search when aggregating the field is supported or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearch { get; set; }

        /// <summary>
        /// Identifies a static field not retrieved from the dynamic metadata fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("static", Required = Newtonsoft.Json.Required.Always)]
        public bool Static { get; set; }

        /// <summary>
        /// Path of the nested object, if the current field is part of a nested object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nestedPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NestedPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortFieldInfo
    {
        /// <summary>
        /// The path of the field ({schemaId}.{fieldId})
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        /// <summary>
        /// Identifies a static field not retrieved from the dynamic metadata fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("static", Required = Newtonsoft.Json.Required.Always)]
        public bool Static { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SortFieldInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortFieldInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail of a content permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetDetail : PermissionSetDetailOfContentRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for detail of permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetDetailOfContentRight
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfContentRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        /// <summary>
        /// When true this permission set will derogate all other configured permission sets on the Content Item or List Item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// The owner token ID. Defines the permission set owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OwnerTokenId { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetDetailOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rights assigned to a user role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionUserRoleRightsOfContentRight
    {
        /// <summary>
        /// The user role ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserRoleId { get; set; }

        /// <summary>
        /// Language specific user role names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class
        /// <br/>(ContentRight, MetadataRight, PermissionSetRight).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionUserRoleRightsOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rights assigned to a user role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionUserRoleRightsOfPermissionSetRight
    {
        /// <summary>
        /// The user role ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserRoleId { get; set; }

        /// <summary>
        /// Language specific user role names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class
        /// <br/>(ContentRight, MetadataRight, PermissionSetRight).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PermissionSetRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionUserRoleRightsOfPermissionSetRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfPermissionSetRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Permission set rights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PermissionSetRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Apply")]
        Apply = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manage")]
        Manage = 1,

    }

    /// <summary>
    /// Audit information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAuditDetail
    {
        /// <summary>
        /// The date on which the document was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CreationDate { get; set; }

        /// <summary>
        /// The last date on which the document was modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ModificationDate { get; set; }

        /// <summary>
        /// ID of the user who created the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CreatedByUser { get; set; }

        /// <summary>
        /// ID of the last user who modified the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ModifiedByUser { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAuditDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuditDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// User's Picturepark ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// User's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the user (doubles as username).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Marks a user that was deleted from the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeleted { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a content permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetCreateRequest : PermissionSetCreateRequestOfContentRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetCreateRequestOfContentRight
    {
        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfContentRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        /// <summary>
        /// When true this permission set will derogate all other configured permission sets on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetCreateRequestOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetCreateRequestOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleRightsOfContentRight
    {
        /// <summary>
        /// The user role id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        /// <summary>
        /// A permission container which can hold content, metadata or permission set rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleRightsOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleRightsOfPermissionSetRight
    {
        /// <summary>
        /// The user role id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        /// <summary>
        /// A permission container which can hold content, metadata or permission set rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PermissionSetRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleRightsOfPermissionSetRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsOfPermissionSetRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update a content permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetUpdateRequest : PermissionSetUpdateRequestOfContentRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for permission set update requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetUpdateRequestOfContentRight
    {
        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfContentRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetUpdateRequestOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetUpdateRequestOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to transfer the ownership of a permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetOwnershipTransferRequest
    {
        /// <summary>
        /// The ID of the user to whom the permission set ownership should be transferred to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetOwnershipTransferRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetOwnershipTransferRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response to a bulk operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkResponse
    {
        /// <summary>
        /// Rows of the bulk response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkResponseRow> Rows { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Row information of a bulk response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkResponseRow
    {
        /// <summary>
        /// ID of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Version of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }

        /// <summary>
        /// Eventual error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// True if item successfully saved. False otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }

        /// <summary>
        /// Returned status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkResponseRow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponseRow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create multiple content permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetCreateManyRequest
    {
        /// <summary>
        /// Content permission set update requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentPermissionSetCreateRequest> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple content permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetUpdateManyRequest
    {
        /// <summary>
        /// Content permission sets update requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentPermissionSetUpdateRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update a content permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionSetUpdateRequestItem : PermissionSetUpdateRequestItemOfContentRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionSetUpdateRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetUpdateRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for permission set update requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetUpdateRequestItemOfContentRight : PermissionSetUpdateRequestOfContentRight
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetUpdateRequestItemOfContentRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetUpdateRequestItemOfContentRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete multiple permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetDeleteManyRequest
    {
        /// <summary>
        /// Permission set IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to transfer the ownership of multiple permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetOwnershipTransferManyRequest
    {
        /// <summary>
        /// Permission set ownership transfer requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionSetOwnershipTransferItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetOwnershipTransferManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetOwnershipTransferManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetOwnershipTransferItem : PermissionSetOwnershipTransferRequest
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetOwnershipTransferItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetOwnershipTransferItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rights that the current user has on a permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetUserPermissionRights
    {
        /// <summary>
        /// Permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }

        /// <summary>
        /// List of rights on the permission set specified by PermissionSetId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PermissionSetRight> PermissionSetRights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetUserPermissionRights FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetUserPermissionRights>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of a permission set search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetSearchResult : SearchBehaviorBaseResultOfPermissionSet
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfPermissionSet : BaseResultOfPermissionSet
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfPermissionSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfPermissionSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfPermissionSet
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PermissionSet> Results { get; set; } = new System.Collections.Generic.List<PermissionSet>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfPermissionSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfPermissionSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSet
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// When true this permission set will derogate all other configured permission sets.
        /// <br/>Cannot be changed after creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionSetSearchRequest
    {
        /// <summary>
        /// The string used to query the data. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied in the specified order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the number of the returned schemas. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Filters based on the PermissionSetRight of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PermissionSetRight? RightFilter { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the result.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages defined in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDetail
    {
        /// <summary>
        /// The ID of the content schema. The SchemaType of the specified schema must be Content.
        /// <br/>The schema specifies the structure of the Content dictionary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// An optional list of IDs of the schemas that form the layers of the content.
        /// <br/>The SchemaType of the specified schemas must be Layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// All the IDs of the referenced list items (tagboxes) that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenReferenceIds { get; set; }

        /// <summary>
        /// All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
        /// <br/>They are referenced list items that reference at least a list item that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenIndirectReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("No longer set by the system, will be removed in the future.")]
        public System.Collections.Generic.ICollection<string> BrokenIndirectReferenceIds { get; set; }

        /// <summary>
        /// All the IDs of the contents or list items target of a relation that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenRelationTargetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenRelationTargetIds { get; set; }

        /// <summary>
        /// The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
        /// <br/>by the ContentSchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// The content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }

        /// <summary>
        /// The Outputs generated from the content. They identifies the rendered files generated by the system.
        /// <br/>They are available only for file base contents, and they depends on the output formats configured in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Output> Outputs { get; set; }

        /// <summary>
        /// The id of related DisplayContent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayContentId { get; set; }

        /// <summary>
        /// The Outputs generated from the display content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentOutputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Output> DisplayContentOutputs { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        /// <summary>
        /// The owner token ID. Defines the content owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OwnerTokenId { get; set; }

        /// <summary>
        /// The resolved owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        /// <summary>
        /// Content type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        /// <summary>
        /// Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }

        /// <summary>
        /// The actual lifecycle value of the content. Becomes Inactive when the content is deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// List of content rights the user has on this content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> ContentRights { get; set; }

        /// <summary>
        /// Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Activity Activity { get; set; }

        /// <summary>
        /// The number of historized versions of the content. Contains null if
        /// <br/>(i) not requested by using HistoricVersionCount resolve behavior,
        /// <br/>(ii) user lacks ManageHistoricVersions right on the content,
        /// <br/>(iii) user lacks ManageContent user right,
        /// <br/>(iv) historic versioning is disabled or
        /// <br/>(v) content is a virtual item (ContentType is Virtual).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historicVersionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HistoricVersionCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDetail", typeof(OutputDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Output
    {
        /// <summary>
        /// The ID of the output. Can be null for dynamic outputs which are not rendered yet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the output format this output represents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        /// <summary>
        /// The ID of the content for which this output has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// The rendering state of the output file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputRenderingState RenderingState { get; set; }

        /// <summary>
        /// Detail of the output that are format dependent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDataBase Detail { get; set; }

        /// <summary>
        /// Date and time of the backup of the output file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backupTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? BackupTimestamp { get; set; }

        /// <summary>
        /// Number of rendering retry attempts left.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attemptsLeft", Required = Newtonsoft.Json.Required.Always)]
        public int AttemptsLeft { get; set; }

        /// <summary>
        /// Version counter incremented every time this output is rendered (or in case of Original when new original is uploaded).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Always)]
        public int FileVersion { get; set; }

        /// <summary>
        /// Whether this Output belongs to a dynamic OutputFormat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicRendering", Required = Newtonsoft.Json.Required.Always)]
        public bool DynamicRendering { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Output FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputRenderingState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Skipped")]
        Skipped = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NoLicense")]
        NoLicense = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RerenderRequested")]
        RerenderRequested = 5,

    }

    /// <summary>
    /// Base class for the output detail dependent on the file format.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDataImage", typeof(OutputDataImage))]
    [JsonInheritanceAttribute("OutputDataAudio", typeof(OutputDataAudio))]
    [JsonInheritanceAttribute("OutputDataVideo", typeof(OutputDataVideo))]
    [JsonInheritanceAttribute("OutputDataDocument", typeof(OutputDataDocument))]
    [JsonInheritanceAttribute("OutputDataVector", typeof(OutputDataVector))]
    [JsonInheritanceAttribute("OutputDataDefault", typeof(OutputDataDefault))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class OutputDataBase
    {
        /// <summary>
        /// The extension of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }

        /// <summary>
        /// The path where the file is stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

        /// <summary>
        /// The size of the file in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }

        /// <summary>
        /// The SHA-1 hash of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }

        /// <summary>
        /// The original filename of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output information for an image file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataImage : OutputDataBase
    {
        /// <summary>
        /// The width of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataImage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataImage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output information for an audio file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataAudio : OutputDataBase
    {
        /// <summary>
        /// Duration of the audio stream in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DurationInSeconds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataAudio FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataAudio>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output information for a video file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataVideo : OutputDataBase
    {
        /// <summary>
        /// Duration of the video in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float DurationInSeconds { get; set; }

        /// <summary>
        /// With of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Height of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// The sprites making up the key frames of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sprite> Sprites { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataVideo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataVideo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The sprite of a video sprite
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sprite
    {
        /// <summary>
        /// The width of the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// Y coordinate of the sprite in the saved file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }

        /// <summary>
        /// X coordinate of the sprite in the saved file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }

        /// <summary>
        /// The starting point in time of the sprite in the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan Start { get; set; }

        /// <summary>
        /// The ending point in time of the sprite in the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan End { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Sprite FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sprite>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output information for a document file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataDocument : OutputDataBase
    {
        /// <summary>
        /// Number of document's pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataDocument FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataDocument>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output information for a vector file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataVector : OutputDataBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataVector FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataVector>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Default output information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDataDefault : OutputDataBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDataDefault FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDataDefault>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Output detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputDetail : Output
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayValueDictionary : System.Collections.Generic.Dictionary<string, string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayValueDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Lifecycle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LifeCycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Activity
    {
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModificationDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Activity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Activity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProblemDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Values that represent thumbnail sizes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ThumbnailSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Small")]
        Small = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Large")]
        Large = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Preview")]
        Preview = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtraLarge")]
        ExtraLarge = 4,

    }

    /// <summary>
    /// Request to create a content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentCreateRequest
    {
        /// <summary>
        /// The ID of the content schema. The SchemaType of the specified schema must be Content.
        /// <br/>The schema specifies the structure of the Content dictionary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// An optional list of IDs of the schemas that form the layers of the content.
        /// <br/>The SchemaType of the specified schemas must be Layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by the ContentSchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
        /// <br/>The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }

        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update content metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadataUpdateRequest
    {
        /// <summary>
        /// An optional list of IDs of the schemas that should be updated/replaced based on the options below and Metadata provided.
        /// <br/>The SchemaType of the specified schemas must be Layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by
        /// <br/>the ContentSchemaId property. Updating the Content property is only possible for virtual items (contents
        /// <br/>whose ContentType is Virtual).
        /// <br/>Update of content data will be done only if this attribute has any data, i.e. if it's not null or empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
        /// <br/>The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// <br/>If there are no data for a specified LayerSchemaId, it is treated as empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// Options to modify the behavior for updating the layers.
        /// <br/>Merge: the content is updated so that the assigned layers to the content will be a merge of the ones specified in the LayerSchemaIds property
        /// <br/>and the ones already existing; existing assigned layers not specified in the property are kept and missing layers are assigned.
        /// <br/>Replace: the content is updated so that only the layers specified in the LayerSchemaIds property are assigned to the content;
        /// <br/>existing assigned layers not specified in the property are removed and missing layers are assigned.
        /// <br/>Defaults to Merge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemasUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption LayerSchemasUpdateOptions { get; set; } = Picturepark.SDK.V1.Contract.UpdateOption.Merge;

        /// <summary>
        /// Options to modify the behavior for updating the values of schemas.
        /// <br/>Merge: the values specified in the Metadata dictionary are merged to the existing values of the corresponding schema on the content.
        /// <br/>Replace: the values specified in the Metadata dictionary entirely replace any existing value of the corresponding schema on the content.
        /// <br/>Defaults to Merge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerFieldsUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption LayerFieldsUpdateOptions { get; set; } = Picturepark.SDK.V1.Contract.UpdateOption.Merge;

        /// <summary>
        /// Options to modify the behavior for updating the content.
        /// <br/>Merge: the values specified in the Content object are merged to the existing content.
        /// <br/>Replace: the values specified in the Content object entirely replace the content.
        /// <br/>Defaults to Merge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentFieldsUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption ContentFieldsUpdateOptions { get; set; } = Picturepark.SDK.V1.Contract.UpdateOption.Merge;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Controls the update of metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Merge")]
        Merge = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
        Replace = 1,

    }

    /// <summary>
    /// Request to update the permissions of a content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionsUpdateRequest
    {
        /// <summary>
        /// A list of content permission set IDs which control content permissions that will be updated on the content.
        /// <br/>These permissions control content accessibility for the users that do not own the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionsUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionsUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to transfer the content ownership
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentOwnershipTransferRequest
    {
        /// <summary>
        /// The ID of the user to whom the content ownership has to be transferred to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentOwnershipTransferRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentOwnershipTransferRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for CheckContentSchemaIdChangeRequest
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckContentSchemaIdChangeResult
    {
        /// <summary>
        /// List of operations which incur loss of data if carried out
        /// </summary>
        [Newtonsoft.Json.JsonProperty("problematicChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentSchemaChangeException> ProblematicChanges { get; set; }

        /// <summary>
        /// List of errors preventing validation of ContentSchema change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CheckContentSchemaIdChangeResultErrorItem> Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CheckContentSchemaIdChangeResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckContentSchemaIdChangeResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckContentSchemaIdChangeResultErrorItem
    {
        /// <summary>
        /// Request for which this error occured
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CheckContentSchemaIdChangeRequestItem Request { get; set; }

        /// <summary>
        /// Error which occured when trying to check ContentSchema change (e.g. ContentNotFoundException or ContentPermissionException)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PictureparkException Exception { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CheckContentSchemaIdChangeResultErrorItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckContentSchemaIdChangeResultErrorItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Change of ContentSchemaId to check
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckContentSchemaIdChangeRequestItem
    {
        /// <summary>
        /// Content for which to check a ContentSchemaId change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// ContentSchemaId to change to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newContentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewContentSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CheckContentSchemaIdChangeRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckContentSchemaIdChangeRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to check if given changes to ContentSchemaId are possible without data loss
    /// <br/>due to restrictions (LayerSchemaIds) on assigned metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckContentSchemaIdChangeRequest
    {
        /// <summary>
        /// Operations which should be checked
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CheckContentSchemaIdChangeRequestItem> Requests { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CheckContentSchemaIdChangeRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckContentSchemaIdChangeRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to check if update of a content file incurs data loss
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentFileUpdateCheckRequest : ContentFileUpdateRequestBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFileUpdateCheckRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateCheckRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ContentFileUpdateRequestBase
    {
        /// <summary>
        /// ID of the file transfer to use to replace the content file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }

        /// <summary>
        /// Location of the file in a Azure blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ingestFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IngestFile IngestFile { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFileUpdateRequestBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateRequestBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// File location in an ingest container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IngestFile
    {
        /// <summary>
        /// Name of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContainerName { get; set; }

        /// <summary>
        /// Blob name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blobName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BlobName { get; set; }

        /// <summary>
        /// Overrides filename from blob storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileNameOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameOverride { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestFile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestFile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update a content file
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentFileUpdateRequest : ContentFileUpdateRequestBase
    {
        /// <summary>
        /// Whether ContentType is allowed to change. This is needed if the newly uploaded file is of a different type (e.g. ".jpg" is replaced by ".svg")
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowContentTypeChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowContentTypeChange { get; set; }

        /// <summary>
        /// When enabled, content file update will take place regardless of any layers that are not compatible with updated ContentSchemaId.
        /// <br/>For better safety, consider using AcceptableLayerUnassignments instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowAnyLayerUnassignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowAnyLayerUnassignment { get; set; }

        /// <summary>
        /// Allow removal of given Layers from Content if needed. Ignored when AllowAnyLayerUnassignment is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptableLayerUnassignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AcceptableLayerUnassignments { get; set; }

        /// <summary>
        /// Indicates if progress should be shown to user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFileUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result to a get content references operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentReferencesResult
    {
        /// <summary>
        /// List of references. Only available when requested in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferenceResult MetadataReferences { get; set; }

        /// <summary>
        /// List of share references
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentShareReferenceResult ShareReferences { get; set; }

        /// <summary>
        /// List of usages as the display content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentUsagesReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayContentUsagesReferenceResult DisplayContentUsagesReferences { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentReferencesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentReferencesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for getting references.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataReferenceResult : BaseResultOfMetadataReference
    {
        /// <summary>
        /// Indicates if any reference is originating from an item that the current user does not have access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReferencedByRestrictedItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReferencedByRestrictedItem { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataReferenceResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataReferenceResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfMetadataReference
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataReference> Results { get; set; } = new System.Collections.Generic.List<MetadataReference>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfMetadataReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfMetadataReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Reference to a metadata item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataReference
    {
        /// <summary>
        /// Target ID of reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetMetadataItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TargetMetadataItemId { get; set; }

        /// <summary>
        /// Indicates if the source of the reference is restricted because of permissions.
        /// <br/>If this is true and the SourceMetadataItemId property is filled, the user does not have the
        /// <br/>edit permission on the source metadata item. If the SourceMetadataItemId is null, the user also
        /// <br/>does not have the view permission on that item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRestricted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRestricted { get; set; }

        /// <summary>
        /// ID of the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceMetadataItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceMetadataItemId { get; set; }

        /// <summary>
        /// DocType of the source of the reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result class for share reference search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentShareReferenceResult : BaseResultOfContentShareReference
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentShareReferenceResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentShareReferenceResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfContentShareReference
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentShareReference> Results { get; set; } = new System.Collections.Generic.List<ContentShareReference>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfContentShareReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfContentShareReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Share information for a share referencing a content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentShareReference
    {
        /// <summary>
        /// ID of the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        /// <summary>
        /// Type of the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }

        /// <summary>
        /// The email address of the user who created the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentShareReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentShareReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShareType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Embed")]
        Embed = 1,

    }

    /// <summary>
    /// Result class for display content reference search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayContentUsagesReferenceResult : BaseResultOfString
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayContentUsagesReferenceResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayContentUsagesReferenceResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfString
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Results { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to get the references to a content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentReferencesRequest
    {
        /// <summary>
        /// Limits the number of the returned metadata references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferencesPagingRequest References { get; set; }

        /// <summary>
        /// Limits the number of the returned share references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingRequest Shares { get; set; }

        /// <summary>
        /// Limits the number of the returned display content usages by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentUsages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingRequest DisplayContentUsages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentReferencesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentReferencesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to get paginated metadata references
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataReferencesPagingRequest : PagingRequest
    {
        /// <summary>
        /// Set to true to check if any incoming references are originating from an item the current user does not have full access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fetchReferencedByRestrictedItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FetchReferencedByRestrictedItem { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataReferencesPagingRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataReferencesPagingRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to page data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingRequest
    {
        /// <summary>
        /// Limits the number of the returned schemas. Defaults to 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PagingRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagingRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of output resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputResolveResult
    {
        /// <summary>
        /// ID of output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// ID of output format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        /// <summary>
        /// ID of content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// Rendering state of output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputRenderingState RenderingState { get; set; }

        /// <summary>
        /// Whether this Output belongs to a dynamic OutputFormat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicRendering", Required = Newtonsoft.Json.Required.Always)]
        public bool DynamicRendering { get; set; }

        /// <summary>
        /// Size of file, if already known
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputResolveResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputResolveResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a content download link
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadLinkCreateRequest
    {
        /// <summary>
        /// List of content information to generate the download link
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentDownloadRequestItem> Contents { get; set; } = new System.Collections.Generic.List<ContentDownloadRequestItem>();

        /// <summary>
        /// Indicates if a progress message shall be shown to the user, notifying once the download is completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadLinkCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadLinkCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information needed to generate a content download link
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadRequestItem
    {
        /// <summary>
        /// ID of the content that is going to be downloaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// ID of the output format that is going to be downloaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Download link information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadLink
    {
        /// <summary>
        /// Token of the download, used to generate the url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadToken", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DownloadToken { get; set; }

        /// <summary>
        /// Url of the download link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DownloadUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create multiple contents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentCreateManyRequest
    {
        /// <summary>
        /// Allows creating contents that refer to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Items to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentCreateRequest> Items { get; set; } = new System.Collections.Generic.List<ContentCreateRequest>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update many contents metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadataUpdateManyRequest
    {
        /// <summary>
        /// Allows storing references to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Update items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentMetadataUpdateItem> Items { get; set; } = new System.Collections.Generic.List<ContentMetadataUpdateItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item to update content metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadataUpdateItem : ContentMetadataUpdateRequest
    {
        /// <summary>
        /// The ID of the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataUpdateItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataUpdateItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple contents permissions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionsUpdateManyRequest
    {
        /// <summary>
        /// Content permissions update items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentPermissionsUpdateItem> Items { get; set; } = new System.Collections.Generic.List<ContentPermissionsUpdateItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionsUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionsUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content permissions update item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPermissionsUpdateItem : ContentPermissionsUpdateRequest
    {
        /// <summary>
        /// ID of the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentPermissionsUpdateItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionsUpdateItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to transfer multiple contents ownerships
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentOwnershipTransferManyRequest
    {
        /// <summary>
        /// List of Content Permissions ownership transfer items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentOwnershipTransferItem> Items { get; set; } = new System.Collections.Generic.List<ContentOwnershipTransferItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentOwnershipTransferManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentOwnershipTransferManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Content ownership transfer item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentOwnershipTransferItem : ContentOwnershipTransferRequest
    {
        /// <summary>
        /// The content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentOwnershipTransferItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentOwnershipTransferItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete multiple contents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDeleteManyRequest
    {
        /// <summary>
        /// IDs of the contents to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// A value indicating whether references to the contents should be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete multiple contents based on a provided filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDeleteManyFilterRequest
    {
        /// <summary>
        /// Filters the contents that need to be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filterRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentFilterRequest FilterRequest { get; set; } = new ContentFilterRequest();

        /// <summary>
        /// A value indicating whether references to the content items should be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDeleteManyFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDeleteManyFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentFilterRequest
    {
        /// <summary>
        /// Limits the simple search fields to the fields available in the specified channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Only searches the specified language values. Defaults to all metadata languages of the language configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }

        /// <summary>
        /// The collection id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// An optional search filter. Limits the content document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the content document result set to that life cycle state. Defaults to ActiveOnly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }

        /// <summary>
        /// Filter the content document result set to those that have or not have broken references
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; }

        /// <summary>
        /// Limits the content document result set to specific ContentRights the user has
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> RightsFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LifeCycleFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ActiveOnly")]
        ActiveOnly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InactiveOnly")]
        InactiveOnly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ActiveInactiveOnly")]
        ActiveInactiveOnly = 3,

    }

    /// <summary>
    /// Filter items with broken or not broken dependencies
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrokenDependenciesFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotBrokenOnly")]
        NotBrokenOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BrokenOnly")]
        BrokenOnly = 2,

    }

    /// <summary>
    /// Request to restore multiple contents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRestoreManyRequest
    {
        /// <summary>
        /// IDs of the contents to restore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Allows creating contents that refer to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRestoreManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRestoreManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to get multiple contents' references
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentManyReferencesRequest
    {
        /// <summary>
        /// The IDs of the contents whose references need to be retrieved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Limits the number of the returned metadata references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferencesPagingRequest References { get; set; }

        /// <summary>
        /// Limits the number of the returned share references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingRequest Shares { get; set; }

        /// <summary>
        /// Limits the number of the returned contentIds referencing as DisplayContent by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentUsages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingRequest DisplayContentUsages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentManyReferencesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentManyReferencesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Resolves outputs available for given content ids.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputResolveManyRequest
    {
        /// <summary>
        /// The IDs of the contents whose outputs should to be retrieved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputResolveManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputResolveManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRepairByFilterRequest : ContentRepairRequestBase
    {
        /// <summary>
        /// Filter used to enumerate Contents to repair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentFilterRequest Filter { get; set; } = new ContentFilterRequest();

        /// <summary>
        /// Settings for specific contents (overwrites DefaultSettings)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repairSettingOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRepairRequestItem> RepairSettingOverrides { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRepairByFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepairByFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRepairRequestItem
    {
        /// <summary>
        /// Content to repair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// Options for this repair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentRepairSettings Settings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRepairRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepairRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRepairSettings
    {
        /// <summary>
        /// List of layers that can be unassigned (due to change of ContentSchemaId and LayerSchemaIds)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptableLayerUnassignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AcceptableLayerUnassignments { get; set; }

        /// <summary>
        /// Whether to enforce XmpWriteback for Outputs of Content (ignored if repair was not performed)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceInvalidateXmpWriteback", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceInvalidateXmpWriteback { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRepairSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepairSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ContentRepairByFilterRequest", typeof(ContentRepairByFilterRequest))]
    [JsonInheritanceAttribute("ContentRepairBatchRequest", typeof(ContentRepairBatchRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ContentRepairRequestBase
    {
        /// <summary>
        /// Settings to use if no specific settings for a requested Content were specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentRepairSettings DefaultSettings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRepairRequestBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepairRequestBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRepairBatchRequest : ContentRepairRequestBase
    {
        /// <summary>
        /// List of contents and options for repair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRepairRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRepairBatchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepairBatchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to batch update contents' fields based on content IDs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentFieldsBatchUpdateRequest : MetadataValuesChangeRequestBase
    {
        /// <summary>
        /// The IDs of the contents whose fields need to be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFieldsBatchUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFieldsBatchUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for the content metadata batch requests.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ContentFieldsBatchUpdateRequest", typeof(ContentFieldsBatchUpdateRequest))]
    [JsonInheritanceAttribute("ContentFieldsBatchUpdateFilterRequest", typeof(ContentFieldsBatchUpdateFilterRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class MetadataValuesChangeRequestBase
    {
        /// <summary>
        /// Changes that need to be applied to the existing content metadata. The same set of changes is applied to all contents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; } = new System.Collections.Generic.List<MetadataValuesChangeCommandBase>();

        /// <summary>
        /// Allows updating contents with references to list items or contents that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesChangeRequestBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeRequestBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The base class for metadata value change commands.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpdateCommand", typeof(MetadataValuesSchemaUpdateCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpsertCommand", typeof(MetadataValuesSchemaUpsertCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaRemoveCommand", typeof(MetadataValuesSchemaRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaReplaceCommand", typeof(MetadataValuesSchemaReplaceCommand))]
    [JsonInheritanceAttribute("MetadataValuesFieldRemoveCommand", typeof(MetadataValuesFieldRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemAddCommand", typeof(MetadataValuesSchemaItemAddCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemRemoveCommand", typeof(MetadataValuesSchemaItemRemoveCommand))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// The ID of the schema to which the operation scope is addressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesChangeCommandBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeCommandBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Updates schema values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaUpdateCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// An object containing the metadata values to add / update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; } = new object();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaUpdateCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpdateCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Adds or updates schema values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaUpsertCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// An object containing the metadata values to add / update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; } = new object();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaUpsertCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpsertCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes schema and all its values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaRemoveCommand : MetadataValuesChangeCommandBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaRemoveCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaRemoveCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Replaces schema values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaReplaceCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// An object containing the metadata values for the schema. The existing dictionary will be entirely overwritten.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; } = new object();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaReplaceCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaReplaceCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes a field and its value from the values of the specified schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesFieldRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// The path of the field to be removed within the specified schema (i.e. remove the street from the address of a person: fieldPath = "address.streetName", schemaId = "PersonLayer")
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldPath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesFieldRemoveCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesFieldRemoveCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Adds a list item to a FieldMultiTagbox field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaItemAddCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// The path of the field relative to the Content or Layer schema values defined by the schemaId property.
        /// <br/>(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer").
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldPath { get; set; }

        /// <summary>
        /// The field namespace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldNamespace { get; set; }

        /// <summary>
        /// The ID of the list item to be added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ReferenceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaItemAddCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemAddCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Removes a list item from a FieldMultiTagbox field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataValuesSchemaItemRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>
        /// The path of the field relative to the Content or Layer schema values defined by the schemaId property.
        /// <br/>(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer").
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldPath { get; set; }

        /// <summary>
        /// The field namespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldNamespace { get; set; }

        /// <summary>
        /// The ID of the list item to be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ReferenceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataValuesSchemaItemRemoveCommand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemRemoveCommand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to batch update contents' fields based on a filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentFieldsBatchUpdateFilterRequest : MetadataValuesChangeRequestBase
    {
        /// <summary>
        /// Filters the contents on which the change commands must be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filterRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentFilterRequest FilterRequest { get; set; } = new ContentFilterRequest();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentFieldsBatchUpdateFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFieldsBatchUpdateFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for content search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentSearchResult : SearchBehaviorWithAggregationBaseResultOfContent
    {
        /// <summary>
        /// Result of rights aggregation count requested in rightsAggregations in the ContentSearchRequest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightsAggregationsCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRightAggregationCount> RightsAggregationsCounts { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Combination of ContentRight and found document count
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRightAggregationCount
    {
        /// <summary>
        /// ContentRight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentRight ContentRight { get; set; }

        /// <summary>
        /// Found document count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRightAggregationCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRightAggregationCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfContent : SearchBehaviorBaseResultOfContent
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfContent : BaseResultOfContent
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfContent
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Content> Results { get; set; } = new System.Collections.Generic.List<Content>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Content
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        /// <summary>
        /// The id of the schema with schema type content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// The content type of this content. All except Virtual are binary files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        /// <summary>
        /// An optional id list of schemas with schema type layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Contains display values of the specified language, rendered according to the content schema's display pattern configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> DisplayValues { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// All the ids of the broken references (tagboxes)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenReferenceIds { get; set; }

        /// <summary>
        /// All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenIndirectReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("No longer set by the system, will be removed in the future.")]
        public System.Collections.Generic.ICollection<string> BrokenIndirectReferenceIds { get; set; }

        /// <summary>
        /// All the target ids of the broken relations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenRelationTargetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenRelationTargetIds { get; set; }

        /// <summary>
        /// Life cycle of content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// List of content rights the user has on this content. Values are returned only if related resolve behavior is requested in the search request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> ContentRights { get; set; }

        /// <summary>
        /// Id of the related display content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Content FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search contents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentSearchRequest : ContentAggregationOnChannelRequest
    {
        /// <summary>
        /// Limits the display values included in the search response. Defaults to all display values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DisplayPatternIds { get; set; }

        /// <summary>
        /// Sorts the search results. Sorting on a field not marked as Sortable in the Content schema will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Limits the contents to the ones the user has the specified ContentRights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> RightsFilter { get; set; }

        /// <summary>
        /// Returns the aggregated document counts to the ones the user has the specified ContentRights.
        /// <br/>Produces the rightsAggregationCounts on the ContentSearchResult. View will be ignored as the totalResults already gives this information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightsAggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentRight> RightsAggregations { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ContentSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// List of enums that allow additional resolutions on top of the standard Content result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolveBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentSearchResolveBehavior> ResolveBehaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Enum that allow additional resolutions on top of the standard Content result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentSearchResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Permissions")]
        Permissions = 0,

    }

    /// <summary>
    /// Request to aggregate contents based on the aggregators defined on a channel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentAggregationOnChannelRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// Limits the simple search fields to the fields available in the specified channel. Defaults to RootChannel.
        /// <br/>For the ContentAggregationOnChannelRequest only, the existing aggregation saved on the channel are retrieved and used to perform the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages defined in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Limit the search to the contents belonging to the specified collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// Limits the aggregation to the contents that have the specified life cycle state. Defaults to ActiveOnly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; } = Picturepark.SDK.V1.Contract.LifeCycleFilter.ActiveOnly;

        /// <summary>
        /// Limits the aggregation to the contents that have or not have broken references. By default it includes both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; } = Picturepark.SDK.V1.Contract.BrokenDependenciesFilter.All;

        /// <summary>
        /// Type of search to be performed: search only in metadata, only in the extracted fulltext from the file or both. Default to Metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; } = Picturepark.SDK.V1.Contract.ContentSearchType.Metadata;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentAggregationOnChannelRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAggregationOnChannelRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for an aggregation operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ObjectAggregationResult
    {
        /// <summary>
        /// How long did the search and aggregation took.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// Results of the aggregation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; } = new System.Collections.Generic.List<AggregationResult>();

        /// <summary>
        /// Search string used to query the data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ObjectAggregationResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectAggregationResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to aggregate contents based on the specified aggregators
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentAggregationRequest : ContentAggregationOnChannelRequest
    {
        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentAggregationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAggregationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricVersionSearchResult : BaseResultOfHistoricVersion
    {
        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HistoricVersionSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricVersionSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfHistoricVersion
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HistoricVersion> Results { get; set; } = new System.Collections.Generic.List<HistoricVersion>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfHistoricVersion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfHistoricVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricVersion
    {
        /// <summary>
        /// Sequential version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Always)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// The datetime when this version was replaced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replaced", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Replaced { get; set; }

        /// <summary>
        /// User who replaced this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        /// <summary>
        /// File name for this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// True if this version was created by XMP writeback (as the version without the mutation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByXmpWriteback", Required = Newtonsoft.Json.Required.Always)]
        public bool CreatedByXmpWriteback { get; set; }

        /// <summary>
        /// ID of the original output associated with this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOutputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalOutputId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HistoricVersion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricVersionSearchRequest
    {
        /// <summary>
        /// Will exclude the historic versions that were created by XMP writeback
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeXmpWritebackGenerated", Required = Newtonsoft.Json.Required.Always)]
        [System.Obsolete("XmpWriteback for Original is not supported, so this has no effect")]
        public bool ExcludeXmpWritebackGenerated { get; set; }

        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HistoricVersionSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricVersionSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a comment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comment : CommentEditable
    {
        /// <summary>
        /// Comment ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// ID of the content this comment is on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// ID of the parent comment, in case this comment is a reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Comment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentEditable
    {
        /// <summary>
        /// Text of the comment message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentCreateRequest : CommentEditable
    {
        /// <summary>
        /// ID of the parent comment, in case the comment should be a reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentSearchResult : BaseResultOfComment
    {
        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfComment
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Comment> Results { get; set; } = new System.Collections.Generic.List<Comment>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfComment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfComment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentSearchRequest
    {
        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// If set to true, the result set will be sorted in an ascending order based on time of when which comment was originally created, replies will be always in descending order.
        /// <br/>If false, the result set will be sorted in a descending order of when which comment was originally created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ascending", Required = Newtonsoft.Json.Required.Always)]
        public bool Ascending { get; set; }

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the CommentSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommentSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetDisplayContentRequest
    {
        /// <summary>
        /// Id of the content which is supposed to be a DisplayContent. Intentionally nullable, null on the the property means the 'unset' operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDisplayContentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDisplayContentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetDisplayContentsManyRequest
    {
        /// <summary>
        /// List of set display content items
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SetDisplayContentItem> Items { get; set; } = new System.Collections.Generic.List<SetDisplayContentItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDisplayContentsManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDisplayContentsManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Set display content item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetDisplayContentItem : SetDisplayContentRequest
    {
        /// <summary>
        /// The content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDisplayContentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDisplayContentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds results of the conversion preset template search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateSearchResult : SearchBehaviorBaseResultOfConversionPresetTemplate
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfConversionPresetTemplate : BaseResultOfConversionPresetTemplate
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfConversionPresetTemplate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfConversionPresetTemplate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfConversionPresetTemplate
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConversionPresetTemplate> Results { get; set; } = new System.Collections.Generic.List<ConversionPresetTemplate>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfConversionPresetTemplate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfConversionPresetTemplate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a conversion preset template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplate : ConversionPresetTemplateUpdateRequest
    {
        /// <summary>
        /// Conversion preset template ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The output format ID to which the conversion preset template is associated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information needed for conversion preset template update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateUpdateRequest
    {
        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Language specific descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// The template for the conversion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Conversion preset templates search request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateSearchRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages defined in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents the detail of a conversion preset template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateDetail : ConversionPresetTemplate
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information needed for conversion preset template creation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateCreateRequest : ConversionPresetTemplateUpdateRequest
    {
        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        /// <summary>
        /// The output format ID to which the conversion preset template is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to create multiple new conversion preset templates at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateCreateManyRequest
    {
        /// <summary>
        /// Conversion preset templates items to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversionPresetTemplateCreateRequest> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to modify multiple conversion preset templates at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateUpdateManyRequest
    {
        /// <summary>
        /// Conversion preset templates items to be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversionPresetTemplateUpdateManyRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents one item to be modified in a bulk update operation on conversion preset templates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateUpdateManyRequestItem : ConversionPresetTemplateUpdateRequest
    {
        /// <summary>
        /// ID of the conversion preset templates to modify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateUpdateManyRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateUpdateManyRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to remove multiple conversion preset templates at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPresetTemplateDeleteManyRequest
    {
        /// <summary>
        /// List of IDs of conversion preset templates to remove.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPresetTemplateDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPresetTemplateDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayValueStatus
    {
        /// <summary>
        /// The schema ids (of type Content or Layer) for which the re-rendering of the display values is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentOrLayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentOrLayerSchemaIds { get; set; }

        /// <summary>
        /// The schema ids (of type List) for which the re-rendering of the display values is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListSchemaIds { get; set; }

        /// <summary>
        /// The state of the display values compared to the schema structure (UpToDate = ok, Outdated = re-rendering needed).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayValuesState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayValueStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisplayValuesState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UpToDate")]
        UpToDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outdated")]
        Outdated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RerenderingInProgress")]
        RerenderingInProgress = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentHistory
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime DocumentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditHistory Audit { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentChangeAction Action { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentHistory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAuditHistory
    {
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ModificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAuditHistory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuditHistory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentChangeAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Activate")]
        Activate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Deactivate")]
        Deactivate = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentHistoryDifference
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("oldDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long OldDocumentVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("newDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long NewDocumentVersion { get; set; }

        /// <summary>
        /// Contains an RFC 6902 compatible patch that can be applied on the old document to get the new document.
        /// <br/>Use a library like jsondiffpatch.net (https://github.com/wbish/jsondiffpatch.net)
        /// <br/>or jsondiffpatch (https://github.com/benjamine/jsondiffpatch) to process this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Patch { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentHistoryDifference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistoryDifference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentHistorySearchResult
    {
        /// <summary>
        /// The upper bound of the total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public long MaxResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DocumentHistory> Results { get; set; } = new System.Collections.Generic.List<DocumentHistory>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentHistorySearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentHistorySearchRequest
    {
        /// <summary>
        /// Limits the start date of the search request. By default no limitation set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime From { get; set; }

        /// <summary>
        /// Limits the end date of the search request. By default no limitation set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime To { get; set; }

        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// To get a large amount of data, page token returned from the response can be used to get all data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Limits the search to a specific document ID. E.g. contentId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        /// <summary>
        /// The document version to search. Default to -1 to not limit to a specific document version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; } = -1L;

        /// <summary>
        /// Limits the search to a specific document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Sorts the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentHistorySearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an identity provider defined in IdentityServer and its Picturepark configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProvider : IdentityProviderEditable
    {
        /// <summary>
        /// Identity provider ID (has to match an existing IdP defined in IdentityServer)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Name of the identity provider as defined in IdentityServer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Display name of the identity provider as defined in IdentityServer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentityProvider FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityProvider>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProviderEditable
    {
        /// <summary>
        /// Mapping of identity provider claims to user attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claimMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdpClaimToUserAttributeMapping> ClaimMapping { get; set; }

        /// <summary>
        /// Name of the identity provider claim that holds group membership information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupClaimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupClaimType { get; set; }

        /// <summary>
        /// IdP (AD) group to user role ID mapping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdpGroupToUserRoleMapping> GroupMapping { get; set; }

        /// <summary>
        /// Optional user role ID that will be assigned to a user is none of the group mappings produce a match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fallbackUserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FallbackUserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentityProviderEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityProviderEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdpClaimToUserAttributeMapping
    {
        /// <summary>
        /// Claim type name coming from external identity provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimType { get; set; }

        /// <summary>
        /// Path to a user attribute to synchronize
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAttributePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAttributePath { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdpClaimToUserAttributeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdpClaimToUserAttributeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdpGroupToUserRoleMapping
    {
        /// <summary>
        /// Name of the group on external identity provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// User role ID as defined in CP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdpGroupToUserRoleMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdpGroupToUserRoleMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Basic information about an identity provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProviderBasicInfo
    {
        /// <summary>
        /// Identity provider ID (has to match an existing IdP defined in IdentityServer)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the identity provider as defined in IdentityServer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Display name of the identity provider as defined in IdentityServer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentityProviderBasicInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityProviderBasicInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The version view item for the environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionInfo
    {
        /// <summary>
        /// The manual file version of Picturepark.Contract.dll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }

        /// <summary>
        /// The GitVersionTask generated file product version of Picturepark.Configuration.dll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileProductVersion { get; set; }

        /// <summary>
        /// The current contract version stored in CustomerDoc / EnvironmentDoc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }

        /// <summary>
        /// The release version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }

        /// <summary>
        /// Cloud name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloudName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Customer configuration information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerInfo
    {
        /// <summary>
        /// The customer ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomerId { get; set; }

        /// <summary>
        /// The name of the customer instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Alias of the customer instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomerAlias { get; set; }

        /// <summary>
        /// The base URL of identity server to authenticate the user using OpenID Connect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityServerUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdentityServerUrl { get; set; }

        /// <summary>
        /// The base API URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ApiUrl { get; set; }

        /// <summary>
        /// Host for integrations (Service Providers)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("integrationHost", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IntegrationHost { get; set; }

        /// <summary>
        /// Information if the query details can be enabled when searching. For debug purposes only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableQueryDetails", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableQueryDetails { get; set; }

        /// <summary>
        /// Configured languages of customer instance (system, metadata, share, default).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageConfiguration", Required = Newtonsoft.Json.Required.Always)]
        public LanguageConfigurationInfo LanguageConfiguration { get; set; }

        /// <summary>
        /// Languages including translations for the configured system and metadata and share languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Language> Languages { get; set; } = new System.Collections.Generic.List<Language>();

        /// <summary>
        /// Configured rendering outputs including translations for the customer instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormats", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OutputFormatInfo> OutputFormats { get; set; } = new System.Collections.Generic.List<OutputFormatInfo>();

        /// <summary>
        /// Boost levels that can be applied to a metadata field to boost the the significance of the field in a search operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boostValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<double> BoostValues { get; set; } = new System.Collections.Generic.List<double>();

        /// <summary>
        /// Apps registered for this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerApp> Apps { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }

        /// <summary>
        /// Url to access Frontend service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Base bath to access logos of customer (including trailing slash), available images: name, full, small, background
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logosUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LogosUrl { get; set; }

        /// <summary>
        /// License options and states
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LicenseInfo LicenseInformation { get; set; } = new LicenseInfo();

        /// <summary>
        /// Customer settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerInfoSettings Settings { get; set; } = new CustomerInfoSettings();

        /// <summary>
        /// True if a dashboard overview template is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDashboard", Required = Newtonsoft.Json.Required.Always)]
        public bool HasDashboard { get; set; }

        /// <summary>
        /// Cloud name customer is located in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloudName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CloudName { get; set; }

        /// <summary>
        /// True if anonymous access to customer's UI is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymousAccessEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool AnonymousAccessEnabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageConfigurationInfo : LanguageConfiguration
    {
        /// <summary>
        /// Share languages based on defined ShareMail templates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareLanguages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ShareLanguages { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageConfigurationInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfigurationInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageConfiguration
    {
        /// <summary>
        /// A list of languages serving as system languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemLanguages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> SystemLanguages { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// A list of languages serving as metadata languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataLanguages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MetadataLanguages { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// The default language. Not the be confused with the metadata fallback language x-default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLanguage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DefaultLanguage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Language
    {
        /// <summary>
        /// Language translations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Name { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// IETF language tag. E.g en, en-US, de.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ietf", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Ietf { get; set; }

        /// <summary>
        /// Two letter ISO language code. E.g. en, de.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoLetterISOLanguageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TwoLetterISOLanguageName { get; set; }

        /// <summary>
        /// Three letter ISO language code. E.g. eng, deu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeLetterISOLanguageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeLetterISOLanguageName { get; set; }

        /// <summary>
        /// Region code of the language. E.g. US, DE, CH.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Language FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatInfo
    {
        /// <summary>
        /// Output ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Output translations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Format behaviors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatBehaviors Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Behaviors of OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatBehaviors
    {
        /// <summary>
        /// Behavior for DownloadDialog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadDialogBehavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DownloadDialogBehavior DownloadDialogBehavior { get; set; }

        /// <summary>
        /// Behavior when sharing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareOutputAccessBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatShareOutputAccessBehaviors ShareOutputAccessBehaviors { get; set; }

        /// <summary>
        /// Behavior for media editor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaEditorBehavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaEditorBehavior MediaEditorBehavior { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatBehaviors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatBehaviors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines behavior of an OutputFormat in DownloadDialog
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DownloadDialogBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ShowAlways")]
        ShowAlways = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShowMoreFormats")]
        ShowMoreFormats = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hide")]
        Hide = 2,

    }

    /// <summary>
    /// Behavior when sharing for OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatShareOutputAccessBehaviors
    {
        /// <summary>
        /// Behavior when sharing with Full.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("full", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccessBehavior Full { get; set; }

        /// <summary>
        /// Behavior when sharing with Preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccessBehavior Preview { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatShareOutputAccessBehaviors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatShareOutputAccessBehaviors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines behavior of OutputFormat in ShareAccess
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputAccessBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Include")]
        Include = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Exclude")]
        Exclude = 1,

    }

    /// <summary>
    /// Defines behavior of OutputFormat in Media editor
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaEditorBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Show")]
        Show = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hide")]
        Hide = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerApp
    {
        [Newtonsoft.Json.JsonProperty("appId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Description { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerApp FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerApp>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Customer license information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseInfo
    {
        /// <summary>
        /// State of content historic versioning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historicVersioningState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HistoricVersioningState HistoricVersioningState { get; set; }

        /// <summary>
        /// State of statistics features for Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentStatistics", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StatisticsLicenseState ContentStatistics { get; set; } = new StatisticsLicenseState();

        /// <summary>
        /// Licensing options for image optimization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageOptimization", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImageOptimizationLicenseState ImageOptimization { get; set; } = new ImageOptimizationLicenseState();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LicenseInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HistoricVersioningState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticsLicenseState
    {
        /// <summary>
        /// Defines whether the respective statistics are gathered periodically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Always)]
        public bool Collection { get; set; }

        /// <summary>
        /// Allows or prevents access to read endpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty("read", Required = Newtonsoft.Json.Required.Always)]
        public bool Read { get; set; }

        /// <summary>
        /// Allows or prevents access to write endpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty("write", Required = Newtonsoft.Json.Required.Always)]
        public bool Write { get; set; }

        /// <summary>
        /// Allows or prevents export of the respective statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export", Required = Newtonsoft.Json.Required.Always)]
        public bool Export { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatisticsLicenseState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatisticsLicenseState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageOptimizationLicenseState
    {
        /// <summary>
        /// Whether image optimization can be used when delivering embeds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embedDelivery", Required = Newtonsoft.Json.Required.Always)]
        public bool EmbedDelivery { get; set; }

        /// <summary>
        /// Whether edit output endpoint is available in API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiOutputEditing", Required = Newtonsoft.Json.Required.Always)]
        public bool ApiOutputEditing { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageOptimizationLicenseState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageOptimizationLicenseState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Customer settings within customer information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerInfoSettings
    {
        /// <summary>
        /// Default expiration time span as number of milliseconds that will be applied as default by the UI when creating a new Share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiDefaultShareExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UiDefaultShareExpirationTime { get; set; }

        /// <summary>
        /// Prefix to be used for the zip file created when downloading multiple contents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadPrefixName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DownloadPrefixName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerInfoSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerInfoSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemStatus
    {
        /// <summary>
        /// The status of the search indices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchIndicesStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusOfSearchIndexState> SearchIndicesStatus { get; set; }

        /// <summary>
        /// The status of the display values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValuesStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusOfDisplayValuesState> DisplayValuesStatus { get; set; }

        /// <summary>
        /// The status of the contents and list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusOfMetadataState> MetadataStatus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusOfSearchIndexState
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchIndexState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusOfSearchIndexState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusOfSearchIndexState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchIndexState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Green")]
        Green = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yellow")]
        Yellow = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Red")]
        Red = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusOfDisplayValuesState
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayValuesState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusOfDisplayValuesState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusOfDisplayValuesState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusOfMetadataState
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusOfMetadataState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusOfMetadataState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The state of the contents and list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetadataState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UpToDate")]
        UpToDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outdated")]
        Outdated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UpdateInProgress")]
        UpdateInProgress = 2,

    }

    /// <summary>
    /// Ingest container creation result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IngestContainerCreateResult
    {
        /// <summary>
        /// Name of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContainerName { get; set; }

        /// <summary>
        /// SAS token that allows uploading to the container.
        /// <br/>Note: The token is valid for at most 24h after which all files uploaded, but not imported will be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sasToken", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SasToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IngestContainerCreateResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IngestContainerCreateResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Requests to import all files from an ingest container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportAllFromContainerRequest : FileImportRequest
    {
        /// <summary>
        /// Import options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImportOptions Options { get; set; } = new ImportOptions();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportAllFromContainerRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportAllFromContainerRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Options for importing ingest containers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportOptions
    {
        /// <summary>
        /// Indicates of progress should be shown to user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        /// <summary>
        /// Indicates if a collection of the imported contents should be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }

        /// <summary>
        /// Name of the collection when CreateCollection is set to true.
        /// <br/>Mandatory if CreateCollection is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Import request for a file from an ingest container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileImportRequest
    {
        /// <summary>
        /// Layer Schemas to assign to content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Metadata to assign to content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        /// <summary>
        /// Permission set IDs to assign to content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }

        /// <summary>
        /// Display content to assign to content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileImportRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileImportRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Import specific files from an ingest container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportPartialFromContainerRequest
    {
        /// <summary>
        /// Items to import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FileImportWithFileNameOverrideRequest> Items { get; set; }

        /// <summary>
        /// Import options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImportOptions Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportPartialFromContainerRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportPartialFromContainerRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Import request for a file from an ingest container allowing to override the ingested file name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileImportWithFileNameOverrideRequest : FileImportRequest
    {
        /// <summary>
        /// Overrides filename from blob storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileNameOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameOverride { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileImportWithFileNameOverrideRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileImportWithFileNameOverrideRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Import specified urls.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportFromUrlsRequest
    {
        /// <summary>
        /// Items to import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, UrlImportRequest> Items { get; set; }

        /// <summary>
        /// Import options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImportOptions Options { get; set; } = new ImportOptions();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportFromUrlsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportFromUrlsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Import request for a URL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UrlImportRequest : FileImportWithFileNameOverrideRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UrlImportRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UrlImportRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List item detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemDetail
    {
        /// <summary>
        /// The list item ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the content schema. The SchemaType of the specified schema must be List.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema specified
        /// <br/>by the ContentSchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }

        /// <summary>
        /// All the IDs of the referenced list items (tagboxes) that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenReferenceIds { get; set; }

        /// <summary>
        /// All the IDs of the contents or list items target of a relation that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenRelationTargetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenRelationTargetIds { get; set; }

        /// <summary>
        /// All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
        /// <br/>They are referenced list items that reference at least a list item that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenIndirectReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("No longer set by the system, will be removed in the future.")]
        public System.Collections.Generic.ICollection<string> BrokenIndirectReferenceIds { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        /// <summary>
        /// Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Activity Activity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update an existing list item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemUpdateRequest
    {
        /// <summary>
        /// The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema of the list item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// Options to modify the behavior for updating the content.
        /// <br/>Merge: the values specified in the Content object are merged to the existing content.
        /// <br/>Replace: the values specified in the Content object entirely replace any existing content.
        /// <br/>Defaults to Merge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentFieldsUpdateOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateOption ContentFieldsUpdateOptions { get; set; } = Picturepark.SDK.V1.Contract.UpdateOption.Merge;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result from getting references to list items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemReferencesResult
    {
        /// <summary>
        /// List of references. Only available when requested in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferenceResult MetadataReferences { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemReferencesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemReferencesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to get the references to a list item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemReferencesRequest
    {
        /// <summary>
        /// Limits the number of the returned metadata references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferencesPagingRequest References { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemReferencesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemReferencesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a list item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemCreateRequest
    {
        /// <summary>
        /// The ID of the content schema. The SchemaType of the specified schema must be List.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create multiple list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemCreateManyRequest
    {
        /// <summary>
        /// Allows creating list items that refer to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Items to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ListItemCreateRequest> Items { get; set; } = new System.Collections.Generic.List<ListItemCreateRequest>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemUpdateManyRequest
    {
        /// <summary>
        /// Allows updating list items with references to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Items to be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ListItemUpdateItem> Items { get; set; } = new System.Collections.Generic.List<ListItemUpdateItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemUpdateItem : ListItemUpdateRequest
    {
        /// <summary>
        /// The list item id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemUpdateItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete multiple list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemDeleteManyRequest
    {
        /// <summary>
        /// IDs of the list items to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// A value indicating whether references to the list item should be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete multiple list items based on a provided filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemDeleteManyFilterRequest
    {
        /// <summary>
        /// Filters the list items that need to be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filterRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ListItemFilterRequest FilterRequest { get; set; } = new ListItemFilterRequest();

        /// <summary>
        /// A value indicating whether references to the list item should be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceReferenceRemoval", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceReferenceRemoval { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemDeleteManyFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDeleteManyFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to filter list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemFilterRequest
    {
        /// <summary>
        /// The string used to query the data. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional filter to limit the list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Broadens the search to include all schema descendant list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }

        /// <summary>
        /// Limits the search among the list items of the provided schemas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages defined in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Limits the search to the list items that have or not have broken references. By default it includes both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; } = Picturepark.SDK.V1.Contract.BrokenDependenciesFilter.All;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to restore multiple deleted list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemRestoreManyRequest
    {
        /// <summary>
        /// The IDs of the list items to restore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Allows restoring list items that refer to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemRestoreManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemRestoreManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to get the references to multiple list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemManyReferencesRequest
    {
        /// <summary>
        /// The IDs of the list items whose references need to be retrieved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Limits the number of the returned metadata references by setting paging information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataReferencesPagingRequest References { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemManyReferencesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemManyReferencesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to batch update list items' fields based on list item IDs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemFieldsBatchUpdateRequest
    {
        /// <summary>
        /// The ids of the list items whose fields need to be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ListItemIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Changes that need to be applied to the existing list items. The same set of changes is applied to all list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; } = new System.Collections.Generic.List<MetadataValuesChangeCommandBase>();

        /// <summary>
        /// Allows updating list items with references to list items or contents that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemFieldsBatchUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsBatchUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to batch update list items' fields based on a filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemFieldsBatchUpdateFilterRequest
    {
        /// <summary>
        /// Filters the list items on which the change commands must be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filterRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ListItemFilterRequest FilterRequest { get; set; } = new ListItemFilterRequest();

        /// <summary>
        /// Changes that need to be applied to the existing list items. The same set of changes is applied to all list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; } = new System.Collections.Generic.List<MetadataValuesChangeCommandBase>();

        /// <summary>
        /// Allow updating list items with references to list items or contents that do not exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemFieldsBatchUpdateFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsBatchUpdateFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for list item search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemSearchResult : SearchBehaviorWithAggregationBaseResultOfListItem
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfListItem : SearchBehaviorBaseResultOfListItem
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfListItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfListItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfListItem : BaseResultOfListItem
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfListItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfListItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfListItem
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ListItem> Results { get; set; } = new System.Collections.Generic.List<ListItem>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfListItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfListItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItem
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        /// <summary>
        /// The list item id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The id of the schema with schema type list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// Contains language specific display values, rendered according to the list schema's display pattern configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }

        /// <summary>
        /// The content data of the list item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }

        /// <summary>
        /// All the ids of the broken references (tagboxes)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenReferenceIds { get; set; }

        /// <summary>
        /// All the target ids of the broken relations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenRelationTargetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BrokenRelationTargetIds { get; set; }

        /// <summary>
        /// All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenIndirectReferenceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("No longer set by the system, will be removed in the future.")]
        public System.Collections.Generic.ICollection<string> BrokenIndirectReferenceIds { get; set; }

        /// <summary>
        /// LifeCycle of list item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemSearchRequest : ListItemSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ListItemSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// List of enums that control which parts of the list item are resolved and returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolveBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ListItemResolveBehavior> ResolveBehaviors { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to aggregate list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ListItemSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// Broadens the search to include all schema descendant list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }

        /// <summary>
        /// Limits the aggregation to the list items that have or not have broken references. By default it includes both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokenDependenciesFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokenDependenciesFilter BrokenDependenciesFilter { get; set; } = Picturepark.SDK.V1.Contract.BrokenDependenciesFilter.All;

        /// <summary>
        /// Limits the search among the list items of the provided schemas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages defined in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Limits the aggregation to the list items that have the specified life cycle state. Defaults to ActiveOnly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; } = Picturepark.SDK.V1.Contract.LifeCycleFilter.ActiveOnly;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemSearchAndAggregationBaseRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchAndAggregationBaseRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to aggregate list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListItemAggregationRequest : ListItemSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListItemAggregationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemAggregationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Results of live stream search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStreamSearchResult : BaseResultOfLiveStream
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStreamSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfLiveStream
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LiveStream> Results { get; set; } = new System.Collections.Generic.List<LiveStream>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfLiveStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfLiveStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStream
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("traceJob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStreamTraceJob TraceJob { get; set; }

        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStreamTraceJob
    {
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("apiClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiClientId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStreamTraceJob FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamTraceJob>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStreamSearchRequest
    {
        /// <summary>
        /// Sets the start date and time for results based on Timestamp attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime From { get; set; }

        /// <summary>
        /// Sets the end date and time for results based on Timestamp attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime To { get; set; }

        /// <summary>
        /// Optionally limits the result to only the specified scope type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// To get a large amount of data, page token returned from the response can be used to get all data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStreamSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The overall status of the contents and list items in comparison to the actual schemas' structure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataStatus
    {
        /// <summary>
        /// The schema ids (of type Content or Layer) for which the contents are outdated and need to be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentOrLayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentOrLayerSchemaIds { get; set; }

        /// <summary>
        /// The schema ids (of type List) for which the the list items are outdated and need to be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ListSchemaIds { get; set; }

        /// <summary>
        /// The global state of the Contents and ListItems compared to the schema structure (Green = ok, Red = update needed).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataState State { get; set; }

        /// <summary>
        /// The field ids that that cannot be used and needs to be cleaned up after updating the outdated contents and list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsToCleanup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> FieldIdsToCleanup { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Notification
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("recipientUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceDocType { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }

        [Newtonsoft.Json.JsonProperty("titleCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TitleCode TitleCode { get; set; }

        [Newtonsoft.Json.JsonProperty("messageCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageCode MessageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationDetailBase Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationState State { get; set; }

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationEventType EventType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Notification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Notification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TitleCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TransferInProgressTitle")]
        TransferInProgressTitle = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCompletedTitle")]
        TransferCompletedTitle = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgressTitle")]
        ImportInProgressTitle = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedTitle")]
        ImportCompletedTitle = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ShareNewShareTitle")]
        ShareNewShareTitle = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCancelledTitle")]
        TransferCancelledTitle = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelledTitle")]
        ImportCancelledTitle = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedWithErrors")]
        ImportCompletedWithErrors = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportInProgressTitle")]
        SchemaImportInProgressTitle = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportCompletedTitle")]
        SchemaImportCompletedTitle = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportFailedTitle")]
        SchemaImportFailedTitle = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UserRegisteredTitle")]
        UserRegisteredTitle = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NewUserRegisteredEmailSubject")]
        NewUserRegisteredEmailSubject = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"UserLockedEmailSubject")]
        UserLockedEmailSubject = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UserUnlockedEmailSubject")]
        UserUnlockedEmailSubject = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UserReviewedEmailSubject")]
        UserReviewedEmailSubject = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"UserInvitationEmailSubject")]
        UserInvitationEmailSubject = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivationRequest")]
        UserTriggeredDeactivationRequest = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivationRequestMailSubject")]
        UserTriggeredDeactivationRequestMailSubject = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexDraft")]
        IndexDraft = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCreate")]
        IndexCreate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexInactive")]
        IndexInactive = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexActive")]
        IndexActive = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexClosed")]
        IndexClosed = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexReindexInProgress")]
        IndexReindexInProgress = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCancelled")]
        IndexCancelled = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressDraft")]
        ReindexProgressDraft = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressInProgress")]
        ReindexProgressInProgress = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCompleted")]
        ReindexProgressCompleted = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCancelled")]
        ReindexProgressCancelled = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressFailed")]
        ReindexProgressFailed = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCompletedWithErrors")]
        ReindexProgressCompletedWithErrors = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditInProgress")]
        ContentBatchEditInProgress = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditCompleted")]
        ContentBatchEditCompleted = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditProgressFailed")]
        ContentBatchEditProgressFailed = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditProgressCompletedWithErrors")]
        ContentBatchEditProgressCompletedWithErrors = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditInProgress")]
        ListItemBatchEditInProgress = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditCompleted")]
        ListItemBatchEditCompleted = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditProgressFailed")]
        ListItemBatchEditProgressFailed = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditProgressCompletedWithErrors")]
        ListItemBatchEditProgressCompletedWithErrors = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditInProgress")]
        ContentOwnershipBatchEditInProgress = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditCompleted")]
        ContentOwnershipBatchEditCompleted = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditProgressFailed")]
        ContentOwnershipBatchEditProgressFailed = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditProgressCompletedWithErrors")]
        ContentOwnershipBatchEditProgressCompletedWithErrors = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditInProgress")]
        ContentPermissionsBatchEditInProgress = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditCompleted")]
        ContentPermissionsBatchEditCompleted = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditProgressFailed")]
        ContentPermissionsBatchEditProgressFailed = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditProgressCompletedWithErrors")]
        ContentPermissionsBatchEditProgressCompletedWithErrors = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyInProgress")]
        ListItemDeactivateManyInProgress = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyCompleted")]
        ListItemDeactivateManyCompleted = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyProgressFailed")]
        ListItemDeactivateManyProgressFailed = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyProgressCompletedWithErrors")]
        ListItemDeactivateManyProgressCompletedWithErrors = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyInProgress")]
        ContentDeactivateManyInProgress = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyCompleted")]
        ContentDeactivateManyCompleted = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyProgressFailed")]
        ContentDeactivateManyProgressFailed = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyProgressCompletedWithErrors")]
        ContentDeactivateManyProgressCompletedWithErrors = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBusinessProcessTitle")]
        ExternalBusinessProcessTitle = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsInProgress")]
        MetadataRelatedItemsInProgress = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsProgressFailed")]
        MetadataRelatedItemsProgressFailed = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsProgressCompletedWithErrors")]
        MetadataRelatedItemsProgressCompletedWithErrors = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsCompleted")]
        MetadataRelatedItemsCompleted = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingInProgress")]
        AutoTaggingInProgress = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingSucceeded")]
        AutoTaggingSucceeded = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingSucceededWithErrors")]
        AutoTaggingSucceededWithErrors = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingFailed")]
        AutoTaggingFailed = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingCancelled")]
        AutoTaggingCancelled = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyInProgress")]
        ContentUpdateManyInProgress = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyCompleted")]
        ContentUpdateManyCompleted = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyCompletedWithErrors")]
        ContentUpdateManyCompletedWithErrors = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyFailed")]
        ContentUpdateManyFailed = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaInProgress")]
        MetadataRelatedItemsBySchemaInProgress = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaFailed")]
        MetadataRelatedItemsBySchemaFailed = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaCompletedWithErrors")]
        MetadataRelatedItemsBySchemaCompletedWithErrors = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaCompleted")]
        MetadataRelatedItemsBySchemaCompleted = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateInProgress")]
        MetadataOutdatedItemsUpdateInProgress = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateCompleted")]
        MetadataOutdatedItemsUpdateCompleted = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateCompletedWithErrors")]
        MetadataOutdatedItemsUpdateCompletedWithErrors = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateFailed")]
        MetadataOutdatedItemsUpdateFailed = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingInProgress")]
        BatchRenderingInProgress = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingCompleted")]
        BatchRenderingCompleted = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingCompletedWithErrors")]
        BatchRenderingCompletedWithErrors = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingFailed")]
        BatchRenderingFailed = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessRuleTitle")]
        BusinessRuleTitle = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportDraft")]
        StatisticsExportDraft = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportInProgress")]
        StatisticsExportInProgress = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportCompleted")]
        StatisticsExportCompleted = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportFailed")]
        StatisticsExportFailed = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportCancelled")]
        StatisticsExportCancelled = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"NewComment")]
        NewComment = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestInProgress")]
        IngestInProgress = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCompleted")]
        IngestCompleted = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestFailed")]
        IngestFailed = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCompletedWithErrors")]
        IngestCompletedWithErrors = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCancelled")]
        IngestCancelled = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"UserEmailConflictSolved")]
        UserEmailConflictSolved = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"UserEmailConflictSolvedSubject")]
        UserEmailConflictSolvedSubject = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"SupportUserDeactivation")]
        SupportUserDeactivation = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileInProgress")]
        IngestReplaceFileInProgress = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileCompleted")]
        IngestReplaceFileCompleted = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileFailed")]
        IngestReplaceFileFailed = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileCancelled")]
        IngestReplaceFileCancelled = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportFailedTitle")]
        ImportFailedTitle = 101,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TransferInProgressMessage")]
        TransferInProgressMessage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCompletedMessage")]
        TransferCompletedMessage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgressMessage")]
        ImportInProgressMessage = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedMessage")]
        ImportCompletedMessage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ShareNewShareMessage")]
        ShareNewShareMessage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCancelledMessage")]
        TransferCancelledMessage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelledMessage")]
        ImportCancelledMessage = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportFailedMessage")]
        ImportFailedMessage = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferInProgressWithFailedMessage")]
        TransferInProgressWithFailedMessage = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCompletedWithFailedMessage")]
        TransferCompletedWithFailedMessage = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCancelledWithFailedMessage")]
        TransferCancelledWithFailedMessage = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgressWithFailedMessage")]
        ImportInProgressWithFailedMessage = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedWithFailedMessage")]
        ImportCompletedWithFailedMessage = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelledWithFailedMessage")]
        ImportCancelledWithFailedMessage = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportInProgressMessage")]
        SchemaImportInProgressMessage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportCompletedMessage")]
        SchemaImportCompletedMessage = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SchemaImportFailedMessage")]
        SchemaImportFailedMessage = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UserRegisteredMessage")]
        UserRegisteredMessage = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UserLockedMessage")]
        UserLockedMessage = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UserReviewedMessage")]
        UserReviewedMessage = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexDraft")]
        IndexDraft = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCreate")]
        IndexCreate = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexInactive")]
        IndexInactive = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexActive")]
        IndexActive = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexClosed")]
        IndexClosed = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexReindexInProgress")]
        IndexReindexInProgress = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"IndexCancelled")]
        IndexCancelled = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressDraft")]
        ReindexProgressDraft = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressInProgress")]
        ReindexProgressInProgress = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCompleted")]
        ReindexProgressCompleted = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCancelled")]
        ReindexProgressCancelled = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressFailed")]
        ReindexProgressFailed = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexProgressCompletedWithErrors")]
        ReindexProgressCompletedWithErrors = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditInProgress")]
        ContentBatchEditInProgress = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditCompleted")]
        ContentBatchEditCompleted = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditProgressFailed")]
        ContentBatchEditProgressFailed = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentBatchEditProgressCompletedWithErrors")]
        ContentBatchEditProgressCompletedWithErrors = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditInProgress")]
        ListItemBatchEditInProgress = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditCompleted")]
        ListItemBatchEditCompleted = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditProgressFailed")]
        ListItemBatchEditProgressFailed = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemBatchEditProgressCompletedWithErrors")]
        ListItemBatchEditProgressCompletedWithErrors = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditInProgress")]
        ContentOwnershipBatchEditInProgress = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditCompleted")]
        ContentOwnershipBatchEditCompleted = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditProgressFailed")]
        ContentOwnershipBatchEditProgressFailed = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentOwnershipBatchEditProgressCompletedWithErrors")]
        ContentOwnershipBatchEditProgressCompletedWithErrors = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditInProgress")]
        ContentPermissionsBatchEditInProgress = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditCompleted")]
        ContentPermissionsBatchEditCompleted = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditProgressFailed")]
        ContentPermissionsBatchEditProgressFailed = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentPermissionsBatchEditProgressCompletedWithErrors")]
        ContentPermissionsBatchEditProgressCompletedWithErrors = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivationRequestMessage")]
        UserTriggeredDeactivationRequestMessage = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"UserEmailConflictSolved")]
        UserEmailConflictSolved = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyInProgress")]
        ListItemDeactivateManyInProgress = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyCompleted")]
        ListItemDeactivateManyCompleted = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyProgressFailed")]
        ListItemDeactivateManyProgressFailed = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItemDeactivateManyProgressCompletedWithErrors")]
        ListItemDeactivateManyProgressCompletedWithErrors = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyInProgress")]
        ContentDeactivateManyInProgress = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyCompleted")]
        ContentDeactivateManyCompleted = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyProgressFailed")]
        ContentDeactivateManyProgressFailed = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentDeactivateManyProgressCompletedWithErrors")]
        ContentDeactivateManyProgressCompletedWithErrors = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBusinessProcessMessage")]
        ExternalBusinessProcessMessage = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsInProgress")]
        MetadataRelatedItemsInProgress = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsProgressFailed")]
        MetadataRelatedItemsProgressFailed = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsProgressCompletedWithErrors")]
        MetadataRelatedItemsProgressCompletedWithErrors = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsCompleted")]
        MetadataRelatedItemsCompleted = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingInProgress")]
        AutoTaggingInProgress = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingSucceeded")]
        AutoTaggingSucceeded = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingSucceededWithErrors")]
        AutoTaggingSucceededWithErrors = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingFailed")]
        AutoTaggingFailed = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoTaggingCancelled")]
        AutoTaggingCancelled = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyInProgress")]
        ContentUpdateManyInProgress = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyCompleted")]
        ContentUpdateManyCompleted = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyCompletedWithErrors")]
        ContentUpdateManyCompletedWithErrors = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ContentUpdateManyFailed")]
        ContentUpdateManyFailed = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaInProgress")]
        MetadataRelatedItemsBySchemaInProgress = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaFailed")]
        MetadataRelatedItemsBySchemaFailed = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaCompletedWithErrors")]
        MetadataRelatedItemsBySchemaCompletedWithErrors = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataRelatedItemsBySchemaCompleted")]
        MetadataRelatedItemsBySchemaCompleted = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateInProgress")]
        MetadataOutdatedItemsUpdateInProgress = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateCompleted")]
        MetadataOutdatedItemsUpdateCompleted = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateCompletedWithErrors")]
        MetadataOutdatedItemsUpdateCompletedWithErrors = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataOutdatedItemsUpdateFailed")]
        MetadataOutdatedItemsUpdateFailed = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingInProgress")]
        BatchRenderingInProgress = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingCompleted")]
        BatchRenderingCompleted = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingCompletedWithErrors")]
        BatchRenderingCompletedWithErrors = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"BatchRenderingFailed")]
        BatchRenderingFailed = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessRuleMessage")]
        BusinessRuleMessage = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportDraft")]
        StatisticsExportDraft = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportInProgress")]
        StatisticsExportInProgress = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportCompleted")]
        StatisticsExportCompleted = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportFailed")]
        StatisticsExportFailed = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"StatisticsExportCancelled")]
        StatisticsExportCancelled = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"NewComment")]
        NewComment = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestDataExtractionInProgress")]
        IngestDataExtractionInProgress = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestContentCreationInProgress")]
        IngestContentCreationInProgress = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCompleted")]
        IngestCompleted = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestFailed")]
        IngestFailed = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCompletedWithErrors")]
        IngestCompletedWithErrors = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestCancelled")]
        IngestCancelled = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileDataExtractionInProgress")]
        IngestReplaceFileDataExtractionInProgress = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileInProgress")]
        IngestReplaceFileInProgress = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileCompleted")]
        IngestReplaceFileCompleted = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileFailed")]
        IngestReplaceFileFailed = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"IngestReplaceFileCancelled")]
        IngestReplaceFileCancelled = 102,

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("NotificationDetailTransfer", typeof(NotificationDetailTransfer))]
    [JsonInheritanceAttribute("NotificationDetailTransferImport", typeof(NotificationDetailTransferImport))]
    [JsonInheritanceAttribute("NotificationDetailShare", typeof(NotificationDetailShare))]
    [JsonInheritanceAttribute("NotificationDetailSchemaImport", typeof(NotificationDetailSchemaImport))]
    [JsonInheritanceAttribute("NotificationDetailIndexReindexProgress", typeof(NotificationDetailIndexReindexProgress))]
    [JsonInheritanceAttribute("NotificationDetailUserRegistered", typeof(NotificationDetailUserRegistered))]
    [JsonInheritanceAttribute("NotificationDetailExternalBusinessProcess", typeof(NotificationDetailExternalBusinessProcess))]
    [JsonInheritanceAttribute("NotificationDetailBusinessRule", typeof(NotificationDetailBusinessRule))]
    [JsonInheritanceAttribute("NotificationDetailTagging", typeof(NotificationDetailTagging))]
    [JsonInheritanceAttribute("NotificationDetailBatchRendering", typeof(NotificationDetailBatchRendering))]
    [JsonInheritanceAttribute("NotificationDetailStatisticsExport", typeof(NotificationDetailStatisticsExport))]
    [JsonInheritanceAttribute("NotificationDetailMetadataItemCreateRelatedItems", typeof(NotificationDetailMetadataItemCreateRelatedItems))]
    [JsonInheritanceAttribute("NotificationDetailMetadataItemCreateRelatedItemsBySchema", typeof(NotificationDetailMetadataItemCreateRelatedItemsBySchema))]
    [JsonInheritanceAttribute("NotificationDetailMetadataItemUpdateOutdated", typeof(NotificationDetailMetadataItemUpdateOutdated))]
    [JsonInheritanceAttribute("NotificationDetailContentMetadataBatchEdit", typeof(NotificationDetailContentMetadataBatchEdit))]
    [JsonInheritanceAttribute("NotificationDetailContentOwnershipBatchEdit", typeof(NotificationDetailContentOwnershipBatchEdit))]
    [JsonInheritanceAttribute("NotificationDetailContentPermissionsBatchEdit", typeof(NotificationDetailContentPermissionsBatchEdit))]
    [JsonInheritanceAttribute("NotificationDetailContentDeactivation", typeof(NotificationDetailContentDeactivation))]
    [JsonInheritanceAttribute("NotificationDetailListItemMetadataBatchEdit", typeof(NotificationDetailListItemMetadataBatchEdit))]
    [JsonInheritanceAttribute("NotificationDetailListItemDeactivation", typeof(NotificationDetailListItemDeactivation))]
    [JsonInheritanceAttribute("NotificationDetailComment", typeof(NotificationDetailComment))]
    [JsonInheritanceAttribute("NotificationDetailContentIngest", typeof(NotificationDetailContentIngest))]
    [JsonInheritanceAttribute("NotificationDetailContentFileReplace", typeof(NotificationDetailContentFileReplace))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailTransfer : NotificationDetailTransferBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailTransferBase : NotificationDetailBusinessProcessBase
    {
        [Newtonsoft.Json.JsonProperty("fileProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FileProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("fileCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FileCount { get; set; }

        [Newtonsoft.Json.JsonProperty("failedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FailedCount { get; set; }

        [Newtonsoft.Json.JsonProperty("cancelledCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CancelledCount { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransferId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailTransferBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTransferBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailBusinessProcessBase : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BusinessProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("businessProcessLifeCycle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCycle BusinessProcessLifeCycle { get; set; }

        [Newtonsoft.Json.JsonProperty("supportsCancellation", Required = Newtonsoft.Json.Required.Always)]
        public bool SupportsCancellation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailBusinessProcessBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailBusinessProcessBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailTransferImport : NotificationDetailTransferBase
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailTransferImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTransferImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailShare : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ShareId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailShare FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailShare>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailSchemaImport : NotificationDetailBusinessProcessBase
    {
        [Newtonsoft.Json.JsonProperty("schemaCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SchemaCount { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SchemaProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ListItemCount { get; set; }

        [Newtonsoft.Json.JsonProperty("listItemProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ListItemProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("importedSchemaCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ImportedSchemaCount { get; set; }

        [Newtonsoft.Json.JsonProperty("skippedSchemaCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SkippedSchemaCount { get; set; }

        [Newtonsoft.Json.JsonProperty("importedListItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ImportedListItemCount { get; set; }

        [Newtonsoft.Json.JsonProperty("skippedListItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SkippedListItemCount { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public long RelatedItemCount { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedItemProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public long RelatedItemProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailSchemaImport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailSchemaImport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailIndexReindexProgress : NotificationDetailBusinessProcessBase
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IndexId { get; set; }

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Expected { get; set; }

        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Current { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailIndexReindexProgress FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailIndexReindexProgress>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailUserRegistered : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailUserRegistered FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailUserRegistered>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailExternalBusinessProcess : NotificationDetailBusinessProcessBase
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Title { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Message { get; set; }

        [Newtonsoft.Json.JsonProperty("navigationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NavigationLink { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailExternalBusinessProcess FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailExternalBusinessProcess>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailBusinessRule : NotificationDetailBase
    {
        /// <summary>
        /// Title of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Title { get; set; }

        /// <summary>
        /// Message of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Message { get; set; }

        /// <summary>
        /// Id of collection, if created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// Id of BusinessRule notification configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NotificationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailBusinessRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailBusinessRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailTagging : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailTagging FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTagging>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailProgressBase : NotificationDetailBusinessProcessBase
    {
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Succeeded { get; set; }

        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Failed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailProgressBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailProgressBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailBatchRendering : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailBatchRendering FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailBatchRendering>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailStatisticsExport : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailStatisticsExport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailStatisticsExport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailMetadataItemCreateRelatedItems : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailMetadataItemCreateRelatedItems FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailMetadataItemCreateRelatedItems>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailMetadataItemCreateRelatedItemsBySchema : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailMetadataItemCreateRelatedItemsBySchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailMetadataItemCreateRelatedItemsBySchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailMetadataItemUpdateOutdated : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailMetadataItemUpdateOutdated FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailMetadataItemUpdateOutdated>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentMetadataBatchEdit : NotificationDetailContentBatchEditBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentMetadataBatchEdit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentMetadataBatchEdit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailContentBatchEditBase : NotificationDetailProgressBase
    {
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentBatchEditBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentBatchEditBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentOwnershipBatchEdit : NotificationDetailContentBatchEditBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentOwnershipBatchEdit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentOwnershipBatchEdit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentPermissionsBatchEdit : NotificationDetailContentBatchEditBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentPermissionsBatchEdit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentPermissionsBatchEdit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentDeactivation : NotificationDetailMetadataItemDeactivationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentDeactivation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentDeactivation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationDetailMetadataItemDeactivationBase : NotificationDetailProgressBase
    {
        [Newtonsoft.Json.JsonProperty("referencingItemsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ReferencingItemsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("referencingItemsProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ReferencingItemsProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailMetadataItemDeactivationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailMetadataItemDeactivationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailListItemMetadataBatchEdit : NotificationDetailProgressBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailListItemMetadataBatchEdit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailListItemMetadataBatchEdit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailListItemDeactivation : NotificationDetailMetadataItemDeactivationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailListItemDeactivation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailListItemDeactivation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailComment : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommentNotificationReason Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("commenterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommenterName { get; set; }

        [Newtonsoft.Json.JsonProperty("commentMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailComment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailComment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Reason for a comment notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommentNotificationReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owned")]
        Owned = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Replied")]
        Replied = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mentioned")]
        Mentioned = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentIngest : NotificationDetailProgressBase
    {
        [Newtonsoft.Json.JsonProperty("dataExtractionProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DataExtractionProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentIngest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentIngest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationDetailContentFileReplace : NotificationDetailBusinessProcessBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationDetailContentFileReplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentFileReplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unread")]
        Unread = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Read")]
        Read = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Null")]
        Null = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationCompactResult : BaseResultOfNotification
    {
        [Newtonsoft.Json.JsonProperty("dataFetchStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime DataFetchStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationCompactResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationCompactResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfNotification
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Notification> Results { get; set; } = new System.Collections.Generic.List<Notification>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfNotification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfNotification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationSearchRequest : NotificationSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class NotificationSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSearchAndAggregationBaseRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSearchAndAggregationBaseRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationAggregationRequest : NotificationSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationAggregationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationAggregationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Email notification settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationsSettings
    {
        /// <summary>
        /// Settings for notification sources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, EmailNotificationsSourceSettings> Sources { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EmailNotificationsSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmailNotificationsSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Email notification settings for a specific notification source
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationsSourceSettings
    {
        /// <summary>
        /// Interval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationsInterval Interval { get; set; }

        /// <summary>
        /// Exclusions from the default set by DisableAll property.
        /// <br/>List of notification IDs which are excluded or included from the email, depending on the DisableAll property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Exclusions { get; set; }

        /// <summary>
        /// Receive all
        /// <br/>            
        /// <br/>When set to false, Exclusions property acts as a blacklist (all items are included by default).
        /// <br/>When set to true, Exclusions property acts as a whitelist (no items are included by default).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableAll", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableAll { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EmailNotificationsSourceSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmailNotificationsSourceSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Interval for email notifications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationsInterval
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hourly")]
        Hourly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"QuarterHourly")]
        QuarterHourly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryFiveMinutes")]
        EveryFiveMinutes = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Off")]
        Off = 4,

    }

    /// <summary>
    /// Notification that is available for email settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationType
    {
        /// <summary>
        /// ID of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Title of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Title { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to change the download file name pattern for multiple formats at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatDownloadFileNamePatternUpdateManyRequest
    {
        /// <summary>
        /// Download file name update requests to be processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OutputFormatDownloadFileNamePatternUpdateRequestItem> Items { get; set; } = new System.Collections.Generic.List<OutputFormatDownloadFileNamePatternUpdateRequestItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatDownloadFileNamePatternUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatDownloadFileNamePatternUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a change to the download file name pattern to one output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatDownloadFileNamePatternUpdateRequestItem
    {
        /// <summary>
        /// ID of the output format to set pattern for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The patterns to use per metadata language.
        /// <br/>The customer's default language is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Patterns { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatDownloadFileNamePatternUpdateRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatDownloadFileNamePatternUpdateRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetXmpWritebackStateRequest : XmpWritebackOptions
    {
        /// <summary>
        /// Indicates if XMP writeback shall be enabled for the format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetXmpWritebackStateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetXmpWritebackStateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines additional settings for XmpWriteback
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpWritebackOptions
    {
        /// <summary>
        /// Defines how data from XmpMappings interacts with unaltered Xmp data contained in originally uploaded file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mergeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public XmpWritebackMergeMode MergeMode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpWritebackOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpWritebackOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines how data from XmpMappings interacts with unaltered Xmp data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum XmpWritebackMergeMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MappingOnly")]
        MappingOnly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MergeWithOriginal")]
        MergeWithOriginal = 1,

    }

    /// <summary>
    /// Used to change the state of XMP writeback for multiple output formats at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetXmpWritebackStateManyRequest
    {
        /// <summary>
        /// XMP writeback state changes to be processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OutputFormatSetXmpWritebackStateRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetXmpWritebackStateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetXmpWritebackStateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a change to the XMP writeback state to one output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetXmpWritebackStateRequestItem : OutputFormatSetXmpWritebackStateRequest
    {
        /// <summary>
        /// ID of the output format to set XMP writeback state for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetXmpWritebackStateRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetXmpWritebackStateRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to change permission-related settings on an OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetPermissionRequest
    {
        /// <summary>
        /// Indicates if outputs of this format should be accessible for users not having AccessOriginal permission on the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetPermissionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetPermissionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to change permission-related settings on multiple OutputFormat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetPermissionManyRequest
    {
        /// <summary>
        /// Permission changes to be processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OutputFormatSetPermissionRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetPermissionManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetPermissionManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a change to permission-related settings of an OutputFormat&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatSetPermissionRequestItem : OutputFormatSetPermissionRequest
    {
        /// <summary>
        /// ID of the output format to set permission for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatSetPermissionRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatSetPermissionRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies for which content a given format should be rendered
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatRenderPreviewRequest
    {
        /// <summary>
        /// The content for which the format should be rendered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// The format which should be rendered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatRenderingSpecification OutputFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatRenderPreviewRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatRenderPreviewRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to specify how to render derived outputs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatRenderingSpecification
    {
        /// <summary>
        /// Which output format should be used as a source of data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOutputFormats SourceOutputFormats { get; set; }

        /// <summary>
        /// Information about the technical format of the data, e.g. JPEG, AAC or video still.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatBase Format { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatRenderingSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatRenderingSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines the source used for rendering an OutputFormat depending on the type of content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceOutputFormats
    {
        /// <summary>
        /// The source to be used for content of type Image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// The source to be used for content of type Video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Video { get; set; }

        /// <summary>
        /// The source to be used for content of type Document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }

        /// <summary>
        /// The source to be used for content of type Audio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audio { get; set; }

        /// <summary>
        /// The source to be used for content of type Vector
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vector { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SourceOutputFormats FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SourceOutputFormats>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OriginalFormat", typeof(OriginalFormat))]
    [JsonInheritanceAttribute("CopyFormat", typeof(CopyFormat))]
    [JsonInheritanceAttribute("JpegFormat", typeof(JpegFormat))]
    [JsonInheritanceAttribute("PngFormat", typeof(PngFormat))]
    [JsonInheritanceAttribute("TiffFormat", typeof(TiffFormat))]
    [JsonInheritanceAttribute("WebPFormat", typeof(WebPFormat))]
    [JsonInheritanceAttribute("AvifFormat", typeof(AvifFormat))]
    [JsonInheritanceAttribute("Mp4VideoFormat", typeof(Mp4VideoFormat))]
    [JsonInheritanceAttribute("VideoSpriteFormat", typeof(VideoSpriteFormat))]
    [JsonInheritanceAttribute("VideoStillFormat", typeof(VideoStillFormat))]
    [JsonInheritanceAttribute("AacAudioFormat", typeof(AacAudioFormat))]
    [JsonInheritanceAttribute("AudioStillFormat", typeof(AudioStillFormat))]
    [JsonInheritanceAttribute("Mp3AudioFormat", typeof(Mp3AudioFormat))]
    [JsonInheritanceAttribute("DocumentStillFormat", typeof(DocumentStillFormat))]
    [JsonInheritanceAttribute("PdfFormat", typeof(PdfFormat))]
    [JsonInheritanceAttribute("SvgFormat", typeof(SvgFormat))]
    [JsonInheritanceAttribute("VectorStillFormat", typeof(VectorStillFormat))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FormatWithFixedExtensionBase : FormatBase
    {
        /// <summary>
        /// The filename extension of the file produced by this Format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FormatWithFixedExtensionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatWithFixedExtensionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Special format that represents the original.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginalFormat : FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OriginalFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A format that, when rendered, simply copies the source file. Primarily intended for use with XmpWriteback.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CopyFormat : FormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CopyFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CopyFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for ImageFormats such as JPEG, PNG, TIFF, ...
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ImageFormatBase : FormatWithFixedExtensionBase
    {
        /// <summary>
        /// Color profile to use. Colorspace is derived from the chosen profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorProfile? ColorProfile { get; set; }

        /// <summary>
        /// The method of conversion for color spaces (e.g. CMYK to RGB). Further information can be found here: http://www.colourphil.co.uk/rendering_intents.shtml
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorTransformationIntent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorTransformationIntent ColorTransformationIntent { get; set; }

        /// <summary>
        /// Horizontal resolution in dpi (dots per inch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? HorizontalResolution { get; set; }

        /// <summary>
        /// Vertical resolution in dpi (dots per inch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? VerticalResolution { get; set; }

        /// <summary>
        /// Copy clipping paths from input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keepClippingPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool KeepClippingPath { get; set; }

        /// <summary>
        /// Allows resizing of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        /// <summary>
        /// A collection of actions to be applied during rendering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ImageActionBase> Actions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Available color profiles
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorProfile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AdobeRgb1998")]
        AdobeRgb1998 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AppleRgb")]
        AppleRgb = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ColorMatchRgb")]
        ColorMatchRgb = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EciRgbV1")]
        EciRgbV1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EciRgbV2")]
        EciRgbV2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Srgb")]
        Srgb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SrgbColorSpaceProfile")]
        SrgbColorSpaceProfile = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EuropeIsoCoatedFogra27")]
        EuropeIsoCoatedFogra27 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EuroscaleCoated")]
        EuroscaleCoated = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EuroscaleUncoated")]
        EuroscaleUncoated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoated")]
        IsoCoated = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoatedEciV2")]
        IsoCoatedEciV2 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2001Coated")]
        JapanColor2001Coated = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2001Uncoated")]
        JapanColor2001Uncoated = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanColor2002Newspaper")]
        JapanColor2002Newspaper = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"JapanWebCoated")]
        JapanWebCoated = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"UsSheetfedCoated")]
        UsSheetfedCoated = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UsSheetfedUncoated")]
        UsSheetfedUncoated = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UsWebCoatedSwop")]
        UsWebCoatedSwop = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UsWebUncoated")]
        UsWebUncoated = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoatedV2Grey1cBas")]
        IsoCoatedV2Grey1cBas = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"IsoCoated300EciV2")]
        IsoCoated300EciV2 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CoatedFogra27")]
        CoatedFogra27 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CoatedFogra39")]
        CoatedFogra39 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UncoatedFogra29")]
        UncoatedFogra29 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedFogra28")]
        WebCoatedFogra28 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedSwop2006Grade3")]
        WebCoatedSwop2006Grade3 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"WebCoatedSwop2006Grade5")]
        WebCoatedSwop2006Grade5 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Isonewspaper26v4")]
        Isonewspaper26v4 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Isonewspaper26v4Grey")]
        Isonewspaper26v4Grey = 29,

    }

    /// <summary>
    /// http://www.colourphil.co.uk/rendering_intents.shtml
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorTransformationIntent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RelativeColorimetricBpc")]
        RelativeColorimetricBpc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AbsoluteColorimetric")]
        AbsoluteColorimetric = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Perceptual")]
        Perceptual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RelativeColorimetric")]
        RelativeColorimetric = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Saturation")]
        Saturation = 4,

    }

    /// <summary>
    /// Specifies image resize parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResizeAction
    {
        /// <summary>
        /// Target width for the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        /// <summary>
        /// Target height for the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// Specifies additional resize behaviour.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResizeMode ResizeMode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResizeAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies how the dimensions of a ResizeAction are applied to the content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResizeMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fit")]
        Fit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Shrink")]
        Shrink = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Resize")]
        Resize = 2,

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AlphaHandlingAction", typeof(AlphaHandlingAction))]
    [JsonInheritanceAttribute("CropActionGeneric", typeof(CropActionGeneric))]
    [JsonInheritanceAttribute("CropAction", typeof(CropAction))]
    [JsonInheritanceAttribute("GravityBasedCropAction", typeof(GravityBasedCropAction))]
    [JsonInheritanceAttribute("RelativeCropAction", typeof(RelativeCropAction))]
    [JsonInheritanceAttribute("UnsharpenMaskAction", typeof(UnsharpenMaskAction))]
    [JsonInheritanceAttribute("WatermarkAction", typeof(WatermarkAction))]
    [JsonInheritanceAttribute("RotateAction", typeof(RotateAction))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ImageActionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageActionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageActionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows different forms of modifying alpha information in an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlphaHandlingAction : ImageActionBase
    {
        /// <summary>
        /// Specifies the kind of alpha handling to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alphaHandling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlphaHandling AlphaHandling { get; set; }

        /// <summary>
        /// Specifies potentially needed color information for alpha handling. Must be given in RGB hex format (8 bit per channel).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replacementRgbColorHexCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementRgbColorHexCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlphaHandlingAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaHandlingAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies the kind of AlphaHandling to be applied to an image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlphaHandling
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DiscardAlpha")]
        DiscardAlpha = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplaceAlpha")]
        ReplaceAlpha = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplaceInvertedAlpha")]
        ReplaceInvertedAlpha = 2,

    }

    /// <summary>
    /// Parameters for cropping actions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropActionGeneric : ImageActionBase
    {
        /// <summary>
        /// Defines position of cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CropPositionBase Position { get; set; }

        /// <summary>
        /// Defines size of cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CropSizeBase Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropActionGeneric FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropActionGeneric>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines position of cropping rectangle.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CropOriginAbsolute", typeof(CropOriginAbsolute))]
    [JsonInheritanceAttribute("CropCenterRelative", typeof(CropCenterRelative))]
    [JsonInheritanceAttribute("CropPositionGravity", typeof(CropPositionGravity))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropPositionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropPositionBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropPositionBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropOriginAbsolute : CropPositionBase
    {
        /// <summary>
        /// X-Coordinate of top left point of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int X { get; set; }

        /// <summary>
        /// Y-Coordinate of top left point of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropOriginAbsolute FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropOriginAbsolute>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropCenterRelative : CropPositionBase
    {
        /// <summary>
        /// Relative horizontal position of center for crop. 0.5 designates the center of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float X { get; set; }

        /// <summary>
        /// Relative vertical position of center for crop. 0.5 designates the center of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropCenterRelative FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropCenterRelative>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropPositionGravity : CropPositionBase
    {
        /// <summary>
        /// Gravity of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gravity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropGravity Gravity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropPositionGravity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropPositionGravity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CropGravity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NorthWest")]
        NorthWest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"North")]
        North = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NorthEast")]
        NorthEast = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"East")]
        East = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SouthEast")]
        SouthEast = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"South")]
        South = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SouthWest")]
        SouthWest = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"West")]
        West = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Center")]
        Center = 8,

    }

    /// <summary>
    /// Defines size of cropping rectangle.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CropSizeAbsolute", typeof(CropSizeAbsolute))]
    [JsonInheritanceAttribute("CropSizeRelative", typeof(CropSizeRelative))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropSizeBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropSizeAbsolute : CropSizeBase
    {
        /// <summary>
        /// Width of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Height of the cropping rectangle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeAbsolute FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeAbsolute>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropSizeRelative : CropSizeBase
    {
        /// <summary>
        /// Width of the cropping rectangle in range [0, 1].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Width { get; set; }

        /// <summary>
        /// Height of the cropping rectangle in range [0, 1].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public float Height { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropSizeRelative FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropSizeRelative>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CropActionAbsoluteSizeBase : CropActionGeneric
    {
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CropActionAbsoluteSizeBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropActionAbsoluteSizeBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image, weighing the cropping rectangle on a gravity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GravityBasedCropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("gravity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropGravity Gravity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GravityBasedCropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GravityBasedCropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows cropping an image, positioning the cropping rectangle relative to the width/height of the image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelativeCropAction : CropActionAbsoluteSizeBase
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelativeCropAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelativeCropAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Increases sharpness of an image by using the unsharp mask technique.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnsharpenMaskAction : ImageActionBase
    {
        /// <summary>
        /// Unsharp mask amount (the difference between blurred and original image).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Amount { get; set; }

        /// <summary>
        /// Blur radius used to produce unfocused version of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radius", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Radius { get; set; }

        /// <summary>
        /// The threshold value for the unsharp mask in range [0, 1]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Threshold { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnsharpenMaskAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsharpenMaskAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows rendering a watermark to an image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WatermarkAction : ImageActionBase
    {
        /// <summary>
        /// Identifies the image to be used as watermark
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkFilePath { get; set; }

        /// <summary>
        /// Margin to the left border of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginLeft { get; set; }

        /// <summary>
        /// Margin to the top of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginTop { get; set; }

        /// <summary>
        /// Margin to the right border of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginRight { get; set; }

        /// <summary>
        /// Margin to the bottom of the image, in pixels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marginBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginBottom { get; set; }

        /// <summary>
        /// Scales the opacity of the watermark
        /// </summary>
        [Newtonsoft.Json.JsonProperty("opacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Opacity { get; set; }

        /// <summary>
        /// Scales the watermark width according to the size of the final image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("widthRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float WidthRatio { get; set; }

        /// <summary>
        /// Scales the watermark height according to the size of the final image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("heightRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float HeightRatio { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WatermarkAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatermarkAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ImageAction that allows rotating an image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RotateAction : ImageActionBase
    {
        /// <summary>
        /// Degrees to rotate the image in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("degrees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Degrees { get; set; }

        /// <summary>
        /// Direction the rotation should be applied in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RotateDirection Direction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RotateAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RotateAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RotateDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clockwise")]
        Clockwise = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CounterClockwise")]
        CounterClockwise = 1,

    }

    /// <summary>
    /// Renders a JPEG image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JpegFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        /// <summary>
        /// Whether to use chroma subsampling or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chromaSubsamplingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChromaSubsamplingEnabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JpegFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JpegFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders a PNG image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PngFormat : ImageFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PngFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PngFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders a TIFF image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TiffFormat : ImageFormatBase
    {
        /// <summary>
        /// Specifies whether color channels should be premultiplied with alpha (associated alpha) or not (unassociated alpha).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alphaPremultiplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AlphaPremultiplied { get; set; }

        /// <summary>
        /// Specifies the compression type to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compressionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompressionType CompressionType { get; set; }

        /// <summary>
        /// Preserve (including size affecting changes) unspecified extraChannels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeUnspecifiedTiffExtraChannels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TiffFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TiffFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Available compression types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompressionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Lzw")]
        Lzw = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rle")]
        Rle = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Zip")]
        Zip = 3,

    }

    /// <summary>
    /// Renders a WebP image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebPFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 90.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WebPFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebPFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders an AVIF image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvifFormat : ImageFormatBase
    {
        /// <summary>
        /// Compression quality. Must be in range [0,100] and defaults to 90.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvifFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvifFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering video.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class VideoFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders H.264 in mp4 container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mp4VideoFormat : VideoFormatBase
    {
        /// <summary>
        /// Allows resizing of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        /// <summary>
        /// Gets or sets the encoding audio codec.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audioCodec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioFormatBase AudioCodec { get; set; }

        /// <summary>
        /// Gets or sets the encoding codec preset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preset Preset { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Mp4VideoFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp4VideoFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering audio.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AudioFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Video rendering preset, see http://dev.beandog.org/x264_preset_reference.html for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preset
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ultrafast")]
        Ultrafast = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"superfast")]
        Superfast = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"veryfast")]
        Veryfast = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"faster")]
        Faster = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fast")]
        Fast = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"slow")]
        Slow = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"slower")]
        Slower = 7,

    }

    /// <summary>
    /// Generates a sprite image of the input video.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoSpriteFormat : VideoFormatBase
    {
        /// <summary>
        /// Specifies the dimensions of a single frame in the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spriteResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction SpriteResizeAction { get; set; }

        /// <summary>
        /// Limit for the number of frames to generate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfSprites", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxNumberOfSprites { get; set; }

        /// <summary>
        /// JPEG-quality to use for the sprite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoSpriteFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoSpriteFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoStillFormat : VideoFormatBase
    {
        /// <summary>
        /// Specifies the position from which to produce the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positionInSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PositionInSeconds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies Aac encoding for the output and additional settings for the encoder.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AacAudioFormat : AudioFormatBase
    {
        /// <summary>
        /// Gets or sets the encoding profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Profile Profile { get; set; }

        /// <summary>
        /// Gets or sets the encoding coder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Coder Coder { get; set; }

        /// <summary>
        /// Gets or sets the bitrate of the encoding in kbps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableBitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VariableBitRate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AacAudioFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AacAudioFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Profile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"aac_low")]
        Aac_low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"mpeg2_aac_low")]
        Mpeg2_aac_low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"aac_ltp")]
        Aac_ltp = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"aac_main")]
        Aac_main = 3,

    }

    /// <summary>
    /// Audio coders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Coder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"twoloop")]
        Twoloop = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"anmr")]
        Anmr = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fast")]
        Fast = 2,

    }

    /// <summary>
    /// Generates a waveform image from an Audio source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioStillFormat : AudioFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Renders an MP3 audio file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mp3AudioFormat : AudioFormatBase
    {
        /// <summary>
        /// Gets or sets the encoding bitrate. This setting and Quality are mutually exclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or sets the encoding quality. This setting and Bitrate are mutually exclusive.
        /// <br/>Values can be set it range of 0 to 9, where a lower value is a higher quality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Mp3AudioFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp3AudioFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DocumentFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a document to a raster image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentStillFormat : DocumentFormatBase
    {
        /// <summary>
        /// Allows resizing of the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PdfFormat : DocumentFormatBase
    {
        /// <summary>
        /// Specifies compression quality used for ReduceFileSize.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jpegQuality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int JpegQuality { get; set; }

        /// <summary>
        /// Whether to linearize the output for fast web viewing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fastWebView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FastWebView { get; set; }

        /// <summary>
        /// Whether to apply measures to decrease output size or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reduceFileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReduceFileSize { get; set; }

        /// <summary>
        /// Whether to extract document full text from this output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extractFullText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExtractFullText { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PdfFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for rendering vector graphics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class VectorFormatBase : FormatWithFixedExtensionBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorFormatBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorFormatBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a PDF to SVG
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SvgFormat : VectorFormatBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SvgFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SvgFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Render a vector graphic to a raster image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorStillFormat : VectorFormatBase
    {
        /// <summary>
        /// Specifies output dimensions for raster operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorStillFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorStillFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatDetail : OutputFormat
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormat : OutputFormatEditable
    {
        /// <summary>
        /// Output format ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Marks if this is a system output format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Will be removed in future versions")]
        public bool System { get; set; }

        /// <summary>
        /// A dynamic output format is not rendered automatically, but only on demand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dynamic { get; set; }

        /// <summary>
        /// Specifies if output format should be taken into account during data extraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataExtraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Will be removed in future versions")]
        public bool DataExtraction { get; set; }

        /// <summary>
        /// Temporary outputs will not be backed up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temporary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Temporary { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents the editable part of the output format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatEditable : OutputFormatRenderingSpecification
    {
        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// How long should the dynamic outputs created from this format be kept.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retentionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan RetentionTime { get; set; }

        /// <summary>
        /// Optional patterns (liquid syntax) that produce the filename for item of this output format.
        /// <br/>If set, the customer's default language is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadFileNamePatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DownloadFileNamePatterns { get; set; }

        /// <summary>
        /// Indicates if outputs of this format should be accessible for users not having AccessOriginal permission on the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ViewForAll { get; set; }

        /// <summary>
        /// Indicates if metadata should be written into XMP header of outputs where applicable and configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableXmpWriteback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableXmpWriteback { get; set; }

        /// <summary>
        /// Defines additional settings for XmpWriteback
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmpWritebackOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpWritebackOptions XmpWritebackOptions { get; set; }

        /// <summary>
        /// Defines how the OutputFormat should behave for certain features (Download, Sharing, Media editing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatBehaviors Behaviors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to create multiple new output formats at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatCreateManyRequest
    {
        /// <summary>
        /// Output format items to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OutputFormat> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to modify multiple output formats at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatUpdateManyRequest
    {
        /// <summary>
        /// Output format items to be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OutputFormatUpdateManyRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents one item to be modified in a bulk update operation on output formats.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatUpdateManyRequestItem : OutputFormatEditable
    {
        /// <summary>
        /// ID of the output format to modify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatUpdateManyRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatUpdateManyRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Used to remove multiple output formats at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatDeleteManyRequest
    {
        /// <summary>
        /// List of IDs of output formats to remove.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputFormatDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputSearchResult : BaseResultOfOutput
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfOutput
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Output> Results { get; set; } = new System.Collections.Generic.List<Output>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputSearchRequest
    {
        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// List of Content ids you want to use to fetch the outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        /// <summary>
        /// The allowed rendering states of the outputs you want to fetch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingStates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OutputRenderingState> RenderingStates { get; set; }

        /// <summary>
        /// The file extension of the outputs you want to fetch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FileExtensions { get; set; }

        /// <summary>
        /// The output format id of the outputs you want to fetch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputResetRetryAttemptsRequest
    {
        /// <summary>
        /// List of output IDs you want to filter on. If this field is not empty, the other will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputIds { get; set; }

        /// <summary>
        /// List of Content IDs you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        /// <summary>
        /// The file extension of the outputs you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FileExtensions { get; set; }

        /// <summary>
        /// The IDs of the output formats you want to filter on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        /// <summary>
        /// Should the successful filter results also be reset (and subsequently re-rendered)?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeCompleted { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputResetRetryAttemptsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputResetRetryAttemptsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserProfile
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// First name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Language code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }

        /// <summary>
        /// Authorization state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        /// <summary>
        /// Indicates if the user is locked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// A list of user rights assigned to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<UserRight> UserRights { get; set; }

        /// <summary>
        /// A list of user role IDs assigned to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        /// <summary>
        /// Indicates if the user has not accepted the latest terms of consent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsConsentExpired", Required = Newtonsoft.Json.Required.Always)]
        public bool TermsConsentExpired { get; set; }

        /// <summary>
        /// A list of system user roles assigned to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemUserRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SystemUserRole> SystemUserRoles { get; set; }

        /// <summary>
        /// Indicates if the user has the developer flag set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeveloper", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeveloper { get; set; }

        /// <summary>
        /// Federated user is a user who is (currently) governed by an external identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFederated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFederated { get; set; }

        /// <summary>
        /// Anonymous user is the automatically logged in user if public access is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymousUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAnonymousUser { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserProfile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User's address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAddress
    {
        /// <summary>
        /// Company address line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        /// <summary>
        /// Company department.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Department { get; set; }

        /// <summary>
        /// Street and house number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// Additional address line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternativeAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternativeAddress { get; set; }

        /// <summary>
        /// ZIP code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zip { get; set; }

        /// <summary>
        /// City or town.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// Country code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAddress FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAddress>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// System user roles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SystemUserRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 0,

    }

    /// <summary>
    /// Request to update a user profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserProfileUpdateRequest
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// First name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Language code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserProfileUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail of a schema permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetDetail : PermissionSetDetailOfMetadataRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for detail of permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetDetailOfMetadataRight
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfMetadataRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        /// <summary>
        /// When true this permission set will derogate all other configured permission sets on the Content Item or List Item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// The owner token ID. Defines the permission set owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OwnerTokenId { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetDetailOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rights assigned to a user role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionUserRoleRightsOfMetadataRight
    {
        /// <summary>
        /// The user role ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UserRoleId { get; set; }

        /// <summary>
        /// Language specific user role names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class
        /// <br/>(ContentRight, MetadataRight, PermissionSetRight).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MetadataRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionUserRoleRightsOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a schema permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetCreateRequest : PermissionSetCreateRequestOfMetadataRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetCreateRequestOfMetadataRight
    {
        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfMetadataRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        /// <summary>
        /// When true this permission set will derogate all other configured permission sets on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetCreateRequestOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetCreateRequestOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleRightsOfMetadataRight
    {
        /// <summary>
        /// The user role id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }

        /// <summary>
        /// A permission container which can hold content, metadata or permission set rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MetadataRight> Rights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleRightsOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update a schema permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetUpdateRequest : PermissionSetUpdateRequestOfMetadataRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for permission set update requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetUpdateRequestOfMetadataRight
    {
        /// <summary>
        /// Language specific permission set names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// A list of content or metadata rights authorizing operations on Content Items or List Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfMetadataRight> UserRolesRights { get; set; }

        /// <summary>
        /// A list of permission set rights authorizing operations on this permission set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetUpdateRequestOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetUpdateRequestOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple schema permission sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetCreateManyRequest
    {
        /// <summary>
        /// Schema permission sets create requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemaPermissionSetCreateRequest> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple schema permissions sets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetUpdateManyRequest
    {
        /// <summary>
        /// Schema permission sets update requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemaPermissionSetUpdateRequestItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update a schema permission set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaPermissionSetUpdateRequestItem : PermissionSetUpdateRequestItemOfMetadataRight
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaPermissionSetUpdateRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetUpdateRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for permission set update requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class PermissionSetUpdateRequestItemOfMetadataRight : PermissionSetUpdateRequestOfMetadataRight
    {
        /// <summary>
        /// The permission set ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSetUpdateRequestItemOfMetadataRight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetUpdateRequestItemOfMetadataRight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaDetail
    {
        /// <summary>
        /// The schema ID. It is unique throughout the whole customer setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// System generated schema namespace. It contains the full schema hierarchy up to the root schema (i.e. [RootSchemaId].[ParentSchemaId].[SchemaId]).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaNamespace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaNamespace { get; set; }

        /// <summary>
        /// The parent schema ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }

        /// <summary>
        /// List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; } = new System.Collections.Generic.List<SchemaType>();

        /// <summary>
        /// Language specific schema names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific schema descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; } = new System.Collections.Generic.List<DisplayPattern>();

        /// <summary>
        /// The schema fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }

        /// <summary>
        /// A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
        /// <br/>Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }

        /// <summary>
        /// Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
        /// <br/>must be set to true. Multiple sorting is supported: they are applied in the specified order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
        /// <br/>the UI uses such information to show the available filters and grouped results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }

        /// <summary>
        /// Identifies a system provided schema. A system schema cannot be created, updated or deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }

        /// <summary>
        /// The owner token ID. Defines the schema owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OwnerTokenId { get; set; }

        /// <summary>
        /// Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        /// <summary>
        /// An optional list of schema permission set IDs which control schema permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }

        /// <summary>
        /// If the schema if of type Layer, the list contains the schemas with type Content
        /// <br/>that reference the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }

        /// <summary>
        /// The complete list of all descendant schema IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descendantSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DescendantSchemaIds { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        /// <summary>
        /// The number of fields generated by the schema in the search index for filtering, searching and sorting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchFieldCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchFieldCount SearchFieldCount { get; set; }

        /// <summary>
        /// Metadata protection options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataProtection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataProtection MetadataProtection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represent the template whose value will be resolved based on the actual content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisplayPattern
    {
        /// <summary>
        /// The template engine used for parsing the display patterns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateEngine", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateEngine TemplateEngine { get; set; }

        /// <summary>
        /// The display pattern type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayPatternType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }

        /// <summary>
        /// Language specific pattern templates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Templates { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisplayPattern FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPattern>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The template engine used for parsing the display patterns
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TemplateEngine
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DotLiquid")]
        DotLiquid = 0,

    }

    /// <summary>
    /// The field base class
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FieldBoolean", typeof(FieldBoolean))]
    [JsonInheritanceAttribute("FieldDate", typeof(FieldDate))]
    [JsonInheritanceAttribute("FieldDateTime", typeof(FieldDateTime))]
    [JsonInheritanceAttribute("FieldDateTimeArray", typeof(FieldDateTimeArray))]
    [JsonInheritanceAttribute("FieldDecimal", typeof(FieldDecimal))]
    [JsonInheritanceAttribute("FieldDictionary", typeof(FieldDictionary))]
    [JsonInheritanceAttribute("FieldDictionaryArray", typeof(FieldDictionaryArray))]
    [JsonInheritanceAttribute("FieldGeoPoint", typeof(FieldGeoPoint))]
    [JsonInheritanceAttribute("FieldTrigger", typeof(FieldTrigger))]
    [JsonInheritanceAttribute("FieldLong", typeof(FieldLong))]
    [JsonInheritanceAttribute("FieldLongArray", typeof(FieldLongArray))]
    [JsonInheritanceAttribute("FieldSingleFieldset", typeof(FieldSingleFieldset))]
    [JsonInheritanceAttribute("FieldMultiFieldset", typeof(FieldMultiFieldset))]
    [JsonInheritanceAttribute("FieldSingleTagbox", typeof(FieldSingleTagbox))]
    [JsonInheritanceAttribute("FieldMultiTagbox", typeof(FieldMultiTagbox))]
    [JsonInheritanceAttribute("FieldString", typeof(FieldString))]
    [JsonInheritanceAttribute("FieldStringArray", typeof(FieldStringArray))]
    [JsonInheritanceAttribute("FieldTranslatedString", typeof(FieldTranslatedString))]
    [JsonInheritanceAttribute("FieldSingleRelation", typeof(FieldSingleRelation))]
    [JsonInheritanceAttribute("FieldMultiRelation", typeof(FieldMultiRelation))]
    [JsonInheritanceAttribute("FieldDynamicView", typeof(FieldDynamicView))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FieldBase
    {
        /// <summary>
        /// The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The index ID is auto generated by the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }

        /// <summary>
        /// The field namespace is auto generated by the system: it carries the hierarchy information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }

        /// <summary>
        /// Language specific field names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific field descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// Defines if a field value is mandatory or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        /// <summary>
        /// Defines additional only UI-specific behavior
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UiFieldBehavior UiBehavior { get; set; }

        /// <summary>
        /// Field is stored for filtering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }

        /// <summary>
        /// Field is stored for simple search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }

        /// <summary>
        /// Field is stored for sorting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortable", Required = Newtonsoft.Json.Required.Always)]
        public bool Sortable { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiFieldBehavior
    {
        /// <summary>
        /// Indicates if a field value is required from UI side
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool SuggestRequired { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiFieldBehavior FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiFieldBehavior>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a boolean
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldBoolean : FieldBase
    {
        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldBoolean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBoolean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a date
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDate : FieldBase
    {
        /// <summary>
        /// The date format structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a date time
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDateTime : FieldBase
    {
        /// <summary>
        /// The date time format structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        /// <summary>
        /// If set to true, the date time value is automatically set when a content or list item is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initializeOnItemCreation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InitializeOnItemCreation { get; set; } = false;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDateTime FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTime>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple date time values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDateTimeArray : FieldDateTime
    {
        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDateTimeArray FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTimeArray>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a decimal value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDecimal : FieldBase
    {
        /// <summary>
        /// The decimal pattern structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// The minimum possible value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// The maximum possible value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDecimal FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDecimal>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a dictionary of values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDictionary : FieldBase
    {
        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple dictionaries' values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDictionaryArray : FieldDictionary
    {
        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDictionaryArray FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionaryArray>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a geo point
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldGeoPoint : FieldBase
    {
        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldGeoPoint FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGeoPoint>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A field that can be triggered, and store in such occasion the id of the user and the time that triggered it. The last user who triggered it and the last time in which it was triggered can be used for filtering or for
    /// <br/>simple search (if enabled on the field). Such information are stored in two inner fields: "triggeredBy" and "triggeredOn". In order to be triggered in a Content or ListItem metadata dictionary, the special '"_trigger": true'
    /// <br/>should be sent in the data of the field itself.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldTrigger : FieldBase
    {
        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldTrigger FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTrigger>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a long value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldLong : FieldBase
    {
        /// <summary>
        /// The long pattern structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// The minimum possible value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// The maximum possible value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldLong FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLong>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple long values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldLongArray : FieldLong
    {
        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldLongArray FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLongArray>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a single fieldset
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldSingleFieldset : FieldBase
    {
        /// <summary>
        /// The ID of the schema to be used as fieldset (it must be of type Struct).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldSingleFieldset FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleFieldset>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indexing information for a schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaIndexingInfo
    {
        /// <summary>
        /// A collection of indexing information for the fields of a schema
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldIndexingInfo> Fields { get; set; }

        /// <summary>
        /// Schema's display value Name is stored for filtering. Only available for tagbox fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeNameDisplayValueInFilters", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeNameDisplayValueInFilters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaIndexingInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIndexingInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indexing information for a field of a schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldIndexingInfo
    {
        /// <summary>
        /// The field ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Field is stored for filtering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }

        /// <summary>
        /// Field is stored for simple search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; } = 1D;

        /// <summary>
        /// Indexing information of schema's fields related to this field (if existing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relatedSchemaIndexing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo RelatedSchemaIndexing { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldIndexingInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldIndexingInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple fieldsets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldMultiFieldset : FieldBase
    {
        /// <summary>
        /// The ID of the schema to be used as fieldset (it must be of type Struct, and it cannot be a system schema).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldMultiFieldset FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiFieldset>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a single tagbox
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldSingleTagbox : FieldBase
    {
        /// <summary>
        /// The ID of the schema to be used as tagbox (it must be of type List).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        /// <summary>
        /// An optional filter to limit the list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Json serialized template used for creating new list item (no logic is implemented in backend).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }

        /// <summary>
        /// Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
        /// <br/>The information is only consumed by the client application. No actual logic is implemented in the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewModeDisplayPatternType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType ViewModeDisplayPatternType { get; set; } = Picturepark.SDK.V1.Contract.DisplayPatternType.Name;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldSingleTagbox FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleTagbox>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple tagboxes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldMultiTagbox : FieldBase
    {
        /// <summary>
        /// The ID of the schema to be used as tagbox (it must be of type List).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        /// <summary>
        /// An optional filter to limit the returned list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Json serialized template used for creating new list item (no logic is implemented in backend).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }

        /// <summary>
        /// Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
        /// <br/>The information is only consumed by the client application. No actual logic is implemented in the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewModeDisplayPatternType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType ViewModeDisplayPatternType { get; set; } = Picturepark.SDK.V1.Contract.DisplayPatternType.Name;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldMultiTagbox FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiTagbox>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a string value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldString : FieldBase
    {
        /// <summary>
        /// A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// Contains a regex validation pattern.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// The minimum string's length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }

        /// <summary>
        /// The maximum string's length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }

        /// <summary>
        /// Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
        /// <br/>The analyzers are applied only if the Index property is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indexAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> IndexAnalyzers { get; set; }

        /// <summary>
        /// Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
        /// <br/>The analyzers are applied only if the SimpleSearch property is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> SimpleSearchAnalyzers { get; set; }

        /// <summary>
        /// Defines that the field value must be displayed in a multiline component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultiLine { get; set; }

        /// <summary>
        /// If values are stored in this list, field values are limited to these ones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grantedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GrantedValues { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        /// <summary>
        /// Stores information on how values of this field should be rendered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StringRenderingType RenderingType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The analyzer base class
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("EdgeNGramAnalyzer", typeof(EdgeNGramAnalyzer))]
    [JsonInheritanceAttribute("LanguageAnalyzer", typeof(LanguageAnalyzer))]
    [JsonInheritanceAttribute("NGramAnalyzer", typeof(NGramAnalyzer))]
    [JsonInheritanceAttribute("PathHierarchyAnalyzer", typeof(PathHierarchyAnalyzer))]
    [JsonInheritanceAttribute("SimpleAnalyzer", typeof(SimpleAnalyzer))]
    [JsonInheritanceAttribute("NoDiacriticsAnalyzer", typeof(NoDiacriticsAnalyzer))]
    [JsonInheritanceAttribute("KeywordLowercaseAnalyzer", typeof(KeywordLowercaseAnalyzer))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class AnalyzerBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyzerBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyzerBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer using the ElasticSearch's EdgeNGram tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeNGramAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: EdgeNGram
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: edgengram.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EdgeNGramAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EdgeNGramAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer using an ElasticSearch's language tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: Language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LanguageAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer using the ElasticSearch's NGram tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NGramAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: NGram
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: ngram.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NGramAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer using the ElasticSearch's path hierarchy tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PathHierarchyAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: PathHierarchy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: pathhierarchy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PathHierarchyAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PathHierarchyAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer using a custom pattern tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimpleAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: Simple
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: simple.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer that removes diacritics from words and uses a custom pattern tokenizer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NoDiacriticsAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: NoDiacritics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: nodiacritics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NoDiacriticsAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoDiacriticsAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An analyzer that represents a lowercase normalizer on a keyword field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeywordLowercaseAnalyzer : AnalyzerBase
    {
        /// <summary>
        /// The analyzer type: KeywordLowercase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Analyzer Type { get; set; }

        /// <summary>
        /// The suffix for the analyzed field: keywordlowercase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeywordLowercaseAnalyzer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeywordLowercaseAnalyzer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Describes how a string value should be rendered
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StringRenderingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Markdown")]
        Markdown = 1,

    }

    /// <summary>
    /// The field used to store multiple string values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldStringArray : FieldString
    {
        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldStringArray FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldStringArray>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a translated string values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldTranslatedString : FieldBase
    {
        /// <summary>
        /// Contains a regex validation pattern.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// The minimum string's length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }

        /// <summary>
        /// The maximum string's length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }

        /// <summary>
        /// Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
        /// <br/>The analyzers are applied only if the Index property is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indexAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> IndexAnalyzers { get; set; }

        /// <summary>
        /// Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
        /// <br/>The analyzers are applied only if the SimpleSearch property is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchAnalyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyzerBase> SimpleSearchAnalyzers { get; set; }

        /// <summary>
        /// Defines that the field value must be displayed in a multiline component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultiLine { get; set; }

        /// <summary>
        /// Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.
        /// <br/>If Required is true, the field and all its metadata languages are required.
        /// <br/>If Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredMetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredMetadataLanguages { get; set; }

        /// <summary>
        /// A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Boost { get; set; } = 1D;

        /// <summary>
        /// Stores information on how values of this field should be rendered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StringRenderingType RenderingType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldTranslatedString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTranslatedString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store a single relation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldSingleRelation : FieldBase
    {
        /// <summary>
        /// The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        /// <summary>
        /// Defines the allowed elation types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RelationType> RelationTypes { get; set; } = new System.Collections.Generic.List<RelationType>();

        /// <summary>
        /// Settings for displaying purposes in the UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationUiSettings UiSettings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldSingleRelation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleRelation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defines a relation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationType
    {
        /// <summary>
        /// The ID of the relation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Language specific relation names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Defines the type of the document target of the relation. Currently supported: Content, ListItem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TargetDocType { get; set; }

        /// <summary>
        /// An optional filter to limit the documents of type TargetDocType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Ui settings for the single and multi relationship fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationUiSettings : ItemFieldUiSettingsViewItemBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationUiSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationUiSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ItemFieldUiSettingsViewItemBase
    {
        /// <summary>
        /// Maximum number of rows to be displayed in the List view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxListRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxListRows { get; set; }

        /// <summary>
        /// Maximum number of rows to be displayed in the Thumbnail views.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxThumbRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxThumbRows { get; set; }

        /// <summary>
        /// The view to be used when rendering the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemFieldViewMode View { get; set; } = Picturepark.SDK.V1.Contract.ItemFieldViewMode.List;

        /// <summary>
        /// Whether related content should be shown in UI download dialog
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showRelatedContentOnDownload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowRelatedContentOnDownload { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemFieldUiSettingsViewItemBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemFieldUiSettingsViewItemBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The view mode for related items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemFieldViewMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ThumbSmall")]
        ThumbSmall = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ThumbMedium")]
        ThumbMedium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ThumbLarge")]
        ThumbLarge = 3,

    }

    /// <summary>
    /// Ui settings for FieldDynamicView
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldUiSettings : ItemFieldUiSettingsViewItemBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldUiSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldUiSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field used to store multiple relations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldMultiRelation : FieldBase
    {
        /// <summary>
        /// The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SchemaId { get; set; }

        /// <summary>
        /// Indexing information of fields of the related schema identified by the SchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }

        /// <summary>
        /// The relation types supported by the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RelationType> RelationTypes { get; set; } = new System.Collections.Generic.List<RelationType>();

        /// <summary>
        /// The maximum number of items that can be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        /// <summary>
        /// Settings for displaying purposes in the UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationUiSettings UiSettings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldMultiRelation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiRelation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Stores a filter template which can be used to query for related items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDynamicView : FieldBase
    {
        /// <summary>
        /// Type of item this field points to. Restricted to Content at this time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TargetDocType { get; set; }

        /// <summary>
        /// Settings for displaying purposes in the UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUiSettings", Required = Newtonsoft.Json.Required.Always)]
        public DynamicViewFieldUiSettings ViewUiSettings { get; set; }

        /// <summary>
        /// Template to generate filter based on current item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filterTemplate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase FilterTemplate { get; set; }

        /// <summary>
        /// Specifies sorting to be used in search with FilterBase&gt; from FilterTemplate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; } = new System.Collections.Generic.List<SortInfo>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDynamicView FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDynamicView>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class to overwrite field's information
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FieldOverwriteSingleTagbox", typeof(FieldOverwriteSingleTagbox))]
    [JsonInheritanceAttribute("FieldOverwriteMultiTagbox", typeof(FieldOverwriteMultiTagbox))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class FieldOverwriteBase
    {
        /// <summary>
        /// The field's ID whose information need to be overwritten.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Defines if a field value is mandatory or not: this value will overwrite the existing Required value specified in the parent schema  if
        /// <br/>OverwriteRequired is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        /// <summary>
        /// Enable the overwriting of the Required property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool OverwriteRequired { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldOverwriteBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Overwritten information for FieldSingleTagbox
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldOverwriteSingleTagbox : FieldOverwriteBase
    {
        /// <summary>
        /// An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema  if
        /// <br/>OverwriteFilter is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable the overwriting of the Filter property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteFilter { get; set; }

        /// <summary>
        /// Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema  if
        /// <br/>OverwriteListItemCreateTemplate is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }

        /// <summary>
        /// Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteListItemCreateTemplate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteListItemCreateTemplate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldOverwriteSingleTagbox FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteSingleTagbox>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Overwritten information for FieldMultiTagbox
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldOverwriteMultiTagbox : FieldOverwriteBase
    {
        /// <summary>
        /// An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema if
        /// <br/>OverwriteFilter is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable the overwriting of the Filter property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteFilter { get; set; }

        /// <summary>
        /// Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema if
        /// <br/>OverwriteListItemCreateTemplate is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }

        /// <summary>
        /// Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteListItemCreateTemplate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteListItemCreateTemplate { get; set; }

        /// <summary>
        /// The maximum number of items that can be stored: this value will overwrite the existing MaximumItems value specified in the parent schema if
        /// <br/>OverwriteMaximumItems is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }

        /// <summary>
        /// Enable the overwriting of the MaximumItems property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteMaximumItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteMaximumItems { get; set; }

        /// <summary>
        /// The minimum number of items that must be stored: this value will overwrite the existing MinimumItems value specified in the parent schema if
        /// <br/>OverwriteMinimumItems is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }

        /// <summary>
        /// Enable the overwriting of the MinimumItems property of the field specified by the Id property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwriteMinimumItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverwriteMinimumItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldOverwriteMultiTagbox FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldOverwriteMultiTagbox>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Count information of fields in the search index for filtering, searching and sorting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchFieldCount
    {
        /// <summary>
        /// The number of fields created in the search index to store filter information for a schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indexedField", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedField { get; set; }

        /// <summary>
        /// The number of fields created in the search index to store search information for a schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchField", Required = Newtonsoft.Json.Required.Always)]
        public int SimpleSearchField { get; set; }

        /// <summary>
        /// The number of fields created in the search index to store sorting information for a schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortableField", Required = Newtonsoft.Json.Required.Always)]
        public int SortableField { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchFieldCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchFieldCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata protection options
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataProtection
    {
        /// <summary>
        /// Prevent creation of items in ContentSchemas/Lists or assignments of Layers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preventCreate", Required = Newtonsoft.Json.Required.Always)]
        public bool PreventCreate { get; set; }

        /// <summary>
        /// Prevent updating metadata associated with schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preventUpdate", Required = Newtonsoft.Json.Required.Always)]
        public bool PreventUpdate { get; set; }

        /// <summary>
        /// Prevent deletion of items in ContentSchemas/Lists or unassignments of Layers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preventDelete", Required = Newtonsoft.Json.Required.Always)]
        public bool PreventDelete { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataProtection FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataProtection>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Exists response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaExistsResponse
    {
        /// <summary>
        /// It indicates if it exists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exists", Required = Newtonsoft.Json.Required.Always)]
        public bool Exists { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaExistsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaExistsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response for a query if a field exists
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldExistsResponse
    {
        /// <summary>
        /// Indicates if a field with the specified ID currently exists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exists", Required = Newtonsoft.Json.Required.Always)]
        public bool Exists { get; set; }

        /// <summary>
        /// Indicates if a field with the specified ID was previously used.
        /// <br/>A field ID that was previously in use cannot be used again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previouslyUsed", Required = Newtonsoft.Json.Required.Always)]
        public bool PreviouslyUsed { get; set; }

        /// <summary>
        /// If the field does already exist or has already existed, this will contain the ID
        /// <br/>of the schema containing it. It case of parent-child schemas, a field ID
        /// <br/>has to be unique across the schema hierarchy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldExistsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldExistsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of a schema update operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaUpdateResult
    {
        /// <summary>
        /// The details of the updated schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaDetail Schema { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaUpdateResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update an existing schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaUpdateRequest
    {
        /// <summary>
        /// Language specific schema names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific schema descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; }

        /// <summary>
        /// The schema fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }

        /// <summary>
        /// A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
        /// <br/>Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }

        /// <summary>
        /// An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
        /// <br/>the UI uses such information to show the available filters and grouped results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }

        /// <summary>
        /// Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
        /// <br/>must be set to true. Multiple sorting is supported: they are applied in the specified order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        /// <summary>
        /// An optional list of schema permission set IDs which control schema permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }

        /// <summary>
        /// An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// If the schema if of type Layer, the list contains the schemas with type Content
        /// <br/>that reference the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }

        /// <summary>
        /// Metadata protection options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataProtection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataProtection MetadataProtection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of a schema delete operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaDeleteResult
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaDeleteResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaDeleteResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaOwnershipTransferRequest
    {
        /// <summary>
        /// The id of the user to whom the schema has to be transferred to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaOwnershipTransferRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaOwnershipTransferRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result of a schema create operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaCreateResult
    {
        /// <summary>
        /// The details of the created schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaDetail Schema { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaCreateResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaCreateRequest
    {
        /// <summary>
        /// The schema ID. It can be a slug, but must be unique throughout the whole customer setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The parent schema ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }

        /// <summary>
        /// List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }

        /// <summary>
        /// Language specific schema names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific schema descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DisplayPattern> DisplayPatterns { get; set; } = new System.Collections.Generic.List<DisplayPattern>();

        /// <summary>
        /// The schema fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldBase> Fields { get; set; }

        /// <summary>
        /// A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
        /// <br/>Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsOverwrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldOverwriteBase> FieldsOverwrite { get; set; }

        /// <summary>
        /// An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
        /// <br/>the UI uses such information to show the available filters and grouped results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregations { get; set; }

        /// <summary>
        /// Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
        /// <br/>must be set to true. Multiple sorting is supported: they are applied in the specified order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewForAll", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewForAll { get; set; }

        /// <summary>
        /// An optional list of schema permission set IDs which control schema permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaPermissionSetIds { get; set; }

        /// <summary>
        /// An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// If the schema if of type Layer, the list contains the schemas with type Content
        /// <br/>that reference the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferencedInContentSchemaIds { get; set; }

        /// <summary>
        /// Metadata protection options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataProtection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataProtection MetadataProtection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create multiple schemas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaCreateManyRequest
    {
        /// <summary>
        /// The schemas to create. Cyclic dependencies between schemas are supported, if they
        /// <br/>are all in the same request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemas", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SchemaCreateRequest> Schemas { get; set; } = new System.Collections.Generic.List<SchemaCreateRequest>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update multiple schemas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaUpdateManyRequest
    {
        /// <summary>
        /// The schemas to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemas", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SchemaUpdateItem> Schemas { get; set; } = new System.Collections.Generic.List<SchemaUpdateItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item to update a schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaUpdateItem : SchemaUpdateRequest
    {
        /// <summary>
        /// Id of the schema to update
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaUpdateItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaOwnershipTransferManyRequest
    {
        /// <summary>
        /// The schema ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SchemaIds { get; set; }

        /// <summary>
        /// The id of user to whom the schemas have to be transferred to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaOwnershipTransferManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaOwnershipTransferManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for schema search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaSearchResult : SearchBehaviorWithAggregationBaseResultOfSchema
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfSchema : SearchBehaviorBaseResultOfSchema
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfSchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfSchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfSchema : BaseResultOfSchema
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfSchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfSchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfSchema
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> Results { get; set; } = new System.Collections.Generic.List<Schema>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfSchema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfSchema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema
    {
        /// <summary>
        /// The schema ID. It is unique throughout the whole customer setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The parent schema ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }

        /// <summary>
        /// List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SchemaType> Types { get; set; }

        /// <summary>
        /// Language specific schema names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        /// <summary>
        /// Language specific schema descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        /// <summary>
        /// An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The count of all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.Always)]
        public int FieldCount { get; set; }

        /// <summary>
        /// The count of all schema descendants with an immediate inheritance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Always)]
        public int ChildCount { get; set; }

        /// <summary>
        /// The descendant depth of the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public int Level { get; set; }

        /// <summary>
        /// Identifies a system provided schema. A system schema cannot be created, updated or deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Schema FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Schema>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search schemas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaSearchRequest
    {
        /// <summary>
        /// The string used to query the data. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied in the specified order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Sorts the search results. Currently only sorting on the Names property is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the number of the returned schemas. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional filter to limit the schemas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the SchemaSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
        /// <br/>If not specified, all metadata languages in the system are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Limits the schemas to the ones the user has the specified MetadataRights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MetadataRight> RightsFilter { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transfer
    {
        /// <summary>
        /// ID of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Name of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// State of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }

        /// <summary>
        /// Type of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }

        /// <summary>
        /// Associated business process ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        /// <summary>
        /// Number of files in transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileTransferCount { get; set; }

        /// <summary>
        /// ID of collection created from transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Transfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Transfer states
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadInProgress")]
        UploadInProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCompleted")]
        UploadCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgress")]
        ImportInProgress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompleted")]
        ImportCompleted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCancelled")]
        UploadCancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelled")]
        ImportCancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportFailed")]
        ImportFailed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferReady")]
        TransferReady = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FileDeleteInProgress")]
        FileDeleteInProgress = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferCleanup")]
        TransferCleanup = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompletedWithErrors")]
        ImportCompletedWithErrors = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCompletedWithErrors")]
        UploadCompletedWithErrors = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCancellationInProgress")]
        UploadCancellationInProgress = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportDone")]
        ImportDone = 16,

    }

    /// <summary>
    /// Request to import schemas and list items
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaImportRequest
    {
        /// <summary>
        /// ID of the file transfer identifying the file previously uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileTransferId { get; set; }

        /// <summary>
        /// Allow creating list items that refer to list items or contents that don't exist in the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMissingDependencies", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMissingDependencies { get; set; }

        /// <summary>
        /// Import the list items belonging to the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importListItems", Required = Newtonsoft.Json.Required.Always)]
        public bool ImportListItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaImportRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Share detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareDetail
    {
        /// <summary>
        /// Share ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Name of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Description of share entered by user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Creator of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShareUser Creator { get; set; } = new ShareUser();

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAudit Audit { get; set; } = new UserAudit();

        /// <summary>
        /// Detailed information about contents in the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSelections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareContentDetail> ContentSelections { get; set; } = new System.Collections.Generic.List<ShareContentDetail>();

        /// <summary>
        /// List of all contents in share including outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareContentBase> Contents { get; set; } = new System.Collections.Generic.List<ShareContentBase>();

        /// <summary>
        /// List of shared layers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Detail of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareDataBase Data { get; set; }

        /// <summary>
        /// Date when share expires and cannot be accessed anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Info if share is already expired.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expired", Required = Newtonsoft.Json.Required.Always)]
        public bool Expired { get; set; }

        /// <summary>
        /// Defined access for contents in share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }

        /// <summary>
        /// Type of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }

        /// <summary>
        /// Schema detail of the content and the layers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemaDetail> Schemas { get; set; }

        /// <summary>
        /// Page token to retrieve next page of content selections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Number of contents in share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentCount", Required = Newtonsoft.Json.Required.Always)]
        public int ContentCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Reduced set of user information used for shares
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareUser
    {
        /// <summary>
        /// Name of user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DisplayName { get; set; }

        /// <summary>
        /// MD5 hash of email address. Can be used to display gravatar image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailHash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EmailHash { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail of shared content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareContentDetail
    {
        /// <summary>
        /// The ID of the schema with schema type content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentSchemaId { get; set; }

        /// <summary>
        /// An optional ID list of schemas with type layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The content data. It's an object of dynamic metadata whose structure is defined in the Content schema specified
        /// <br/>by the ContentSchemaId property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Content { get; set; } = new object();

        /// <summary>
        /// The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// Content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// List of shared outputs for this content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareOutputBase> Outputs { get; set; } = new System.Collections.Generic.List<ShareOutputBase>();

        /// <summary>
        /// The type of content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        /// <summary>
        /// Contains language specific display values, rendered according to the content schema's display pattern configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DisplayValueDictionary DisplayValues { get; set; } = new DisplayValueDictionary();

        /// <summary>
        /// Contains an URL that can be used to retrieve the icon corresponding to the file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The id of related DisplayContent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareContentDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContentDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base of shared output
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareOutputBasic", typeof(ShareOutputBasic))]
    [JsonInheritanceAttribute("ShareOutputEmbed", typeof(ShareOutputEmbed))]
    [JsonInheritanceAttribute("ShareOutputDisplayContent", typeof(ShareOutputDisplayContent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareOutputBase
    {
        /// <summary>
        /// Content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// Output format ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        /// <summary>
        /// Url to directly view output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewUrl { get; set; }

        /// <summary>
        /// Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Output details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDataBase Detail { get; set; }

        /// <summary>
        /// Whether this Output belongs to a dynamic OutputFormat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicRendering", Required = Newtonsoft.Json.Required.Always)]
        public bool DynamicRendering { get; set; }

        /// <summary>
        /// The rendering state of the output file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderingState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputRenderingState RenderingState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Shared output for basic share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareOutputBasic : ShareOutputBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputBasic FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputBasic>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Shared output for embed share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareOutputEmbed : ShareOutputBase
    {
        /// <summary>
        /// Share token for the shared output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputEmbed FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputEmbed>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Shared output for a display content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareOutputDisplayContent : ShareOutputBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputDisplayContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputDisplayContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareContent", typeof(ShareContent))]
    [JsonInheritanceAttribute("EmbedContent", typeof(EmbedContent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareContentBase
    {
        /// <summary>
        /// Content ID to share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// List of output formats for this content to share. If not specified outer OutputAccess is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputFormatIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareContentBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContentBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Shared content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareContent : ShareContentBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Embedded content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmbedContent : ShareContentBase
    {
        /// <summary>
        /// Conversion presets: Each output format of the shared content can be optionally converted/edited
        /// <br/>when delivering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversionPresets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversionPreset> ConversionPresets { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EmbedContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Preset for converting an output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversionPreset
    {
        /// <summary>
        /// OutputFormatId of output to be converted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OutputFormatId { get; set; }

        /// <summary>
        /// Conversion to apply to the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }

        /// <summary>
        /// Indicates if the conversion is locked and therefore cannot be changed by the caller of the embed URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConversionPreset FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionPreset>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base of share data
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareDataEmbed", typeof(ShareDataEmbed))]
    [JsonInheritanceAttribute("ShareDataBasic", typeof(ShareDataBasic))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareDataBase
    {
        /// <summary>
        /// The URL to access the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDataBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Embed share data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareDataEmbed : ShareDataBase
    {
        /// <summary>
        /// Token for the embed share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Token { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDataEmbed FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataEmbed>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Basic share data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareDataBasic : ShareDataBase
    {
        /// <summary>
        /// List of recipients added using email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailRecipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MailRecipient> MailRecipients { get; set; } = new System.Collections.Generic.List<MailRecipient>();

        /// <summary>
        /// List of recipients that exist in Picturepark.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalRecipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InternalRecipient> InternalRecipients { get; set; } = new System.Collections.Generic.List<InternalRecipient>();

        /// <summary>
        /// Language of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDataBasic FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDataBasic>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Share mail recipient
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailRecipient
    {
        /// <summary>
        /// User information including email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userEmail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserEmail UserEmail { get; set; } = new UserEmail();

        /// <summary>
        /// Recipient specific token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// URL to access the share for this recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MailRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MailRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserEmail
    {
        /// <summary>
        /// First name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EmailAddress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserEmail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Internal share recipient
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalRecipient
    {
        /// <summary>
        /// User information of recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public User Recipient { get; set; } = new User();

        /// <summary>
        /// Recipient specific token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// URL to access the share for this recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InternalRecipient FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternalRecipient>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputAccess
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Preview")]
        Preview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShareResolveBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Schemas")]
        Schemas = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareContentDetailResult : BaseResultOfShareContentDetail
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareContentDetailResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContentDetailResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfShareContentDetail
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareContentDetail> Results { get; set; } = new System.Collections.Generic.List<ShareContentDetail>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfShareContentDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfShareContentDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareOutputsResult
    {
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OutputResolveResult> Outputs { get; set; }

        [Newtonsoft.Json.JsonProperty("contentInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareContentInfo> ContentInfos { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareOutputsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareOutputsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareContentInfo
    {
        /// <summary>
        /// Content ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The type of content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        /// <summary>
        /// The ID of the schema with schema type content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareContentInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContentInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request specifying which part of a share should be downloaded
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareDownloadRequest
    {
        /// <summary>
        /// Specifies which content / output format combinations should be downloaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentDownloadRequestItem> Items { get; set; } = new System.Collections.Generic.List<ContentDownloadRequestItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDownloadRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDownloadRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base of update request for share
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicUpdateRequest", typeof(ShareBasicUpdateRequest))]
    [JsonInheritanceAttribute("ShareEmbedUpdateRequest", typeof(ShareEmbedUpdateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareBaseUpdateRequest
    {
        /// <summary>
        /// Name of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Optional date when share expires and cannot be accessed anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Optional description of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// List of contents including outputs. Existing items needs to be sent again, otherwise they will be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareContentBase> Contents { get; set; } = new System.Collections.Generic.List<ShareContentBase>();

        /// <summary>
        /// List of content layers to share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Access for content outputs in share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareBaseUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Update request for basic share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareBasicUpdateRequest : ShareBaseUpdateRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareBasicUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Update request for embed share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareEmbedUpdateRequest : ShareBaseUpdateRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareEmbedUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base create request for share
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicCreateRequest", typeof(ShareBasicCreateRequest))]
    [JsonInheritanceAttribute("ShareEmbedCreateRequest", typeof(ShareEmbedCreateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareBaseCreateRequest
    {
        /// <summary>
        /// Name of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Optional description of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional date when share expires and cannot be accessed anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// List of contents including outputs to share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareContentBase> Contents { get; set; } = new System.Collections.Generic.List<ShareContentBase>();

        /// <summary>
        /// List of content layers to share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// Access for content outputs in share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareBaseCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareBasicCreateRequest : ShareBaseCreateRequest
    {
        /// <summary>
        /// List of external mail recipients which are no Picturepark users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserEmail> RecipientEmails { get; set; }

        /// <summary>
        /// System language used for share (mail and detail page). en or de.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Set to true to disable the creation of notifications and emails to recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suppressNotifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SuppressNotifications { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareBasicCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Create request for embed share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareEmbedCreateRequest : ShareBaseCreateRequest
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareEmbedCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareDeleteManyRequest
    {
        /// <summary>
        /// IDs of shares to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareRevokeManyRequest
    {
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareRevokeManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareRevokeManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to aggregate shares based on the specified aggregators
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareAggregationRequest : ShareSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareAggregationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareAggregationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to aggregate shares based on the specified aggregators
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class ShareSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareSearchAndAggregationBaseRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchAndAggregationBaseRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for share search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareSearchResult : SearchBehaviorWithAggregationBaseResultOfShare
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfShare : SearchBehaviorBaseResultOfShare
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfShare FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfShare>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfShare : BaseResultOfShare
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfShare FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfShare>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfShare
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Share> Results { get; set; } = new System.Collections.Generic.List<Share>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfShare FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfShare>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Share
    {
        /// <summary>
        /// Share ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Name of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// List of shared content IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAudit Audit { get; set; } = new UserAudit();

        /// <summary>
        /// Date when share expires and cannot be accessed anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Type of share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }

        /// <summary>
        /// Share is readonly if the current user is not the creator but only the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReadOnly { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Share FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Share>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search shares
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareSearchRequest : ShareSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShareSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentStatisticsAggregated
    {
        /// <summary>
        /// Contains aggregated data for the complete lifetime of the Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overall", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentStatisticsData Overall { get; set; } = new ContentStatisticsData();

        /// <summary>
        /// Contains aggregated data according to requested time frames
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFrames", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContentStatisticsAggregatedTimeFrameBucket> TimeFrames { get; set; } = new System.Collections.Generic.List<ContentStatisticsAggregatedTimeFrameBucket>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentStatisticsAggregated FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentStatisticsAggregated>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentStatisticsData
    {
        /// <summary>
        /// Statistical data for downloads of a Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentDownloads Downloads { get; set; }

        /// <summary>
        /// Statistical data of share-related activities for a Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentSharings Sharings { get; set; } = new ContentSharings();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentStatisticsData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentStatisticsData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloads
    {
        /// <summary>
        /// Total downloads of content (regardless of formats, single download of multiple formats is counted once)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }

        /// <summary>
        /// Downloads of content through basic Share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Always)]
        public int Share { get; set; }

        /// <summary>
        /// Downloads of content through embed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embed", Required = Newtonsoft.Json.Required.Always)]
        public int Embed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloads FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloads>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentSharings
    {
        /// <summary>
        /// Times this Content was added to a Share (does not decrease when removed from Share)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareAdd", Required = Newtonsoft.Json.Required.Always)]
        public int ShareAdd { get; set; }

        /// <summary>
        /// Times this Content was added to an Embed (does not decrease when removed from Embed)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embedAdd", Required = Newtonsoft.Json.Required.Always)]
        public int EmbedAdd { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSharings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSharings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentStatisticsAggregatedTimeFrameBucket
    {
        /// <summary>
        /// The timeframe for which statistical data in this bucket was aggregated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFrame", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan TimeFrame { get; set; }

        /// <summary>
        /// Aggregated data for timeframe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentStatisticsData Data { get; set; } = new ContentStatisticsData();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentStatisticsAggregatedTimeFrameBucket FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentStatisticsAggregatedTimeFrameBucket>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportContentStatisticsRequest
    {
        /// <summary>
        /// Allows filtering of retrieved statistical data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentFilterRequest Filter { get; set; }

        /// <summary>
        /// Optional begin of time range for which statistical data should be exported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? After { get; set; }

        /// <summary>
        /// Optional end of time range for which statistical data should be exported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("before", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Before { get; set; }

        /// <summary>
        /// Whether exported information should be separated by api client
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregateApiClients", Required = Newtonsoft.Json.Required.Always)]
        public bool AggregateApiClients { get; set; }

        /// <summary>
        /// Enrich export with Name display value of Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeContentNames", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeContentNames { get; set; }

        /// <summary>
        /// Desired temporal resolution of exported data. Must not be lower than 1 hour
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan? Interval { get; set; }

        /// <summary>
        /// Whether notifications should be published for progress and completion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifyProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool NotifyProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ExportContentStatisticsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExportContentStatisticsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddContentEventsRequest
    {
        /// <summary>
        /// Data to be added to statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddContentEventsRequestItem> Events { get; set; } = new System.Collections.Generic.List<AddContentEventsRequestItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddContentEventsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddContentEventsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddContentEventsRequestItem
    {
        /// <summary>
        /// Specifies at which time the events happened. The information will be automatically aggregated according to internal temporal resolution of statistics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Specifies content for which the events happened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentId { get; set; }

        /// <summary>
        /// Optionally specify the used ApiClient. Defaults to the API Client sending this request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiClientId { get; set; }

        /// <summary>
        /// Data to be added to statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentStatisticsDataEditable Statistics { get; set; } = new ContentStatisticsDataEditable();

        /// <summary>
        /// Optionally specify an additional id under which the supplied data should be tracked. This
        /// <br/>Id is only used internally and cannot be retrieved through API or export.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalEventTraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalEventTraceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddContentEventsRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddContentEventsRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentStatisticsDataEditable
    {
        /// <summary>
        /// Statistical data for downloads of a Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentDownloadsEditable Downloads { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentStatisticsDataEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentStatisticsDataEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadsEditable
    {
        /// <summary>
        /// Total downloads of content (regardless of formats, single download of multiple formats is counted once)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }

        /// <summary>
        /// Downloads of content through basic Share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Always)]
        public int Share { get; set; }

        /// <summary>
        /// Downloads of content through embed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("embed", Required = Newtonsoft.Json.Required.Always)]
        public int Embed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadsEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadsEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Template : TemplateCreateRequest
    {
        /// <summary>
        /// ID of template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if this is a read-only system template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool System { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Template FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Template>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create a new template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateCreateRequest : TemplateUpdateRequest
    {
        /// <summary>
        /// Name of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Language code of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Type of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateType TemplateType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TemplateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ShareMail")]
        ShareMail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SharePage")]
        SharePage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NewUserRegisteredMail")]
        NewUserRegisteredMail = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserLockedMail")]
        UserLockedMail = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UserUnlockedMail")]
        UserUnlockedMail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UserReviewedMail")]
        UserReviewedMail = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserInvitationMail")]
        UserInvitationMail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ShareNotFoundPage")]
        ShareNotFoundPage = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UserTriggeredDeactivationRequestMail")]
        UserTriggeredDeactivationRequestMail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UserEmailConflictSolvedMail")]
        UserEmailConflictSolvedMail = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificationMail")]
        NotificationMail = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificationMailItem")]
        NotificationMailItem = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DashboardPage")]
        DashboardPage = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CommentNotificationMailItem")]
        CommentNotificationMailItem = 13,

    }

    /// <summary>
    /// Request to update a template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateUpdateRequest
    {
        /// <summary>
        /// Language specific names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// Values per media type for the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TemplateValue> Values { get; set; } = new System.Collections.Generic.List<TemplateValue>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Media type specific value for a template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateValue
    {
        /// <summary>
        /// Media type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MediaType { get; set; }

        /// <summary>
        /// Text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Text { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result for template search operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateSearchResult
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Template> Results { get; set; } = new System.Collections.Generic.List<Template>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search for templates
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateSearchRequest
    {
        /// <summary>
        /// Language code of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Type of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateType? TemplateType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemplateSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Creates a transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTransferRequest
    {
        /// <summary>
        /// Name of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Type of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }

        /// <summary>
        /// Files uploaded in transfer.
        /// <br/>The client is responsible for uploading files to backend.
        /// <br/>Required when TransferType is FileUpload or FileUploadAutoImport.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransferUploadFile> Files { get; set; }

        /// <summary>
        /// Weblinks downloaded in transfer.
        /// <br/>The backend will download files using HTTP, therefore public access to files is needed.
        /// <br/>Required when TransferType is WebDownload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransferWebLink> WebLinks { get; set; }

        /// <summary>
        /// Name of collection created after transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionName { get; set; }

        /// <summary>
        /// A value indicating whether to create a collection after importing the transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateTransferRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a file being uploaded in a transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferUploadFile : TransferFile
    {
        /// <summary>
        /// Target filename of file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferUploadFile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferUploadFile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents the base class for transfer items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class TransferFile
    {
        /// <summary>
        /// Replaced in favor of RequestId. Client generated identifier of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Replaced by RequestId")]
        public string Identifier { get; set; }

        /// <summary>
        /// Client generated identifier of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferFile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferFile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an item being downloaded by URL in a transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferWebLink : TransferFile
    {
        /// <summary>
        /// URL of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Url { get; set; }

        /// <summary>
        /// Optional target filename of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferWebLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferWebLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a transfer and includes detailed information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDetail : Transfer
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAudit Audit { get; set; } = new UserAudit();

        /// <summary>
        /// Number of items processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ItemProgress { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ItemCount { get; set; }

        /// <summary>
        /// Number of items currently being uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUploadInProgressCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FileUploadInProgressCount { get; set; }

        /// <summary>
        /// Number of items currently being processed in data extraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataExtractionInProgressCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DataExtractionInProgressCount { get; set; }

        /// <summary>
        /// Number of items failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsFailed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ItemsFailed { get; set; }

        /// <summary>
        /// Number of items cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsCancelled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ItemsCancelled { get; set; }

        /// <summary>
        /// Time stamp of last progress update from data extraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastDataExtractionProgressTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastDataExtractionProgressTimeStamp { get; set; }

        /// <summary>
        /// Time stamp of last progress update from upload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastFileUploadProgressTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastFileUploadProgressTimeStamp { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportTransferRequest
    {
        /// <summary>
        /// An optional id list of schemas with type layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// An optional id list of content permission sets. Controls content accessibility outside of content ownership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportTransferRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportTransferRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportTransferPartialRequest
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileTransferCreateItem> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImportTransferPartialRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportTransferPartialRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferCreateItem
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileId { get; set; }

        /// <summary>
        /// An optional id list of schemas with type layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LayerSchemaIds { get; set; }

        /// <summary>
        /// The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
        /// <br/>by the LayerSchemaIds property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// An optional id list of content permission sets. Controls content accessibility outside of content ownership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentPermissionSetIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferCreateItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCreateItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Result from a search for transfers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferSearchResult : SearchBehaviorBaseResultOfTransfer
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfTransfer : BaseResultOfTransfer
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfTransfer
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Transfer> Results { get; set; } = new System.Collections.Generic.List<Transfer>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search for transfers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferSearchRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the TransferSearchResult.
        /// <br/>Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detailed representation of file transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferDetail : FileTransfer
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserAudit Audit { get; set; } = new UserAudit();

        /// <summary>
        /// Metadata extracted for file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }

        /// <summary>
        /// Outputs rendered during data extraction phase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileTransferOutput> OutputItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }

        [Newtonsoft.Json.JsonProperty("xmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object XmpMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("exifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExifMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferOutput
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("outputSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputSource OutputSource { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Rendered")]
        Rendered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Embedded")]
        Embedded = 1,

    }

    /// <summary>
    /// Representation of a file transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransfer
    {
        /// <summary>
        /// ID of file transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// Name of file transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Replaced in favor of RequestId. Client provided identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete("Replaced by RequestId")]
        public string Identifier { get; set; }

        /// <summary>
        /// Client provided identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestId { get; set; }

        /// <summary>
        /// ID of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransferId { get; set; }

        /// <summary>
        /// State of file transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }

        /// <summary>
        /// ID of Content created for file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileTransferState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadInProgress")]
        UploadInProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCompleted")]
        UploadCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DataExtractionInProgress")]
        DataExtractionInProgress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DataExtractionDone")]
        DataExtractionDone = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportInProgress")]
        ImportInProgress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCompleted")]
        ImportCompleted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadCancelled")]
        UploadCancelled = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportCancelled")]
        ImportCancelled = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UploadFailed")]
        UploadFailed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportFailed")]
        ImportFailed = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DeleteInProgress")]
        DeleteInProgress = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CleanupInProgress")]
        CleanupInProgress = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CleanupCompleted")]
        CleanupCompleted = 14,

    }

    /// <summary>
    /// Result from a search for file transfers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferSearchResult : SearchBehaviorBaseResultOfFileTransfer
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfFileTransfer : BaseResultOfFileTransfer
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfFileTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfFileTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfFileTransfer
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FileTransfer> Results { get; set; } = new System.Collections.Generic.List<FileTransfer>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfFileTransfer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfFileTransfer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to search for file transfers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferSearchRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Deletes files from transfer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTransferDeleteRequest
    {
        /// <summary>
        /// ID of transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransferId { get; set; }

        /// <summary>
        /// List of IDs of file transfers to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileTransferIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> FileTransferIds { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileTransferDeleteRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDeleteRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Blacklist containing file name patterns skipped when uploading.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Blacklist
    {
        /// <summary>
        /// Blacklist entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BlacklistItem> Items { get; set; } = new System.Collections.Generic.List<BlacklistItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Blacklist FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blacklist>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Entry in the Blacklist.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlacklistItem
    {
        /// <summary>
        /// Friendly name of item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Pattern a file name must match to be excluded from the transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Match { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BlacklistItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlacklistItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds results of the user role search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleSearchResult : SearchBehaviorBaseResultOfUserRole
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfUserRole : BaseResultOfUserRole
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfUserRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfUserRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfUserRole
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserRole> Results { get; set; } = new System.Collections.Generic.List<UserRole>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfUserRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfUserRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a user role, which associates users with user rights.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRole : UserRoleEditable
    {
        /// <summary>
        /// User role ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a user role, which associates users with user rights.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleEditable
    {
        /// <summary>
        /// Language specific user role names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TranslatedStringDictionary Names { get; set; } = new TranslatedStringDictionary();

        /// <summary>
        /// All user rights for this user role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserRight> UserRights { get; set; } = new System.Collections.Generic.List<UserRight>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleSearchRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set. Defaults to 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Filter applied to user roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// Which languages to search against when using the search string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SearchLanguages { get; set; }

        /// <summary>
        /// Defines if the user roles with system user role Administrator is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAdministratorSystemUserRole", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAdministratorSystemUserRole { get; set; }

        /// <summary>
        /// Defines if anonymous user role should be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAnonymousUserRole", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAnonymousUserRole { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a user role, which associates users with user rights.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleDetail : UserRole
    {
        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information needed to create multiple user roles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleCreateManyRequest
    {
        /// <summary>
        /// Multiple user creation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserRoleCreateRequest> Items { get; set; } = new System.Collections.Generic.List<UserRoleCreateRequest>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information needed for user role creation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleCreateRequest : UserRoleEditable
    {
        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information about which user roles and how are requested to be updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleUpdateManyRequest
    {
        /// <summary>
        /// New value for user roles with specified IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserRole> Items { get; set; } = new System.Collections.Generic.List<UserRole>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information about which user roles are requested to be deleted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleDeleteManyRequest
    {
        /// <summary>
        /// IDs of the user roles to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Detail information about a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDetail : User
    {
        /// <summary>
        /// User roles the user should be assigned to. Overwrites the original user roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRoleAssignment> UserRoles { get; set; }

        /// <summary>
        /// Comment saved for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// Preferred language, e.g. for correspondence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// User's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }

        /// <summary>
        /// Identity provider that governs this user or null for Picturepark's own IdentityServer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityProviderId { get; set; }

        /// <summary>
        /// Owner tokens referencing the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OwnerToken> OwnerTokens { get; set; }

        /// <summary>
        /// Authorization state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        /// <summary>
        /// Locked users are unable to log in and use the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Life cycle state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Support user is a user created for Picturepark support personnel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSupportUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSupportUser { get; set; }

        /// <summary>
        /// Anonymous user is the automatically logged in user if public access is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymousUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnonymousUser { get; set; }

        /// <summary>
        /// Read-only users can't be removed from the system, e.g. service user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsReadOnly { get; set; }

        /// <summary>
        /// Federated user is a user who is (currently) governed by an external identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFederated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFederated { get; set; }

        /// <summary>
        /// Audit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditDetail Audit { get; set; }

        /// <summary>
        /// Last activity of user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleAssignment
    {
        /// <summary>
        /// User role assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserRole UserRole { get; set; }

        /// <summary>
        /// Marks user roles that were assigned automatically to a federated user based on group mapping of a federated identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFederated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFederated { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleAssignment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerToken
    {
        /// <summary>
        /// The ownertoken id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the user to whom this ownertoken currently belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OwnerToken FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerToken>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents the updateable fields of the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserUpdateRequest : User
    {
        /// <summary>
        /// User roles the user should be assigned to. Overwrites the original user roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; }

        /// <summary>
        /// Comment saved for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// Preferred language, e.g. for correspondence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LanguageCode { get; set; }

        /// <summary>
        /// User's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }

        /// <summary>
        /// Identity provider that governs this user or null for Picturepark's own IdentityServer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityProviderId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLockRequest
    {
        /// <summary>
        /// Indicates the requested lock state of the user.
        /// <br/>If _true_ was specified, the user will be _locked_. _False_ will unlock the previously _locked_ user.
        /// <br/>If User is already in desired state, this will be returned as error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lock", Required = Newtonsoft.Json.Required.Always)]
        public bool Lock { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserLockRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserLockRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request update of lock state of multiple users
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLockManyRequest : UserManyRequestBase
    {
        /// <summary>
        /// Indicates the requested lock state of the users.
        /// <br/>If _true_ was specified, the users will be _locked_. _False_ will unlock the previously _locked_ users.
        /// <br/>Users which are already in desired state will be returned as errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lock", Required = Newtonsoft.Json.Required.Always)]
        public bool Lock { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserLockManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserLockManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for requests affecting multiple users
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class UserManyRequestBase
    {
        /// <summary>
        /// User IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> UserIds { get; set; } = new System.Collections.Generic.List<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserManyRequestBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserManyRequestBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds additional information for user review.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserReviewRequest
    {
        /// <summary>
        /// Indicates the requested review state of the user.
        /// <br/>If _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reviewed", Required = Newtonsoft.Json.Required.Always)]
        public bool Reviewed { get; set; }

        /// <summary>
        /// If true, no email will be sent to inform the user that they were reviewed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suppressEmail", Required = Newtonsoft.Json.Required.Always)]
        public bool SuppressEmail { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserReviewRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserReviewRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Review many request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserReviewManyRequest : UserManyRequestBase
    {
        /// <summary>
        /// Indicates the requested review state of the user.
        /// <br/>If _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reviewed", Required = Newtonsoft.Json.Required.Always)]
        public bool Reviewed { get; set; }

        /// <summary>
        /// If true, no email will be sent to inform the users that they were reviewed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suppressEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SuppressEmail { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserReviewManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserReviewManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request for inviting users (applies to users in states ToBeReviewed + Reviewed)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInviteManyRequest : UserManyRequestBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserInviteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInviteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request for re-inviting users (applies to users in states Invited)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserReinviteManyRequest : UserManyRequestBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserReinviteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserReinviteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update role assignment of users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleAssignManyRequest : UserManyRequestBase
    {
        /// <summary>
        /// Users roles to modify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Defines how to apply specified UserRoleIds to UserIds
        /// <br/>If an operation results in no change for a user, that user will be returned as succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserRoleAssignmentOperationType Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserRoleAssignManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User role assignment operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserRoleAssignmentOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 2,

    }

    /// <summary>
    /// Details of the user deletion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDeleteRequest
    {
        /// <summary>
        /// User ID of user who will take over the ownership of the content currently owned by the deleted user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenTransferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenTransferUserId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDeleteRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDeleteRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds information needed for user creation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserCreateRequest
    {
        /// <summary>
        /// User's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the user (doubles as username).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Preferred language, e.g. for correspondence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LanguageCode { get; set; }

        /// <summary>
        /// IDs of user roles the user is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        /// <summary>
        /// User address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds results of the user search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSearchResult : SearchBehaviorWithAggregationBaseResultOfUserWithRoles
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserSearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfUserWithRoles : SearchBehaviorBaseResultOfUserWithRoles
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfUserWithRoles FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfUserWithRoles>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfUserWithRoles : BaseResultOfUserWithRoles
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfUserWithRoles FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfUserWithRoles>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfUserWithRoles
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserWithRoles> Results { get; set; } = new System.Collections.Generic.List<UserWithRoles>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfUserWithRoles FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfUserWithRoles>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User information retrieved via search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserWithRoles
    {
        /// <summary>
        /// IDs of user roles user is assigned to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UserRoleIds { get; set; }

        /// <summary>
        /// User's Picturepark ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// User's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of the user (doubles as username).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Authorization state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        /// <summary>
        /// Life cycle state the user is currently in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        /// <summary>
        /// A locked user is not allowed to log in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// A support user is a user created for Picturepark support personnel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSupportUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSupportUser { get; set; }

        /// <summary>
        /// Read-only users can't be removed from the system, e.g. service user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReadOnly { get; set; }

        /// <summary>
        /// Federated user is a user who is (currently) governed by an external identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFederated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFederated { get; set; }

        /// <summary>
        /// Anonymous user is the automatically logged in user if public access is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymousUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAnonymousUser { get; set; }

        /// <summary>
        /// Last activity of user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserWithRoles FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserWithRoles>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents user search request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSearchRequest : UserSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserSearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an aggregation request over users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class UserSearchAndAggregationBaseRequest : UsersSearchBaseRequest
    {
        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserSearchAndAggregationBaseRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchAndAggregationBaseRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a search request over users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class UsersSearchBaseRequest
    {
        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Return only users in certain life cycle state(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }

        /// <summary>
        /// Return only users with certain user rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<UserRight> UserRightsFilter { get; set; }

        /// <summary>
        /// Includes the service user in result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeServiceUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeServiceUser { get; set; }

        /// <summary>
        /// Includes the anonymous user in result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAnonymousUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAnonymousUser { get; set; }

        /// <summary>
        /// Restricts the results to users that are editable for calling user.
        /// <br/>If set to true, IncludeServiceUser is ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editableOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool EditableOnly { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UsersSearchBaseRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UsersSearchBaseRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an aggregation request over users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAggregationRequest : UserSearchAndAggregationBaseRequest
    {
        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; } = new System.Collections.Generic.List<AggregatorBase>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserAggregationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAggregationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update identity provider assignment of users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserUpdateIdentityProviderManyRequest : UserManyRequestBase
    {
        /// <summary>
        /// Identity provider to assign to users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityProviderId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserUpdateIdentityProviderManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserUpdateIdentityProviderManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Holds results of the list user search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserListResult : SearchBehaviorBaseResultOfUser
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserListResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserListResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfUser : BaseResultOfUser
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfUser
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<User> Results { get; set; } = new System.Collections.Generic.List<User>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents user list request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserListRequest : UsersSearchBaseRequest
    {
        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserListRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserListRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a list of source/target fields for XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingTargets
    {
        /// <summary>
        /// Fields in XMP/Exif.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmpFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<XmpField> XmpFields { get; set; } = new System.Collections.Generic.List<XmpField>();

        /// <summary>
        /// Fields in metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataField> MetadataFields { get; set; } = new System.Collections.Generic.List<MetadataField>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingTargets FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingTargets>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a field in XMP that can be mapped from or to
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpField
    {
        /// <summary>
        /// Path of the field in XMP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// Indicates if the field can be written to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWritable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsWritable { get; set; }

        /// <summary>
        /// Data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public XmpFieldDataType DataType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Data types of XMP fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum XmpFieldDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LangAlt")]
        LangAlt = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 2,

    }

    /// <summary>
    /// Represents a field in metadata that XMP can be mapped to or from
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataField
    {
        /// <summary>
        /// Path to the field in metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; }

        /// <summary>
        /// Indicates if the field can act as target for a mapping.
        /// <br/>If field is read-only, it can only act as source of a mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWritable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsWritable { get; set; }

        /// <summary>
        /// Data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetadataFieldDataType DataType { get; set; }

        /// <summary>
        /// A list of field IDs that can be used as a key field when a tagbox is mapped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableKeyFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AvailableKeyFields { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetadataField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Data types of metadata fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetadataFieldDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TranslatedString")]
        TranslatedString = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tagbox")]
        Tagbox = 2,

    }

    /// <summary>
    /// Holds results of search for XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntrySearchResult : SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntrySearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntrySearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry : SearchBehaviorBaseResultOfXmpMappingEntry
    {
        /// <summary>
        /// Results of the aggregation, if any aggregators was passed in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationResult> AggregationResults { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search result queries that support SearchBehaviors
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBehaviorBaseResultOfXmpMappingEntry : BaseResultOfXmpMappingEntry
    {
        /// <summary>
        /// The search string used to query the data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// Flag to notify if the SearchString was modified compared to the original requested one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSearchStringRewritten { get; set; }

        /// <summary>
        /// Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryDebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryDebugInformation> QueryDebugInformation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchBehaviorBaseResultOfXmpMappingEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchBehaviorBaseResultOfXmpMappingEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class for search results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResultOfXmpMappingEntry
    {
        /// <summary>
        /// The total number of matching documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }

        /// <summary>
        /// The matched documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<XmpMappingEntry> Results { get; set; } = new System.Collections.Generic.List<XmpMappingEntry>();

        /// <summary>
        /// The search execution time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }

        /// <summary>
        /// An optional token to access the next page of results for those endpoints that support backend scrolling logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseResultOfXmpMappingEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfXmpMappingEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// XMP mapping entry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntry : XmpMappingEntryEditable
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Editable properties of a XMP mapping entry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryEditable
    {
        /// <summary>
        /// Direction of the mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MappingDirection Direction { get; set; }

        /// <summary>
        /// Priority of the mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        /// <summary>
        /// Stop processing further mappings for the same field if a value was found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stopProcessing", Required = Newtonsoft.Json.Required.Always)]
        public bool StopProcessing { get; set; }

        /// <summary>
        /// Path to source property in XMP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xmpPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string XmpPath { get; set; }

        /// <summary>
        /// Path to target property in metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MetadataPath { get; set; }

        /// <summary>
        /// Optional additional configuration for the mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMappingEntryConfigurationBase Configuration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryEditable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryEditable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Direction of mapping of XMP data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MappingDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"XmpToMetadata")]
        XmpToMetadata = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataToXmp")]
        MetadataToXmp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Both")]
        Both = 2,

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("XmpMappingEntryConfigurationTagbox", typeof(XmpMappingEntryConfigurationTagbox))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class XmpMappingEntryConfigurationBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryConfigurationBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryConfigurationBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Additional configuration for a mapping tagbox fields
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryConfigurationTagbox : XmpMappingEntryConfigurationBase
    {
        /// <summary>
        /// IDs of key fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyFieldIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> KeyFieldIds { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// Indicates if lookup shall be performed case sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caseSensitive", Required = Newtonsoft.Json.Required.Always)]
        public bool CaseSensitive { get; set; }

        /// <summary>
        /// Indicates if child schemas should also be included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryConfigurationTagbox FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryConfigurationTagbox>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search request for getting configured XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntrySearchRequest
    {
        /// <summary>
        /// Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugMode", Required = Newtonsoft.Json.Required.Always)]
        public bool DebugMode { get; set; } = false;

        /// <summary>
        /// Special filters used to filter down independently the aggregations' values and the search results on specific conditions.
        /// <br/>For the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated
        /// <br/>by the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.
        /// <br/>For the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the
        /// <br/>aggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).
        /// <br/>Moreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregationFilter> AggregationFilters { get; set; }

        /// <summary>
        /// List of aggregators that defines how the items should be aggregated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregatorBase> Aggregators { get; set; }

        /// <summary>
        /// An optional search filter. Limits the document result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Limits the document count of the result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; } = 30;

        /// <summary>
        /// The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }

        /// <summary>
        /// Limits the search by using a query string filter. The Lucene query string syntax is supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }

        /// <summary>
        /// An optional list of search behaviors. All the passed behaviors will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchBehavior> SearchBehaviors { get; set; }

        /// <summary>
        /// Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntrySearchRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntrySearchRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create XMP mapping
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryCreateRequest : XmpMappingEntryEditable
    {
        /// <summary>
        /// Optional client reference for this request.
        /// <br/>Will be returned back in response to make easier for clients to match request items with the respective results.
        /// <br/>It is not persisted anywhere and it is ignored in single operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to create many XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryCreateManyRequest
    {
        /// <summary>
        /// Mappings to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XmpMappingEntryCreateRequest> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryCreateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryCreateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to update many XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryUpdateManyRequest
    {
        /// <summary>
        /// Items to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XmpMappingEntry> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryUpdateManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryUpdateManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request to delete many XMP mappings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmpMappingEntryDeleteManyRequest
    {
        /// <summary>
        /// IDs to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XmpMappingEntryDeleteManyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMappingEntryDeleteManyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataDictionary : System.Collections.Generic.Dictionary<string, object>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DataDictionary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDictionary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveStreamMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("documentChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentChange DocumentChange { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationEvent ApplicationEvent { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveStreamMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentChange
    {
        [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentName { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime TimeStamp { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentChange FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentChange>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("TransferEvent", typeof(TransferEvent))]
    [JsonInheritanceAttribute("ReindexEvent", typeof(ReindexEvent))]
    [JsonInheritanceAttribute("ContentDetailViewEvent", typeof(ContentDetailViewEvent))]
    [JsonInheritanceAttribute("ContentDownloadEvent", typeof(ContentDownloadEvent))]
    [JsonInheritanceAttribute("ContentShareEvent", typeof(ContentShareEvent))]
    [JsonInheritanceAttribute("SessionRenewalEvent", typeof(SessionRenewalEvent))]
    [JsonInheritanceAttribute("SharePageViewEvent", typeof(SharePageViewEvent))]
    [JsonInheritanceAttribute("ApiStatisticsEvent", typeof(ApiStatisticsEvent))]
    [JsonInheritanceAttribute("TrafficStatisticsEvent", typeof(TrafficStatisticsEvent))]
    [JsonInheritanceAttribute("OutputRenderedEvent", typeof(OutputRenderedEvent))]
    [JsonInheritanceAttribute("ConfigurationChangeEvent", typeof(ConfigurationChangeEvent))]
    [JsonInheritanceAttribute("CustomerChangeEvent", typeof(CustomerChangeEvent))]
    [JsonInheritanceAttribute("SearchReindexCompletedEvent", typeof(SearchReindexCompletedEvent))]
    [JsonInheritanceAttribute("BusinessRuleFiredEvent", typeof(BusinessRuleFiredEvent))]
    [JsonInheritanceAttribute("BusinessProcessCancellationRequestedEvent", typeof(BusinessProcessCancellationRequestedEvent))]
    [JsonInheritanceAttribute("DataExtractionRepairEvent", typeof(DataExtractionRepairEvent))]
    [JsonInheritanceAttribute("TaggerStatisticsEvent", typeof(TaggerStatisticsEvent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Timestamp { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApplicationEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransferEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReindexEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndexState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReindexEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReindexEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndexState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReindexInProgress")]
        ReindexInProgress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDetailViewEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDetailViewEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetailViewEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDownloadEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("downloadInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DownloadTrackingInfo> DownloadInfos { get; set; }

        [Newtonsoft.Json.JsonProperty("fileSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("shareToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareToken { get; set; }

        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Range { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDownloadEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDownloadEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadTrackingInfo
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDisposition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentDisposition ContentDisposition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DownloadTrackingInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadTrackingInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentDisposition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Attachment")]
        Attachment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inline")]
        Inline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentShareEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }

        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareType ShareType { get; set; }

        [Newtonsoft.Json.JsonProperty("addedContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AddedContentIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentShareEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentShareEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionRenewalEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SessionRenewalEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SessionRenewalEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharePageViewEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("shareToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SharePageViewEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SharePageViewEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("requestsPerClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> RequestsPerClient { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrafficStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        [Newtonsoft.Json.JsonProperty("requestSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RequestSize { get; set; }

        [Newtonsoft.Json.JsonProperty("responseSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ResponseSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrafficStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrafficStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputRenderedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("outputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }

        [Newtonsoft.Json.JsonProperty("renderingState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputRenderingState RenderingState { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OutputRenderedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputRenderedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigurationChangeEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfigurationChangeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationChangeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerChangeEvent : ConfigurationChangeEvent
    {
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomerChangeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerChangeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchReindexCompletedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("searchIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchIndexType SearchIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Items { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan Duration { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchReindexCompletedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchReindexCompletedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchIndexType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ListItem")]
        ListItem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleFiredEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessRuleFiredEventDetail> Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFiredEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFiredEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessRuleFiredEventDetail
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RuleIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessRuleFiredEventDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessRuleFiredEventDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessProcessCancellationRequestedEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BusinessProcessCancellationRequestedEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessCancellationRequestedEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataExtractionRepairEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("contentRepairRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentRepairRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }

        [Newtonsoft.Json.JsonProperty("hadChanges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HadChanges { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DataExtractionRepairEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataExtractionRepairEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaggerStatisticsEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("requestsCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RequestsCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("taggerCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TaggerCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("ocrCounter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OcrCounter { get; set; }

        [Newtonsoft.Json.JsonProperty("taggerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaggerName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaggerStatisticsEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaggerStatisticsEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("LiveStreamMessage", typeof(LiveStreamMessage))]
    [JsonInheritanceAttribute("ConsoleMessage", typeof(ConsoleMessage))]
    [JsonInheritanceAttribute("NodeInfoMessage", typeof(NodeInfoMessage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class Message
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }

        [Newtonsoft.Json.JsonProperty("retriesPerformed", Required = Newtonsoft.Json.Required.Always)]
        public int RetriesPerformed { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("deduplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Deduplicate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Message FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsoleMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("command", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Command { get; set; }

        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TupleOfStringAndString> Arguments { get; set; }

        [Newtonsoft.Json.JsonProperty("targetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConsoleMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsoleMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TupleOfStringAndString
    {
        [Newtonsoft.Json.JsonProperty("item1", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Item1 { get; set; }

        [Newtonsoft.Json.JsonProperty("item2", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Item2 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TupleOfStringAndString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TupleOfStringAndString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeInfoMessage : Message
    {
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastResponseTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime LastResponseTime { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("productVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }

        [Newtonsoft.Json.JsonProperty("logLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogLevel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NodeInfoMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NodeInfoMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioStream
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }

        [Newtonsoft.Json.JsonProperty("bitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }

        [Newtonsoft.Json.JsonProperty("channelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }

        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AudioStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("documentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("characterCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CharacterCount { get; set; }

        [Newtonsoft.Json.JsonProperty("characterCountWithSpaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CharacterCountWithSpaces { get; set; }

        [Newtonsoft.Json.JsonProperty("lineCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LineCount { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("slideCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlideCount { get; set; }

        [Newtonsoft.Json.JsonProperty("paragraphCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParagraphCount { get; set; }

        [Newtonsoft.Json.JsonProperty("revisionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RevisionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Titles { get; set; }

        [Newtonsoft.Json.JsonProperty("imageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImageTitles { get; set; }

        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpsMetadata
    {
        [Newtonsoft.Json.JsonProperty("isRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpsMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInInch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WidthInInch { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInInch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightInInch { get; set; }

        [Newtonsoft.Json.JsonProperty("widthInCm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WidthInCm { get; set; }

        [Newtonsoft.Json.JsonProperty("heightInCm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightInCm { get; set; }

        [Newtonsoft.Json.JsonProperty("colorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }

        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("bitsPerPixel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitsPerPixel { get; set; }

        [Newtonsoft.Json.JsonProperty("bitsPerChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitsPerChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }

        [Newtonsoft.Json.JsonProperty("pixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAlpha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAlpha { get; set; }

        [Newtonsoft.Json.JsonProperty("isIndexed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsIndexed { get; set; }

        [Newtonsoft.Json.JsonProperty("isExtended", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsExtended { get; set; }

        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HorizontalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double VerticalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("totalFrames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalFrames { get; set; }

        [Newtonsoft.Json.JsonProperty("totalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }

        [Newtonsoft.Json.JsonProperty("hasExifData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasExifData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasIptcData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasIptcData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAdobeResourceData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAdobeResourceData { get; set; }

        [Newtonsoft.Json.JsonProperty("hasXmpData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasXmpData { get; set; }

        [Newtonsoft.Json.JsonProperty("uncompressedSizeInBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UncompressedSizeInBytes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("overallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("videoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VideoStream> VideoStreams { get; set; }

        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AudioStream> AudioStreams { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoStream
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("displayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public float DurationInSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("frameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }

        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FrameRate { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("pixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PixelAspectRatio { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Rotation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoStream FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VectorMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VectorMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMeta : DynamicViewFieldMetaBase
    {
        /// <summary>
        /// Filter for the dynamic view field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FilterBase Filter { get; set; }

        /// <summary>
        /// Sorting information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SortInfo> Sort { get; set; }

        /// <summary>
        /// Target doc type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetDocType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TargetDocType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMeta FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMeta>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Base class of meta information for a dynamic view field
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DynamicViewFieldMeta", typeof(DynamicViewFieldMeta))]
    [JsonInheritanceAttribute("DynamicViewFieldMetaWithRenderingError", typeof(DynamicViewFieldMetaWithRenderingError))]
    [JsonInheritanceAttribute("DynamicViewFieldMetaWithHasItems", typeof(DynamicViewFieldMetaWithHasItems))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DynamicViewFieldMetaBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field including a flag that indicates if the rendered filter does match some items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMetaWithHasItems : DynamicViewFieldMeta
    {
        /// <summary>
        /// indicates if the rendered filter does match some items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithHasItems FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithHasItems>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta information for a dynamic view field where the filter could not be rendered successfully.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicViewFieldMetaWithRenderingError : DynamicViewFieldMetaWithErrorBase
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithRenderingError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithRenderingError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class DynamicViewFieldMetaWithErrorBase : DynamicViewFieldMetaBase
    {
        /// <summary>
        /// The serialized PictureparkException
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicViewFieldMetaWithErrorBase FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicViewFieldMetaWithErrorBase>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
